<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.6.5 on win32)" generated="20201129 08:08:11.099" rpa="false">
<suite id="s1" name="Acceptance" source="C:\repo\rfhub2\tests\acceptance">
<kw name="Start Rfhub2" library="keywords" type="setup">
<doc>Starts rfhub2 on the port given in the variable ${PORT}
As a side effect this creates a suite variable named ${rfhub process},
which is used by the 'Stop rfhub2' keyword.</doc>
<kw name="Remove File" library="OperatingSystem">
<doc>Removes a file with the given path.</doc>
<arguments>
<arg>${DB_PATH}</arg>
</arguments>
<msg timestamp="20201129 08:08:11.528" level="INFO" html="yes">Removed file '&lt;a href="file://C:\repo\rfhub2\test.db"&gt;C:\repo\rfhub2\test.db&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:08:11.526" endtime="20201129 08:08:11.528"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>${ACTIVATE_VENV} ${DB_URI} rfhub2</arg>
<arg>shell=True</arg>
<arg>stdout=api_logs.log</arg>
<arg>stderr=stderr_logs.log</arg>
</arguments>
<assign>
<var>${rfhub2_process}</var>
</assign>
<msg timestamp="20201129 08:08:11.530" level="INFO">Starting process:
  rfhub2</msg>
<msg timestamp="20201129 08:08:11.747" level="INFO">${rfhub2_process} = 1</msg>
<status status="PASS" starttime="20201129 08:08:11.528" endtime="20201129 08:08:11.747"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${rfhub2_process}</arg>
</arguments>
<msg timestamp="20201129 08:08:11.747" level="INFO">${rfhub2_process} = 1</msg>
<status status="PASS" starttime="20201129 08:08:11.747" endtime="20201129 08:08:11.748"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>20 seconds</arg>
<arg>0.5 second</arg>
<arg>Verify URL Is Reachable</arg>
<arg>/api/v1/health</arg>
</arguments>
<kw name="Verify URL Is Reachable" library="keywords">
<doc>Fail if the given URL doesn't return a status code of 200.</doc>
<arguments>
<arg>/api/v1/health</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:${PORT}</arg>
</arguments>
<msg timestamp="20201129 08:08:11.749" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:08:11.749" endtime="20201129 08:08:11.750"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${url}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:08:12.775" level="INFO">GET Request : url=http://localhost:8000/api/v1/health (redirected) 
 path_url=/api/v1/health 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:08:12.775" level="INFO">GET Response : url=http://localhost:8000/api/v1/health/ 
 status=200, reason=OK 
 body={"db":"ok"} 
 </msg>
<msg timestamp="20201129 08:08:12.775" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:08:11.750" endtime="20201129 08:08:12.776"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:08:12.776" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:08:12.776" endtime="20201129 08:08:12.777"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:11.748" endtime="20201129 08:08:12.777"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:11.748" endtime="20201129 08:08:12.777"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:11.526" endtime="20201129 08:08:12.777"></status>
</kw>
<suite id="s1-s1" name="Cli Options" source="C:\repo\rfhub2\tests\acceptance\cli_options.robot">
<kw name="Run Package With Help Option" type="setup">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--help</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:08:12.931" level="INFO">Running command ' rfhub2-cli --help 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:08:14.515" level="INFO">${output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...

  Package to populate rfhub2 with robot framework keywords from libraries
  and resource files.

Options:
  -a, --app-url TEXT              Specifies IP, URI or...</msg>
<status status="PASS" starttime="20201129 08:08:12.790" endtime="20201129 08:08:14.515"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:08:14.516" level="INFO">${output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...

  Package to populate rfhub2 with robot framework keywords from libraries
  and resource files.

Options:
  -a, --app-url TEXT              Specifies IP, URI or...</msg>
<status status="PASS" starttime="20201129 08:08:14.516" endtime="20201129 08:08:14.516"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:12.789" endtime="20201129 08:08:14.516"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:12.789" endtime="20201129 08:08:14.517"></status>
</kw>
<test id="s1-s1-t1" name="Documentation For Whole Package Should Be Displayed Properly">
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Package to populate rfhub2 with robot framework keywords from libraries</arg>
<arg>and resource files.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:14.521" level="INFO">${ns} = {'output': 'Usage: rfhub2-cli [OPTIONS] [PATHS]...\n\n  Package to populate rfhub2 with robot framework keywords from libraries\n  and resource files.\n\nOptions:\n  -a, --app-url TEXT              Sp...</msg>
<status status="PASS" starttime="20201129 08:08:14.520" endtime="20201129 08:08:14.521"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:14.521" level="INFO">${clean_output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...  Package to populate rfhub2 with robot framework keywords from libraries and resource files.  Options: -a, --app-url TEXT              Specifies IP, URI or host ...</msg>
<status status="PASS" starttime="20201129 08:08:14.521" endtime="20201129 08:08:14.522"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Package to populate rfhub2 with robot framework keywords from libraries" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.522" endtime="20201129 08:08:14.523"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.522" endtime="20201129 08:08:14.523"></status>
</kw>
<kw name="${pattern} = and resource files." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.523" endtime="20201129 08:08:14.524"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.523" endtime="20201129 08:08:14.524"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.522" endtime="20201129 08:08:14.524"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.519" endtime="20201129 08:08:14.524"></status>
</kw>
<doc>Documentation For Whole Package Should Be Displayed Properly</doc>
<status status="PASS" starttime="20201129 08:08:14.517" endtime="20201129 08:08:14.524" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Documentation For AppUrl Should Be Displayed Properly">
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>-a, --app-url TEXT</arg>
<arg>Specifies IP, URI or host of rfhub2 web</arg>
<arg>application. Default value is</arg>
<arg>http://localhost:8000.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:14.527" level="INFO">${ns} = {'output': 'Usage: rfhub2-cli [OPTIONS] [PATHS]...\n\n  Package to populate rfhub2 with robot framework keywords from libraries\n  and resource files.\n\nOptions:\n  -a, --app-url TEXT              Sp...</msg>
<status status="PASS" starttime="20201129 08:08:14.526" endtime="20201129 08:08:14.527"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:14.528" level="INFO">${clean_output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...  Package to populate rfhub2 with robot framework keywords from libraries and resource files.  Options: -a, --app-url TEXT              Specifies IP, URI or host ...</msg>
<status status="PASS" starttime="20201129 08:08:14.527" endtime="20201129 08:08:14.528"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = -a, --app-url TEXT" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.529" endtime="20201129 08:08:14.529"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.528" endtime="20201129 08:08:14.529"></status>
</kw>
<kw name="${pattern} = Specifies IP, URI or host of rfhub2 web" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.529" endtime="20201129 08:08:14.530"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.529" endtime="20201129 08:08:14.530"></status>
</kw>
<kw name="${pattern} = application. Default value is" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.530" endtime="20201129 08:08:14.531"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.530" endtime="20201129 08:08:14.531"></status>
</kw>
<kw name="${pattern} = http://localhost:8000." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.531" endtime="20201129 08:08:14.531"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.531" endtime="20201129 08:08:14.531"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.528" endtime="20201129 08:08:14.532"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.526" endtime="20201129 08:08:14.532"></status>
</kw>
<doc>Documentation For AppUrl Should Be Displayed Properly</doc>
<status status="PASS" starttime="20201129 08:08:14.525" endtime="20201129 08:08:14.532" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="Documentation For User Should Be Displayed Properly">
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>-u, --user TEXT</arg>
<arg>Specifies rfhub2 user to authenticate on</arg>
<arg>endpoints that requires that. Default value</arg>
<arg>is rfhub.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:14.535" level="INFO">${ns} = {'output': 'Usage: rfhub2-cli [OPTIONS] [PATHS]...\n\n  Package to populate rfhub2 with robot framework keywords from libraries\n  and resource files.\n\nOptions:\n  -a, --app-url TEXT              Sp...</msg>
<status status="PASS" starttime="20201129 08:08:14.535" endtime="20201129 08:08:14.535"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:14.536" level="INFO">${clean_output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...  Package to populate rfhub2 with robot framework keywords from libraries and resource files.  Options: -a, --app-url TEXT              Specifies IP, URI or host ...</msg>
<status status="PASS" starttime="20201129 08:08:14.535" endtime="20201129 08:08:14.536"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = -u, --user TEXT" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.537" endtime="20201129 08:08:14.537"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.537" endtime="20201129 08:08:14.537"></status>
</kw>
<kw name="${pattern} = Specifies rfhub2 user to authenticate on" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.538" endtime="20201129 08:08:14.538"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.537" endtime="20201129 08:08:14.538"></status>
</kw>
<kw name="${pattern} = endpoints that requires that. Default value" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.539" endtime="20201129 08:08:14.539"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.538" endtime="20201129 08:08:14.539"></status>
</kw>
<kw name="${pattern} = is rfhub." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.539" endtime="20201129 08:08:14.540"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.539" endtime="20201129 08:08:14.540"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.536" endtime="20201129 08:08:14.540"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.534" endtime="20201129 08:08:14.540"></status>
</kw>
<doc>Documentation For User Should Be Displayed Properly</doc>
<status status="PASS" starttime="20201129 08:08:14.533" endtime="20201129 08:08:14.540" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Documentation For Password Should Be Displayed Properly">
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>-p, --password TEXT</arg>
<arg>Specifies rfhub2 password to authenticate on</arg>
<arg>endpoints that requires that. Default value</arg>
<arg>is rfhub.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:14.543" level="INFO">${ns} = {'output': 'Usage: rfhub2-cli [OPTIONS] [PATHS]...\n\n  Package to populate rfhub2 with robot framework keywords from libraries\n  and resource files.\n\nOptions:\n  -a, --app-url TEXT              Sp...</msg>
<status status="PASS" starttime="20201129 08:08:14.543" endtime="20201129 08:08:14.544"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:14.544" level="INFO">${clean_output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...  Package to populate rfhub2 with robot framework keywords from libraries and resource files.  Options: -a, --app-url TEXT              Specifies IP, URI or host ...</msg>
<status status="PASS" starttime="20201129 08:08:14.544" endtime="20201129 08:08:14.544"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = -p, --password TEXT" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.545" endtime="20201129 08:08:14.545"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.545" endtime="20201129 08:08:14.545"></status>
</kw>
<kw name="${pattern} = Specifies rfhub2 password to authenticate on" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.546" endtime="20201129 08:08:14.546"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.546" endtime="20201129 08:08:14.546"></status>
</kw>
<kw name="${pattern} = endpoints that requires that. Default value" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.547" endtime="20201129 08:08:14.547"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.546" endtime="20201129 08:08:14.547"></status>
</kw>
<kw name="${pattern} = is rfhub." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.547" endtime="20201129 08:08:14.548"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.547" endtime="20201129 08:08:14.548"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.544" endtime="20201129 08:08:14.548"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.542" endtime="20201129 08:08:14.548"></status>
</kw>
<doc>Documentation For Password Should Be Displayed Properly</doc>
<status status="PASS" starttime="20201129 08:08:14.541" endtime="20201129 08:08:14.548" critical="yes"></status>
</test>
<test id="s1-s1-t5" name="Documentation For No Installed Keywords Should Be Displayed Properly">
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>--no-installed-keywords</arg>
<arg>Flag specifying if package should skip</arg>
<arg>loading commonly installed libraries, such</arg>
<arg>as such as BuiltIn, Collections, DateTime</arg>
<arg>etc.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:14.552" level="INFO">${ns} = {'output': 'Usage: rfhub2-cli [OPTIONS] [PATHS]...\n\n  Package to populate rfhub2 with robot framework keywords from libraries\n  and resource files.\n\nOptions:\n  -a, --app-url TEXT              Sp...</msg>
<status status="PASS" starttime="20201129 08:08:14.551" endtime="20201129 08:08:14.552"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:14.553" level="INFO">${clean_output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...  Package to populate rfhub2 with robot framework keywords from libraries and resource files.  Options: -a, --app-url TEXT              Specifies IP, URI or host ...</msg>
<status status="PASS" starttime="20201129 08:08:14.552" endtime="20201129 08:08:14.553"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = --no-installed-keywords" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.553" endtime="20201129 08:08:14.554"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.553" endtime="20201129 08:08:14.554"></status>
</kw>
<kw name="${pattern} = Flag specifying if package should skip" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.554" endtime="20201129 08:08:14.554"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.554" endtime="20201129 08:08:14.554"></status>
</kw>
<kw name="${pattern} = loading commonly installed libraries, such" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.555" endtime="20201129 08:08:14.555"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.555" endtime="20201129 08:08:14.555"></status>
</kw>
<kw name="${pattern} = as such as BuiltIn, Collections, DateTime" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.556" endtime="20201129 08:08:14.556"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.555" endtime="20201129 08:08:14.556"></status>
</kw>
<kw name="${pattern} = etc." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.556" endtime="20201129 08:08:14.557"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.556" endtime="20201129 08:08:14.557"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.553" endtime="20201129 08:08:14.557"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.550" endtime="20201129 08:08:14.557"></status>
</kw>
<doc>Documentation For No Installed Keywords Should Be Displayed Properly</doc>
<status status="PASS" starttime="20201129 08:08:14.549" endtime="20201129 08:08:14.557" critical="yes"></status>
</test>
<test id="s1-s1-t6" name="Documentation For Load Should Be Displayed Properly">
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>-m, --mode [keywords|statistics]</arg>
<arg>Choice parameter specifying what kind of</arg>
<arg>data package should add:</arg>
<arg>- `keywords` -</arg>
<arg>default value, application is working with</arg>
<arg>keywords documentation</arg>
<arg>- `statistics` -</arg>
<arg>application is working with data about</arg>
<arg>keywords execution.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:14.561" level="INFO">${ns} = {'output': 'Usage: rfhub2-cli [OPTIONS] [PATHS]...\n\n  Package to populate rfhub2 with robot framework keywords from libraries\n  and resource files.\n\nOptions:\n  -a, --app-url TEXT              Sp...</msg>
<status status="PASS" starttime="20201129 08:08:14.560" endtime="20201129 08:08:14.561"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:14.561" level="INFO">${clean_output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...  Package to populate rfhub2 with robot framework keywords from libraries and resource files.  Options: -a, --app-url TEXT              Specifies IP, URI or host ...</msg>
<status status="PASS" starttime="20201129 08:08:14.561" endtime="20201129 08:08:14.561"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = -m, --mode [keywords|statistics]" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.562" endtime="20201129 08:08:14.563"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.562" endtime="20201129 08:08:14.563"></status>
</kw>
<kw name="${pattern} = Choice parameter specifying what kind of" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.563" endtime="20201129 08:08:14.563"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.563" endtime="20201129 08:08:14.563"></status>
</kw>
<kw name="${pattern} = data package should add:" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.564" endtime="20201129 08:08:14.564"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.564" endtime="20201129 08:08:14.564"></status>
</kw>
<kw name="${pattern} = - `keywords` -" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.565" endtime="20201129 08:08:14.565"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.564" endtime="20201129 08:08:14.565"></status>
</kw>
<kw name="${pattern} = default value, application is working with" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.565" endtime="20201129 08:08:14.566"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.565" endtime="20201129 08:08:14.566"></status>
</kw>
<kw name="${pattern} = keywords documentation" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.566" endtime="20201129 08:08:14.567"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.566" endtime="20201129 08:08:14.567"></status>
</kw>
<kw name="${pattern} = - `statistics` -" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.568" endtime="20201129 08:08:14.568"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.568" endtime="20201129 08:08:14.568"></status>
</kw>
<kw name="${pattern} = application is working with data about" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.569" endtime="20201129 08:08:14.569"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.569" endtime="20201129 08:08:14.569"></status>
</kw>
<kw name="${pattern} = keywords execution." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.570" endtime="20201129 08:08:14.570"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.569" endtime="20201129 08:08:14.570"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.562" endtime="20201129 08:08:14.570"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.559" endtime="20201129 08:08:14.570"></status>
</kw>
<doc>Documentation For Mode Should Be Displayed Properly</doc>
<tags>
<tag>rfhub2-67</tag>
<tag>statistics</tag>
</tags>
<status status="PASS" starttime="20201129 08:08:14.558" endtime="20201129 08:08:14.571" critical="yes"></status>
</test>
<test id="s1-s1-t7" name="Documentation For Load Mode Should Be Displayed Properly">
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>-l, --load-mode [insert|append|update]</arg>
<arg>Choice parameter specifying in what load</arg>
<arg>mode package should run:</arg>
<arg>- `insert` -</arg>
<arg>default value, removes all existing</arg>
<arg>collections from app and add ones found in</arg>
<arg>paths</arg>
<arg>- `append`</arg>
<arg>- adds collections found</arg>
<arg>in paths without removal of existing ones</arg>
<arg>`update` - removes collections not found in</arg>
<arg>paths, adds new ones and updates existing</arg>
<arg>ones.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:14.574" level="INFO">${ns} = {'output': 'Usage: rfhub2-cli [OPTIONS] [PATHS]...\n\n  Package to populate rfhub2 with robot framework keywords from libraries\n  and resource files.\n\nOptions:\n  -a, --app-url TEXT              Sp...</msg>
<status status="PASS" starttime="20201129 08:08:14.573" endtime="20201129 08:08:14.574"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:14.575" level="INFO">${clean_output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...  Package to populate rfhub2 with robot framework keywords from libraries and resource files.  Options: -a, --app-url TEXT              Specifies IP, URI or host ...</msg>
<status status="PASS" starttime="20201129 08:08:14.574" endtime="20201129 08:08:14.575"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = -l, --load-mode [insert|append|update]" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.575" endtime="20201129 08:08:14.576"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.575" endtime="20201129 08:08:14.576"></status>
</kw>
<kw name="${pattern} = Choice parameter specifying in what load" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.576" endtime="20201129 08:08:14.577"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.576" endtime="20201129 08:08:14.577"></status>
</kw>
<kw name="${pattern} = mode package should run:" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.577" endtime="20201129 08:08:14.578"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.577" endtime="20201129 08:08:14.578"></status>
</kw>
<kw name="${pattern} = - `insert` -" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.578" endtime="20201129 08:08:14.579"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.578" endtime="20201129 08:08:14.579"></status>
</kw>
<kw name="${pattern} = default value, removes all existing" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.579" endtime="20201129 08:08:14.579"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.579" endtime="20201129 08:08:14.579"></status>
</kw>
<kw name="${pattern} = collections from app and add ones found in" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.580" endtime="20201129 08:08:14.580"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.580" endtime="20201129 08:08:14.580"></status>
</kw>
<kw name="${pattern} = paths" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.581" endtime="20201129 08:08:14.581"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.581" endtime="20201129 08:08:14.581"></status>
</kw>
<kw name="${pattern} = - `append`" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.582" endtime="20201129 08:08:14.582"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.581" endtime="20201129 08:08:14.582"></status>
</kw>
<kw name="${pattern} = - adds collections found" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.582" endtime="20201129 08:08:14.583"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.582" endtime="20201129 08:08:14.583"></status>
</kw>
<kw name="${pattern} = in paths without removal of existing ones" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.583" endtime="20201129 08:08:14.584"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.583" endtime="20201129 08:08:14.584"></status>
</kw>
<kw name="${pattern} = `update` - removes collections not found in" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.584" endtime="20201129 08:08:14.584"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.584" endtime="20201129 08:08:14.585"></status>
</kw>
<kw name="${pattern} = paths, adds new ones and updates existing" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.585" endtime="20201129 08:08:14.585"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.585" endtime="20201129 08:08:14.585"></status>
</kw>
<kw name="${pattern} = ones." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.586" endtime="20201129 08:08:14.586"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.585" endtime="20201129 08:08:14.586"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.575" endtime="20201129 08:08:14.586"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.572" endtime="20201129 08:08:14.586"></status>
</kw>
<doc>Documentation For Load Mode Should Be Displayed Properly</doc>
<tags>
<tag>rfhub2-64</tag>
<tag>update</tag>
</tags>
<status status="PASS" starttime="20201129 08:08:14.571" endtime="20201129 08:08:14.587" critical="yes"></status>
</test>
<test id="s1-s1-t8" name="Documentation For Help Should Be Displayed Properly">
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>--help</arg>
<arg>Show this message and exit.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:14.590" level="INFO">${ns} = {'output': 'Usage: rfhub2-cli [OPTIONS] [PATHS]...\n\n  Package to populate rfhub2 with robot framework keywords from libraries\n  and resource files.\n\nOptions:\n  -a, --app-url TEXT              Sp...</msg>
<status status="PASS" starttime="20201129 08:08:14.589" endtime="20201129 08:08:14.590"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:14.591" level="INFO">${clean_output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...  Package to populate rfhub2 with robot framework keywords from libraries and resource files.  Options: -a, --app-url TEXT              Specifies IP, URI or host ...</msg>
<status status="PASS" starttime="20201129 08:08:14.590" endtime="20201129 08:08:14.591"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = --help" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.591" endtime="20201129 08:08:14.592"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.591" endtime="20201129 08:08:14.592"></status>
</kw>
<kw name="${pattern} = Show this message and exit." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:14.592" endtime="20201129 08:08:14.592"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.592" endtime="20201129 08:08:14.593"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.591" endtime="20201129 08:08:14.593"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.589" endtime="20201129 08:08:14.593"></status>
</kw>
<doc>Documentation For Help Should Be Displayed Properly</doc>
<status status="PASS" starttime="20201129 08:08:14.587" endtime="20201129 08:08:14.593" critical="yes"></status>
</test>
<status status="PASS" starttime="20201129 08:08:12.777" endtime="20201129 08:08:14.594"></status>
</suite>
<suite id="s1-s2" name="Cli Population" source="C:\repo\rfhub2\tests\acceptance\cli_population.robot">
<test id="s1-s2-t1" name="Cli Should Populate App With Keywords From Provided Paths Only">
<kw name="Run Cli Package Without Installed Keywords" library="keywords">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--no-installed-keywords ${INITIAL_FIXTURES}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:08:14.763" level="INFO">Running command ' rfhub2-cli --no-installed-keywords C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures/initial/ 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:08:18.224" level="INFO">${output} = usage: script_for_system_exit [-h] -c CONF
script_for_system_exit: error: the following arguments are required: -c/--conf
Failed to create collection from path C:\repo\rfhub2\tests\acceptance\resource...</msg>
<status status="PASS" starttime="20201129 08:08:14.620" endtime="20201129 08:08:18.224"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:08:18.225" level="INFO">${output} = usage: script_for_system_exit [-h] -c CONF
script_for_system_exit: error: the following arguments are required: -c/--conf
Failed to create collection from path C:\repo\rfhub2\tests\acceptance\resource...</msg>
<status status="PASS" starttime="20201129 08:08:18.224" endtime="20201129 08:08:18.225"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.619" endtime="20201129 08:08:18.225"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:14.618" endtime="20201129 08:08:18.225"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>LibWithInit library with 4 keywords loaded.</arg>
<arg>Test Libdoc File library with 1 keywords loaded.</arg>
<arg>LibWithEmptyInit1 library with 2 keywords loaded.</arg>
<arg>test_resource library with 2 keywords loaded.</arg>
<arg>SingleClassLib library with 3 keywords loaded.</arg>
<arg>LibWithEmptyInit2 library with 2 keywords loaded.</arg>
<arg>test_robot library with 4 keywords loaded.</arg>
<arg>test_res_lib_dir library with 2 keywords loaded.</arg>
<arg>Successfully loaded 8 collections with 20 keywords.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:18.227" level="INFO">${ns} = {'output': 'usage: script_for_system_exit [-h] -c CONF\nscript_for_system_exit: error: the following arguments are required: -c/--conf\nFailed to create collection from path C:\\repo\\rfhub2\\tests\\a...</msg>
<status status="PASS" starttime="20201129 08:08:18.226" endtime="20201129 08:08:18.227"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:18.228" level="INFO">${clean_output} = usage: script_for_system_exit [-h] -c CONF script_for_system_exit: error: the following arguments are required: -c/--conf Failed to create collection from path C:\repo\rfhub2\tests\acceptance\resource...</msg>
<status status="PASS" starttime="20201129 08:08:18.227" endtime="20201129 08:08:18.228"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = LibWithInit library with 4 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:18.229" endtime="20201129 08:08:18.229"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.228" endtime="20201129 08:08:18.229"></status>
</kw>
<kw name="${pattern} = Test Libdoc File library with 1 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:18.229" endtime="20201129 08:08:18.230"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.229" endtime="20201129 08:08:18.230"></status>
</kw>
<kw name="${pattern} = LibWithEmptyInit1 library with 2 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:18.230" endtime="20201129 08:08:18.231"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.230" endtime="20201129 08:08:18.231"></status>
</kw>
<kw name="${pattern} = test_resource library with 2 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:18.231" endtime="20201129 08:08:18.231"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.231" endtime="20201129 08:08:18.232"></status>
</kw>
<kw name="${pattern} = SingleClassLib library with 3 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:18.232" endtime="20201129 08:08:18.232"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.232" endtime="20201129 08:08:18.232"></status>
</kw>
<kw name="${pattern} = LibWithEmptyInit2 library with 2 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:18.233" endtime="20201129 08:08:18.233"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.232" endtime="20201129 08:08:18.233"></status>
</kw>
<kw name="${pattern} = test_robot library with 4 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:18.234" endtime="20201129 08:08:18.234"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.233" endtime="20201129 08:08:18.234"></status>
</kw>
<kw name="${pattern} = test_res_lib_dir library with 2 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:18.234" endtime="20201129 08:08:18.235"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.234" endtime="20201129 08:08:18.235"></status>
</kw>
<kw name="${pattern} = Successfully loaded 8 collections with 20 keywords." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:18.235" endtime="20201129 08:08:18.236"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.235" endtime="20201129 08:08:18.236"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.228" endtime="20201129 08:08:18.236"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.226" endtime="20201129 08:08:18.236"></status>
</kw>
<kw name="Api Should Have With 8 Collections And 20 Keywords">
<kw name="collections Endpoint Should Have ${n} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:08:18.238" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:08:18.238" endtime="20201129 08:08:18.239"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:08:19.282" level="INFO">GET Request : url=http://localhost:8000/api/v1/collections/ 
 path_url=/api/v1/collections/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:08:19.282" level="INFO">GET Response : url=http://localhost:8000/api/v1/collections/ 
 status=200, reason=OK 
 body=[{"name":"LibWithEmptyInit1","type":"LIBRARY","version":"2.1.0","scope":"TEST","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\LibsWithEmptyInit\\LibWithEmptyInit1.py","doc":"Overview that should be imported for LibWithEmptyInit1.","doc_format":"ROBOT","id":1,"keywords":[{"name":"Lib With Empty Init 1 Method 1","doc":"Docstring for lib_with_empty_init_1_method_1","args":"","tags":[],"id":1,"synopsis":"Docstring for lib_with_empty_init_1_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_1_method_1&lt;/p&gt;","arg_string":""},{"name":"Lib With Empty Init 1 Method 2","doc":"Docstring for lib_with_empty_init_1_method_2","args":"","tags":[],"id":2,"synopsis":"Docstring for lib_with_empty_init_1_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_1_method_2&lt;/p&gt;","arg_string":""}],"synopsis":"Overview that should be imported for LibWithEmptyInit1.","html_doc":"&lt;p&gt;Overview that should be imported for LibWithEmptyInit1.&lt;/p&gt;"},{"name":"LibWithEmptyInit2","type":"LIBRARY","version":"1.0.0","scope":"TEST","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\LibsWithEmptyInit\\LibWithEmptyInit2.py","doc":"Overview that should be imported for LibWithEmptyInit2.","doc_format":"ROBOT","id":2,"keywords":[{"name":"Lib With Empty Init 2 Method 1","doc":"Docstring for lib_with_empty_init_2_method_1","args":"","tags":[],"id":3,"synopsis":"Docstring for lib_with_empty_init_2_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_2_method_1&lt;/p&gt;","arg_string":""},{"name":"Lib With Empty Init 2 Method 2","doc":"Docstring for lib_with_empty_init_2_method_2","args":"","tags":[],"id":4,"synopsis":"Docstring for lib_with_empty_init_2_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_2_method_2&lt;/p&gt;","arg_string":""}],"synopsis":"Overview that should be imported for LibWithEmptyInit2.","html_doc":"&lt;p&gt;Overview that should be imported for LibWithEmptyInit2.&lt;/p&gt;"},{"name":"LibWithInit","type":"LIBRARY","version":"6.6.6","scope":"GLOBAL","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\LibWithInit","doc":"This is a docstring that should be imported as overview\n\nHere goes some docs that should appear on rfhub2 if init is parametrised\n\nThe library import:\n\nExamples:\n| Library    LibWithInit   dummy=../one               # add one dummy\n| Library    LibWithInit   path=../one,/global        # add two dummies","doc_format":"ROBOT","id":3,"keywords":[{"name":"Lib With Init 1 Method 1","doc":"Docstring for lib_with_init_1_method_1","args":"","tags":[],"id":5,"synopsis":"Docstring for lib_with_init_1_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_init_1_method_1&lt;/p&gt;","arg_string":""},{"name":"Lib With Init 1 Method 2","doc":"Docstring for lib_with_init_1_method_2","args":"","tags":[],"id":6,"synopsis":"Docstring for lib_with_init_1_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_init_1_method_2&lt;/p&gt;","arg_string":""},{"name":"Lib With Init 2 Method 1","doc":"Docstring for lib_with_init_2_method_1","args":"","tags":[],"id":7,"synopsis":"Docstring for lib_with_init_2_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_init_2_method_1&lt;/p&gt;","arg_string":""},{"name":"Lib With Init 2 Method 2","doc":"Docstring for lib_with_init_2_method_2","args":"","tags":[],"id":8,"synopsis":"Docstring for lib_with_init_2_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_init_2_method_2&lt;/p&gt;","arg_string":""}],"synopsis":"This is a docstring that should be imported as overview","html_doc":"&lt;p&gt;This is a docstring that should be imported as overview&lt;/p&gt;\n&lt;p&gt;Here goes some docs that should appear on rfhub2 if init is parametrised&lt;/p&gt;\n&lt;p&gt;The library import:&lt;/p&gt;\n&lt;p&gt;Examples:&lt;/p&gt;\n&lt;pre&gt;\nLibrary    LibWithInit   dummy=../one               # add one dummy\nLibrary    LibWithInit   path=../one,/global        # add two dummies\n&lt;/pre&gt;"},{"name":"SingleClassLib","type":"LIBRARY","version":"1.2.3","scope":"TEST","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\SingleClassLib\\SingleClassLib.py","doc":"Overview that should be imported for SingleClassLib.","doc_format":"ROBOT","id":4,"keywords":[{"name":"Single Class Lib Method 1","doc":"Docstring for single_class_lib_method_1","args":"","tags":["tag_1","tag_2"],"id":9,"synopsis":"Docstring for single_class_lib_method_1","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_1&lt;/p&gt;","arg_string":""},{"name":"Single Class Lib Method 2","doc":"Docstring for single_class_lib_method_2","args":"","tags":[],"id":10,"synopsis":"Docstring for single_class_lib_method_2","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_2&lt;/p&gt;","arg_string":""},{"name":"Single Class Lib Method 3","doc":"Docstring for single_class_lib_method_3 with two params","args":"[\"param_1\", \"param_2\"]","tags":[],"id":11,"synopsis":"Docstring for single_class_lib_method_3 with two params","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_3 with two params&lt;/p&gt;","arg_string":"param_1, param_2"}],"synopsis":"Overview that should be imported for SingleClassLib.","html_doc":"&lt;p&gt;Overview that should be imported for SingleClassLib.&lt;/p&gt;"},{"name":"Test Libdoc File","type":"LIBRARY","version":"3.2.0","scope":"GLOBAL","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\test_libdoc_file.xml","doc":"Documentation for library ``Test Libdoc File``.","doc_format":"ROBOT","id":5,"keywords":[{"name":"Someone Shall Pass","doc":"","args":"[\"who\"]","tags":[],"id":12,"synopsis":"","html_doc":"","arg_string":"who"}],"synopsis":"Documentation for library ``Test Libdoc File``.","html_doc":"&lt;p&gt;Documentation for library &lt;code&gt;Test Libdoc File&lt;/code&gt;.&lt;/p&gt;"},{"name":"test_res_lib_dir","type":"RESOURCE","version":"","scope":"GLOBAL","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\LibWithInit\\test_res_lib_dir.resource","doc":"File with .resource extension with two test keywords","doc_format":"ROBOT","id":6,"keywords":[{"name":"Keyword 1 Imported From Resource From Lib Dir File","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"","tags":[],"id":13,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":""},{"name":"Keyword 2 Imported From Resource From Lib Dir File","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"[\"arg_1\", \"arg_2\"]","tags":[],"id":14,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":"arg_1, arg_2"}],"synopsis":"File with .resource extension with two test keywords","html_doc":"&lt;p&gt;File with .resource extension with two test keywords&lt;/p&gt;"},{"name":"test_resource","type":"RESOURCE","version":"","scope":"GLOBAL","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\test_resource.resource","doc":"File with .resource extension with two test keywords","doc_format":"ROBOT","id":7,"keywords":[{"name":"Keyword 1 Imported From Resource File","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"","tags":["first_tag"],"id":15,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":""},{"name":"Keyword 2 Imported From Resource File","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"[\"arg_1\", \"arg_2\"]","tags":["first_tag","second_tag"],"id":16,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":"arg_1, arg_2"}],"synopsis":"File with .resource extension with two test keywords","html_doc":"&lt;p&gt;File with .resource extension with two test keywords&lt;/p&gt;"},{"name":"test_robot","type":"RESOURCE","version":"","scope":"GLOBAL","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\test_robot.robot","doc":"File with .robot extension with two test keywords","doc_format":"ROBOT","id":8,"keywords":[{"name":"Keyword 1 Imported From Robot File","doc":"This keyword was imported from file\nwith .robot extension","args":"","tags":["first_tag","second_tag"],"id":17,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .robot extension&lt;/p&gt;","arg_string":""},{"name":"Keyword 2 Imported From Robot File","doc":"This keyword was imported from file\nwith .robot extension","args":"[\"arg_1\", \"arg_2\"]","tags":["first_tag","second_tag","third_tag"],"id":18,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .robot extension&lt;/p&gt;","arg_string":"arg_1, arg_2"},{"name":"Keyword With Args With Double Quotation Mark","doc":"Keyword With Args With Double Quotation Mark","args":"[\"ok_argument\", \"not_ok_argument=Kill.${app.replace(-, _)}\"]","tags":["fifth_tag","fouth_tag"],"id":19,"synopsis":"Keyword With Args With Double Quotation Mark","html_doc":"&lt;p&gt;Keyword With Args With Double Quotation Mark&lt;/p&gt;","arg_string":"ok_argument, not_ok_argument=Kill.${app.replace(-, _)}"},{"name":"Keyword With Args With Single Quotation Mark","doc":"Keyword With Args With Single Quotation Mark","args":"[\"ok_argument\", \"not_ok_argument=Kill.${app.replace(-, _)}\"]","tags":["fouth_tag","third_tag"],"id":20,"synopsis":"Keyword With Args With Single Quotation Mark","html_doc":"&lt;p&gt;Keyword With Args With Single Quotation Mark&lt;/p&gt;","arg_string":"ok_argument, not_ok_argument=Kill.${app.replace(-, _)}"}],"synopsis":"File with .robot extension with two test ke... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20201129 08:08:19.283" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:08:18.239" endtime="20201129 08:08:19.283"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:08:19.284" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:08:19.283" endtime="20201129 08:08:19.285"></status>
</kw>
<msg timestamp="20201129 08:08:19.285" level="INFO">${response} = [{'name': 'LibWithEmptyInit1', 'type': 'LIBRARY', 'version': '2.1.0', 'scope': 'TEST', 'named_args': None, 'path': 'C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\LibsWithE...</msg>
<status status="PASS" starttime="20201129 08:08:18.237" endtime="20201129 08:08:19.286"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:08:19.286" level="INFO">Length is 8</msg>
<status status="PASS" starttime="20201129 08:08:19.286" endtime="20201129 08:08:19.286"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.237" endtime="20201129 08:08:19.286"></status>
</kw>
<kw name="keywords Endpoint Should Have ${m} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:08:19.288" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:08:19.288" endtime="20201129 08:08:19.288"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:08:20.347" level="INFO">GET Request : url=http://localhost:8000/api/v1/keywords/ 
 path_url=/api/v1/keywords/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:08:20.347" level="INFO">GET Response : url=http://localhost:8000/api/v1/keywords/ 
 status=200, reason=OK 
 body=[{"name":"Keyword 1 Imported From Resource File","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"","tags":["first_tag"],"id":15,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":"","collection":{"id":7,"name":"test_resource"}},{"name":"Keyword 1 Imported From Resource From Lib Dir File","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"","tags":[],"id":13,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":"","collection":{"id":6,"name":"test_res_lib_dir"}},{"name":"Keyword 1 Imported From Robot File","doc":"This keyword was imported from file\nwith .robot extension","args":"","tags":["first_tag","second_tag"],"id":17,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .robot extension&lt;/p&gt;","arg_string":"","collection":{"id":8,"name":"test_robot"}},{"name":"Keyword 2 Imported From Resource File","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"[\"arg_1\", \"arg_2\"]","tags":["first_tag","second_tag"],"id":16,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":"arg_1, arg_2","collection":{"id":7,"name":"test_resource"}},{"name":"Keyword 2 Imported From Resource From Lib Dir File","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"[\"arg_1\", \"arg_2\"]","tags":[],"id":14,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":"arg_1, arg_2","collection":{"id":6,"name":"test_res_lib_dir"}},{"name":"Keyword 2 Imported From Robot File","doc":"This keyword was imported from file\nwith .robot extension","args":"[\"arg_1\", \"arg_2\"]","tags":["first_tag","second_tag","third_tag"],"id":18,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .robot extension&lt;/p&gt;","arg_string":"arg_1, arg_2","collection":{"id":8,"name":"test_robot"}},{"name":"Keyword With Args With Double Quotation Mark","doc":"Keyword With Args With Double Quotation Mark","args":"[\"ok_argument\", \"not_ok_argument=Kill.${app.replace(-, _)}\"]","tags":["fifth_tag","fouth_tag"],"id":19,"synopsis":"Keyword With Args With Double Quotation Mark","html_doc":"&lt;p&gt;Keyword With Args With Double Quotation Mark&lt;/p&gt;","arg_string":"ok_argument, not_ok_argument=Kill.${app.replace(-, _)}","collection":{"id":8,"name":"test_robot"}},{"name":"Keyword With Args With Single Quotation Mark","doc":"Keyword With Args With Single Quotation Mark","args":"[\"ok_argument\", \"not_ok_argument=Kill.${app.replace(-, _)}\"]","tags":["fouth_tag","third_tag"],"id":20,"synopsis":"Keyword With Args With Single Quotation Mark","html_doc":"&lt;p&gt;Keyword With Args With Single Quotation Mark&lt;/p&gt;","arg_string":"ok_argument, not_ok_argument=Kill.${app.replace(-, _)}","collection":{"id":8,"name":"test_robot"}},{"name":"Lib With Empty Init 1 Method 1","doc":"Docstring for lib_with_empty_init_1_method_1","args":"","tags":[],"id":1,"synopsis":"Docstring for lib_with_empty_init_1_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_1_method_1&lt;/p&gt;","arg_string":"","collection":{"id":1,"name":"LibWithEmptyInit1"}},{"name":"Lib With Empty Init 1 Method 2","doc":"Docstring for lib_with_empty_init_1_method_2","args":"","tags":[],"id":2,"synopsis":"Docstring for lib_with_empty_init_1_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_1_method_2&lt;/p&gt;","arg_string":"","collection":{"id":1,"name":"LibWithEmptyInit1"}},{"name":"Lib With Empty Init 2 Method 1","doc":"Docstring for lib_with_empty_init_2_method_1","args":"","tags":[],"id":3,"synopsis":"Docstring for lib_with_empty_init_2_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_2_method_1&lt;/p&gt;","arg_string":"","collection":{"id":2,"name":"LibWithEmptyInit2"}},{"name":"Lib With Empty Init 2 Method 2","doc":"Docstring for lib_with_empty_init_2_method_2","args":"","tags":[],"id":4,"synopsis":"Docstring for lib_with_empty_init_2_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_2_method_2&lt;/p&gt;","arg_string":"","collection":{"id":2,"name":"LibWithEmptyInit2"}},{"name":"Lib With Init 1 Method 1","doc":"Docstring for lib_with_init_1_method_1","args":"","tags":[],"id":5,"synopsis":"Docstring for lib_with_init_1_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_init_1_method_1&lt;/p&gt;","arg_string":"","collection":{"id":3,"name":"LibWithInit"}},{"name":"Lib With Init 1 Method 2","doc":"Docstring for lib_with_init_1_method_2","args":"","tags":[],"id":6,"synopsis":"Docstring for lib_with_init_1_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_init_1_method_2&lt;/p&gt;","arg_string":"","collection":{"id":3,"name":"LibWithInit"}},{"name":"Lib With Init 2 Method 1","doc":"Docstring for lib_with_init_2_method_1","args":"","tags":[],"id":7,"synopsis":"Docstring for lib_with_init_2_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_init_2_method_1&lt;/p&gt;","arg_string":"","collection":{"id":3,"name":"LibWithInit"}},{"name":"Lib With Init 2 Method 2","doc":"Docstring for lib_with_init_2_method_2","args":"","tags":[],"id":8,"synopsis":"Docstring for lib_with_init_2_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_init_2_method_2&lt;/p&gt;","arg_string":"","collection":{"id":3,"name":"LibWithInit"}},{"name":"Single Class Lib Method 1","doc":"Docstring for single_class_lib_method_1","args":"","tags":["tag_1","tag_2"],"id":9,"synopsis":"Docstring for single_class_lib_method_1","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_1&lt;/p&gt;","arg_string":"","collection":{"id":4,"name":"SingleClassLib"}},{"name":"Single Class Lib Method 2","doc":"Docstring for single_class_lib_method_2","args":"","tags":[],"id":10,"synopsis":"Docstring for single_class_lib_method_2","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_2&lt;/p&gt;","arg_string":"","collection":{"id":4,"name":"SingleClassLib"}},{"name":"Single Class Lib Method 3","doc":"Docstring for single_class_lib_method_3 with two params","args":"[\"param_1\", \"param_2\"]","tags":[],"id":11,"synopsis":"Docstring for single_class_lib_method_3 with two params","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_3 with two params&lt;/p&gt;","arg_string":"param_1, param_2","collection":{"id":4,"name":"SingleClassLib"}},{"name":"Someone Shall Pass","doc":"","args":"[\"who\"]","tags":[],"id":12,"synopsis":"","html_doc":"","arg_string":"who","collection":{"id":5,"name":"Test Libdoc File"}}] 
 </msg>
<msg timestamp="20201129 08:08:20.348" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:08:19.289" endtime="20201129 08:08:20.348"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:08:20.349" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:08:20.348" endtime="20201129 08:08:20.349"></status>
</kw>
<msg timestamp="20201129 08:08:20.349" level="INFO">${response} = [{'name': 'Keyword 1 Imported From Resource File', 'doc': 'This keyword was imported from file\nwith .resource extension, available since RFWK 3.1', 'args': '', 'tags': ['first_tag'], 'id': 15, 'synop...</msg>
<status status="PASS" starttime="20201129 08:08:19.287" endtime="20201129 08:08:20.350"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:08:20.350" level="INFO">Length is 20</msg>
<status status="PASS" starttime="20201129 08:08:20.350" endtime="20201129 08:08:20.350"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:19.287" endtime="20201129 08:08:20.350"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:18.236" endtime="20201129 08:08:20.351"></status>
</kw>
<doc>Cli Should Populate App With Keywords From Provided Paths Only</doc>
<tags>
<tag>rfhub2-153</tag>
</tags>
<status status="PASS" starttime="20201129 08:08:14.617" endtime="20201129 08:08:20.351" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="Cli Should Populate App With Installed Keywords">
<kw name="Run Cli Package" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the default options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:08:20.508" level="INFO">Running command ' rfhub2-cli 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:08:31.567" level="INFO">${output} = BuiltIn library with 105 keywords loaded.
Collections library with 43 keywords loaded.
DateTime library with 8 keywords loaded.
Easter library with 1 keywords loaded.
OperatingSystem library with 56 k...</msg>
<status status="PASS" starttime="20201129 08:08:20.353" endtime="20201129 08:08:31.567"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:08:31.568" level="INFO">${output} = BuiltIn library with 105 keywords loaded.
Collections library with 43 keywords loaded.
DateTime library with 8 keywords loaded.
Easter library with 1 keywords loaded.
OperatingSystem library with 56 k...</msg>
<status status="PASS" starttime="20201129 08:08:31.567" endtime="20201129 08:08:31.568"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:20.353" endtime="20201129 08:08:31.568"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Collections library with 43 keywords loaded.</arg>
<arg>XML library with 37 keywords loaded.</arg>
<arg>Easter library with 1 keywords loaded.</arg>
<arg>Process library with 15 keywords loaded.</arg>
<arg>String library with 32 keywords loaded.</arg>
<arg>DateTime library with 8 keywords loaded.</arg>
<arg>OperatingSystem library with 56 keywords loaded.</arg>
<arg>Screenshot library with 3 keywords loaded.</arg>
<arg>BuiltIn library with 105 keywords loaded.</arg>
<arg>Telnet library with 20 keywords loaded.</arg>
<arg>Successfully loaded 10 collections with 320 keywords.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:31.570" level="INFO">${ns} = {'output': 'BuiltIn library with 105 keywords loaded.\nCollections library with 43 keywords loaded.\nDateTime library with 8 keywords loaded.\nEaster library with 1 keywords loaded.\nOperatingSystem l...</msg>
<status status="PASS" starttime="20201129 08:08:31.569" endtime="20201129 08:08:31.570"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:31.571" level="INFO">${clean_output} = BuiltIn library with 105 keywords loaded. Collections library with 43 keywords loaded. DateTime library with 8 keywords loaded. Easter library with 1 keywords loaded. OperatingSystem library with 56 k...</msg>
<status status="PASS" starttime="20201129 08:08:31.570" endtime="20201129 08:08:31.571"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Collections library with 43 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.571" endtime="20201129 08:08:31.572"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.571" endtime="20201129 08:08:31.572"></status>
</kw>
<kw name="${pattern} = XML library with 37 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.572" endtime="20201129 08:08:31.572"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.572" endtime="20201129 08:08:31.573"></status>
</kw>
<kw name="${pattern} = Easter library with 1 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.573" endtime="20201129 08:08:31.573"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.573" endtime="20201129 08:08:31.573"></status>
</kw>
<kw name="${pattern} = Process library with 15 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.574" endtime="20201129 08:08:31.574"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.573" endtime="20201129 08:08:31.574"></status>
</kw>
<kw name="${pattern} = String library with 32 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.575" endtime="20201129 08:08:31.575"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.574" endtime="20201129 08:08:31.575"></status>
</kw>
<kw name="${pattern} = DateTime library with 8 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.575" endtime="20201129 08:08:31.576"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.575" endtime="20201129 08:08:31.576"></status>
</kw>
<kw name="${pattern} = OperatingSystem library with 56 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.576" endtime="20201129 08:08:31.577"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.576" endtime="20201129 08:08:31.577"></status>
</kw>
<kw name="${pattern} = Screenshot library with 3 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.577" endtime="20201129 08:08:31.588"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.577" endtime="20201129 08:08:31.589"></status>
</kw>
<kw name="${pattern} = BuiltIn library with 105 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.589" endtime="20201129 08:08:31.589"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.589" endtime="20201129 08:08:31.589"></status>
</kw>
<kw name="${pattern} = Telnet library with 20 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.590" endtime="20201129 08:08:31.590"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.590" endtime="20201129 08:08:31.590"></status>
</kw>
<kw name="${pattern} = Successfully loaded 10 collections with 320 keywords." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:31.591" endtime="20201129 08:08:31.591"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.590" endtime="20201129 08:08:31.591"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.571" endtime="20201129 08:08:31.591"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.568" endtime="20201129 08:08:31.591"></status>
</kw>
<kw name="Api Should Have With 10 Collections And 100 Keywords">
<kw name="collections Endpoint Should Have ${n} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:08:31.594" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:08:31.593" endtime="20201129 08:08:31.594"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:08:32.921" level="INFO">GET Request : url=http://localhost:8000/api/v1/collections/ 
 path_url=/api/v1/collections/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:08:38.274" level="INFO">GET Response : url=http://localhost:8000/api/v1/collections/ 
 status=200, reason=OK 
 body=[{"name":"BuiltIn","type":"LIBRARY","version":"3.2.2","scope":"GLOBAL","named_args":null,"path":"c:\\program files (x86)\\python36-32\\lib\\site-packages\\robot\\libraries\\BuiltIn.py","doc":"An always available standard library with often needed keywords.\n\n``BuiltIn`` is Robot Framework's standard library that provides a set\nof generic keywords needed often. It is imported automatically and\nthus always available. The provided keywords can be used, for example,\nfor verifications (e.g. `Should Be Equal`, `Should Contain`),\nconversions (e.g. `Convert To Integer`) and for various other purposes\n(e.g. `Log`, `Sleep`, `Run Keyword If`, `Set Global Variable`).\n\n== Table of contents ==\n\n- `HTML error messages`\n- `Evaluating expressions`\n- `Boolean arguments`\n- `Pattern matching`\n- `Multiline string comparison`\n- `String representations`\n- `Shortcuts`\n- `Keywords`\n\n= HTML error messages =\n\nMany of the keywords accept an optional error message to use if the keyword\nfails, and it is possible to use HTML in these messages by prefixing them\nwith ``*HTML*``. See `Fail` keyword for a usage example. Notice that using\nHTML in messages is not limited to BuiltIn library but works with any\nerror message.\n\n= Evaluating expressions =\n\nMany keywords, such as `Evaluate`, `Run Keyword If` and `Should Be True`,\naccept an expression that is evaluated in Python.\n\n== Evaluation namespace ==\n\nExpressions are evaluated using Python's\n[http://docs.python.org/library/functions.html#eval|eval] function so\nthat all Python built-ins like ``len()`` and ``int()`` are available.\nIn addition to that, all unrecognized variables are considered to be\nmodules that are automatically imported. It is possible to use all\navailable Python modules, including the standard modules and the installed\nthird party modules.\n\nExamples:\n| `Should Be True`   | len('${result}') &gt; 3 |\n| `Run Keyword If`   | os.sep == '/'        | Non-Windows Keyword  |\n| ${robot version} = | `Evaluate`           | robot.__version__    |\n\n`Evaluate` also allows configuring the execution namespace with a custom\nnamespace and with custom modules to be imported. The latter functionality\nis useful when using nested modules like ``rootmod.submod`` that are\nimplemented so that the root module does not automatically import sub\nmodules. Otherwise the automatic module import mechanism described earlier\nis enough to get the needed modules imported.\n\n*NOTE:* Automatic module import is a new feature in Robot Framework 3.2.\nEarlier modules needed to be explicitly taken into use when using the\n`Evaluate` keyword and other keywords only had access to ``sys`` and\n``os`` modules.\n\n== Using variables ==\n\nWhen a variable is used in the expressing using the normal ``${variable}``\nsyntax, its value is replaced before the expression is evaluated. This\nmeans that the value used in the expression will be the string\nrepresentation of the variable value, not the variable value itself.\nThis is not a problem with numbers and other objects that have a string\nrepresentation that can be evaluated directly, but with other objects\nthe behavior depends on the string representation. Most importantly,\nstrings must always be quoted, and if they can contain newlines, they must\nbe triple quoted.\n\nExamples:\n| `Should Be True` | ${rc} &lt; 10                | Return code greater than 10 |\n| `Run Keyword If` | '${status}' == 'PASS'     | Log | Passed                |\n| `Run Keyword If` | 'FAIL' in '''${output}''' | Log | Output contains FAIL  |\n\nActual variables values are also available in the evaluation namespace.\nThey can be accessed using special variable syntax without the curly\nbraces like ``$variable``. These variables should never be quoted.\n\nExamples:\n| `Should Be True` | $rc &lt; 10          | Return code greater than 10  |\n| `Run Keyword If` | $status == 'PASS' | `Log` | Passed               |\n| `Run Keyword If` | 'FAIL' in $output | `Log` | Output contains FAIL |\n| `Should Be True` | len($result) &gt; 1 and $result[1] == 'OK' |\n| `Should Be True` | $result is not None                     |\n\nUsing the ``$variable`` syntax slows down expression evaluation a little.\nThis should not typically matter, but should be taken into account if\ncomplex expressions are evaluated often and there are strict time\nconstrains.\n\nNotice that instead of creating complicated expressions, it is often better\nto move the logic into a test library. That eases maintenance and can also\nenhance execution speed.\n\n= Boolean arguments =\n\nSome keywords accept arguments that are handled as Boolean values true or\nfalse. If such an argument is given as a string, it is considered false if\nit is an empty string or equal to ``FALSE``, ``NONE``, ``NO``, ``OFF`` or\n``0``, case-insensitively. Keywords verifying something that allow dropping\nactual and expected values from the possible error message also consider\nstring ``no values`` to be false. Other strings are considered true unless\nthe keyword documentation explicitly states otherwise, and other argument\ntypes are tested using the same\n[http://docs.python.org/library/stdtypes.html#truth|rules as in Python].\n\nTrue examples:\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=True    | # Strings are generally true.    |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=yes     | # Same as the above.             |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=${TRUE} | # Python ``True`` is true.       |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=${42}   | # Numbers other than 0 are true. |\n\nFalse examples:\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=False     | # String ``false`` is false.   |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=no        | # Also string ``no`` is false. |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=${EMPTY}  | # Empty string is false.       |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=${FALSE}  | # Python ``False`` is false.   |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=no values | # ``no values`` works with ``values`` argument |\n\nConsidering string ``NONE`` false is new in Robot Framework 3.0.3 and\nconsidering also ``OFF`` and ``0`` false is new in Robot Framework 3.1.\n\n= Pattern matching =\n\nMany keywords accepts arguments as either glob or regular expression\npatterns.\n\n== Glob patterns ==\n\nSome keywords, for example `Should Match`, support so called\n[http://en.wikipedia.org/wiki/Glob_(programming)|glob patterns] where:\n\n| ``*``        | matches any string, even an empty string                |\n| ``?``        | matches any single character                            |\n| ``[chars]``  | matches one character in the bracket                    |\n| ``[!chars]`` | matches one character not in the bracket                |\n| ``[a-z]``    | matches one character from the range in the bracket     |\n| ``[!a-z]``   | matches one character not from the range in the bracket |\n\nUnlike with glob patterns normally, path separator characters ``/`` and\n``\\`` and the newline character ``\\n`` are matches by the above\nwildcards.\n\nSupport for brackets like ``[abc]`` and ``[!a-z]`` is new in\nRobot Framework 3.1.\n\n== Regular expressions ==\n\nSome keywords, for example `Should Match Regexp`, support\n[http://en.wikipedia.org/wiki/Regular_expression|regular expressions]\nthat are more powerful but also more complicated that glob patterns.\nThe regular expression support is implemented using Python's\n[http://docs.python.org/library/re.html|re module] and its documentation\nshould be consulted for more information about the syntax.\n\nBecause the backslash character (``\\``) is an escape character in\nRobot Framework test data, possible backslash characters in regular\nexpressions need to be escaped with another backslash like ``\\\\d\\\\w+``.\nStrings that may contain special characters but should be handled\nas literal strings, can be escaped with the `Regexp Escape` keyword.\n\n= Multiline string comparison =\n\n`Should Be Equal` and `Should Be Equal As Strings` report the failures using\n[http://en.wikipedia.org/wiki/Diff_utility#Unified_format|unified diff\nformat] if both strings have more than two lines.\n\nExample:\n| ${first} =  | `Catenate` | SEPARATOR=\\n | Not in second | Same | Differs | Same |\n| ${second} = | `Catenate` | SEPARATOR=\\n | Same | Differs2 | Same | Not in first |\n| `Should Be Equal` | ${first} | ${second} |\n\nResults in the following error message:\n\n| Multiline strings are different:\n| --- first\n| +++ second\n| @@ -1,4 +1,4 @@\n| -Not in second\n|  Same\n| -Differs\n| +Differs2\n|  Same\n| +Not in first\n\n= String representations =\n\nSeveral keywords log values explicitly (e.g. `Log`) or implicitly (e.g.\n`Should Be Equal` when there are failures). By default keywords log values\nusing \"human readable\" string representation, which means that strings\nlike ``Hello`` and numbers like ``42`` are logged as-is. Most of the time\nthis is the desired behavior, but there are some problems as well:\n\n- It is not possible to see difference between different objects that\n  have same string representation like string ``42`` and integer ``42``.\n  `Should Be Equal` and some other keywords add the type information to\n  the error message in these cases, though.\n\n- Non-printable characters such as the null byte are not visible.\n\n- Trailing whitespace is not visible.\n\n- Different newlines (``\\r\\n`` on Windows, ``\\n`` elsewhere) cannot\n  be separated from each others.\n\n- There are several Unicode characters that are different but look the\n  same. One example is the Latin ``a`` (``\\u0061``) and the Cyrillic\n  ``а`` (``\\u0430``). Error messages like ``a != а`` are\n  not very helpful.\n\n- Some Unicode characters can be represented using\n  [https://en.wikipedia.org/wiki/Unicode_equivalence|different forms].\n... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20201129 08:08:38.275" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:08:31.594" endtime="20201129 08:08:38.275"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:08:38.275" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:08:38.275" endtime="20201129 08:08:38.276"></status>
</kw>
<msg timestamp="20201129 08:08:38.327" level="INFO">${response} = [{'name': 'BuiltIn', 'type': 'LIBRARY', 'version': '3.2.2', 'scope': 'GLOBAL', 'named_args': None, 'path': 'c:\\program files (x86)\\python36-32\\lib\\site-packages\\robot\\libraries\\BuiltIn.py', 'do...</msg>
<status status="PASS" starttime="20201129 08:08:31.593" endtime="20201129 08:08:38.327"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:08:38.328" level="INFO">Length is 10</msg>
<status status="PASS" starttime="20201129 08:08:38.327" endtime="20201129 08:08:38.328"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.592" endtime="20201129 08:08:38.328"></status>
</kw>
<kw name="keywords Endpoint Should Have ${m} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:08:38.330" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:08:38.330" endtime="20201129 08:08:38.331"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:08:39.491" level="INFO">GET Request : url=http://localhost:8000/api/v1/keywords/ 
 path_url=/api/v1/keywords/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:08:44.871" level="INFO">GET Response : url=http://localhost:8000/api/v1/keywords/ 
 status=200, reason=OK 
 body=[{"name":"Add Element","doc":"Adds a child element to the specified element.\n\nThe element to whom to add the new element is specified using ``source``\nand ``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword. The resulting XML structure is returned, and if the ``source``\nis an already parsed XML structure, it is also modified in place.\n\nThe ``element`` to add can be specified as a path to an XML file or\nas a string containing XML, or it can be an already parsed XML element.\nThe element is copied before adding so modifying either the original\nor the added element has no effect on the other\n.\nThe element is added as the last child by default, but a custom index\ncan be used to alter the position. Indices start from zero (0 = first\nposition, 1 = second position, etc.), and negative numbers refer to\npositions at the end (-1 = second last position, -2 = third last, etc.).\n\nExamples using ``${XML}`` structure from `Example`:\n| Add Element | ${XML} | &lt;new id=\"x\"&gt;&lt;c1/&gt;&lt;/new&gt; |\n| Add Element | ${XML} | &lt;c2/&gt; | xpath=new |\n| Add Element | ${XML} | &lt;c3/&gt; | index=1 | xpath=new |\n| ${new} = | Get Element | ${XML} | new |\n| Elements Should Be Equal | ${new} | &lt;new id=\"x\"&gt;&lt;c1/&gt;&lt;c3/&gt;&lt;c2/&gt;&lt;/new&gt; |\n\nUse `Remove Element` or `Remove Elements` to remove elements.","args":"[\"source\", \"element\", \"index=None\", \"xpath=.\"]","tags":[],"id":284,"synopsis":"Adds a child element to the specified element.","html_doc":"&lt;p&gt;Adds a child element to the specified element.&lt;/p&gt;\n&lt;p&gt;The element to whom to add the new element is specified using &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;xpath&lt;/code&gt;. They have exactly the same semantics as with `Get Element` keyword. The resulting XML structure is returned, and if the &lt;code&gt;source&lt;/code&gt; is an already parsed XML structure, it is also modified in place.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;element&lt;/code&gt; to add can be specified as a path to an XML file or as a string containing XML, or it can be an already parsed XML element. The element is copied before adding so modifying either the original or the added element has no effect on the other . The element is added as the last child by default, but a custom index can be used to alter the position. Indices start from zero (0 = first position, 1 = second position, etc.), and negative numbers refer to positions at the end (-1 = second last position, -2 = third last, etc.).&lt;/p&gt;\n&lt;p&gt;Examples using &lt;code&gt;${XML}&lt;/code&gt; structure from `Example`:&lt;/p&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;td&gt;Add Element&lt;/td&gt;\n&lt;td&gt;${XML}&lt;/td&gt;\n&lt;td&gt;&amp;lt;new id=\"x\"&amp;gt;&amp;lt;c1/&amp;gt;&amp;lt;/new&amp;gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Add Element&lt;/td&gt;\n&lt;td&gt;${XML}&lt;/td&gt;\n&lt;td&gt;&amp;lt;c2/&amp;gt;&lt;/td&gt;\n&lt;td&gt;xpath=new&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Add Element&lt;/td&gt;\n&lt;td&gt;${XML}&lt;/td&gt;\n&lt;td&gt;&amp;lt;c3/&amp;gt;&lt;/td&gt;\n&lt;td&gt;index=1&lt;/td&gt;\n&lt;td&gt;xpath=new&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;${new} =&lt;/td&gt;\n&lt;td&gt;Get Element&lt;/td&gt;\n&lt;td&gt;${XML}&lt;/td&gt;\n&lt;td&gt;new&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Elements Should Be Equal&lt;/td&gt;\n&lt;td&gt;${new}&lt;/td&gt;\n&lt;td&gt;&amp;lt;new id=\"x\"&amp;gt;&amp;lt;c1/&amp;gt;&amp;lt;c3/&amp;gt;&amp;lt;c2/&amp;gt;&amp;lt;/new&amp;gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;p&gt;Use `Remove Element` or `Remove Elements` to remove elements.&lt;/p&gt;","arg_string":"source, element, index=None, xpath=.","collection":{"id":10,"name":"XML"}},{"name":"Add Time To Date","doc":"Adds time to date and returns the resulting date.\n\nArguments:\n- ``date:``           Date to add time to in one of the supported\n                      `date formats`.\n- ``time:``           Time that is added in one of the supported\n                      `time formats`.\n- ``result_format:``  Format of the returned date.\n- ``exclude_millis:`` When set to any true value, rounds and drops\n                      milliseconds as explained in `millisecond handling`.\n- ``date_format:``    Possible `custom timestamp` format of ``date``.\n\nExamples:\n| ${date} =       | Add Time To Date | 2014-05-28 12:05:03.111 | 7 days       |\n| Should Be Equal | ${date}          | 2014-06-04 12:05:03.111 |              |\n| ${date} =       | Add Time To Date | 2014-05-28 12:05:03.111 | 01:02:03:004 |\n| Should Be Equal | ${date}          | 2014-05-28 13:07:06.115 |","args":"[\"date\", \"time\", \"result_format=timestamp\", \"exclude_millis=False\", \"date_format=None\"]","tags":[],"id":149,"synopsis":"Adds time to date and returns the resulting date.","html_doc":"&lt;p&gt;Adds time to date and returns the resulting date.&lt;/p&gt;\n&lt;p&gt;Arguments:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;date:&lt;/code&gt;           Date to add time to in one of the supported `date formats`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;time:&lt;/code&gt;           Time that is added in one of the supported `time formats`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;result_format:&lt;/code&gt;  Format of the returned date.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;exclude_millis:&lt;/code&gt; When set to any true value, rounds and drops milliseconds as explained in `millisecond handling`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;date_format:&lt;/code&gt;    Possible `custom timestamp` format of &lt;code&gt;date&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Examples:&lt;/p&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;td&gt;${date} =&lt;/td&gt;\n&lt;td&gt;Add Time To Date&lt;/td&gt;\n&lt;td&gt;2014-05-28 12:05:03.111&lt;/td&gt;\n&lt;td&gt;7 days&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;${date}&lt;/td&gt;\n&lt;td&gt;2014-06-04 12:05:03.111&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;${date} =&lt;/td&gt;\n&lt;td&gt;Add Time To Date&lt;/td&gt;\n&lt;td&gt;2014-05-28 12:05:03.111&lt;/td&gt;\n&lt;td&gt;01:02:03:004&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;${date}&lt;/td&gt;\n&lt;td&gt;2014-05-28 13:07:06.115&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;","arg_string":"date, time, result_format=timestamp, exclude_millis=False, date_format=None","collection":{"id":3,"name":"DateTime"}},{"name":"Add Time To Time","doc":"Adds time to another time and returns the resulting time.\n\nArguments:\n- ``time1:``          First time in one of the supported `time formats`.\n- ``time2:``          Second time in one of the supported `time formats`.\n- ``result_format:``  Format of the returned time.\n- ``exclude_millis:`` When set to any true value, rounds and drops\n                      milliseconds as explained in `millisecond handling`.\n\nExamples:\n| ${time} =       | Add Time To Time | 1 minute          | 42       |\n| Should Be Equal | ${time}          | ${102}            |\n| ${time} =       | Add Time To Time | 3 hours 5 minutes | 01:02:03 | timer | exclude_millis=yes |\n| Should Be Equal | ${time}          | 04:07:03          |","args":"[\"time1\", \"time2\", \"result_format=number\", \"exclude_millis=False\"]","tags":[],"id":150,"synopsis":"Adds time to another time and returns the resulting time.","html_doc":"&lt;p&gt;Adds time to another time and returns the resulting time.&lt;/p&gt;\n&lt;p&gt;Arguments:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;time1:&lt;/code&gt;          First time in one of the supported `time formats`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;time2:&lt;/code&gt;          Second time in one of the supported `time formats`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;result_format:&lt;/code&gt;  Format of the returned time.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;exclude_millis:&lt;/code&gt; When set to any true value, rounds and drops milliseconds as explained in `millisecond handling`.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Examples:&lt;/p&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;td&gt;${time} =&lt;/td&gt;\n&lt;td&gt;Add Time To Time&lt;/td&gt;\n&lt;td&gt;1 minute&lt;/td&gt;\n&lt;td&gt;42&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;${time}&lt;/td&gt;\n&lt;td&gt;${102}&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;${time} =&lt;/td&gt;\n&lt;td&gt;Add Time To Time&lt;/td&gt;\n&lt;td&gt;3 hours 5 minutes&lt;/td&gt;\n&lt;td&gt;01:02:03&lt;/td&gt;\n&lt;td&gt;timer&lt;/td&gt;\n&lt;td&gt;exclude_millis=yes&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;${time}&lt;/td&gt;\n&lt;td&gt;04:07:03&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;","arg_string":"time1, time2, result_format=number, exclude_millis=False","collection":{"id":3,"name":"DateTime"}},{"name":"Append To Environment Variable","doc":"Appends given ``values`` to environment variable ``name``.\n\nIf the environment variable already exists, values are added after it,\nand otherwise a new environment variable is created.\n\nValues are, by default, joined together using the operating system\npath separator (``;`` on Windows, ``:`` elsewhere). This can be changed\nby giving a separator after the values like ``separator=value``. No\nother configuration parameters are accepted.\n\nExamples (assuming ``NAME`` and ``NAME2`` do not exist initially):\n| Append To Environment Variable | NAME     | first  |       |\n| Should Be Equal                | %{NAME}  | first  |       |\n| Append To Environment Variable | NAME     | second | third |\n| Should Be Equal                | %{NAME}  | first${:}second${:}third |\n| Append To Environment Variable | NAME2    | first  | separator=-     |\n| Should Be Equal                | %{NAME2} | first  |                 |\n| Append To Environment Variable | NAME2    | second | separator=-     |\n| Should Be Equal                | %{NAME2} | first-second             |","args":"[\"name\", \"*values\", \"**config\"]","tags":[],"id":158,"synopsis":"Appends given ``values`` to environment variable ``name``.","html_doc":"&lt;p&gt;Appends given &lt;code&gt;values&lt;/code&gt; to environment variable &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If the environment variable already exists, values are added after it, and otherwise a new environment variable is created.&lt;/p&gt;\n&lt;p&gt;Values are, by default, joined together using the operating system path separator (&lt;code&gt;;&lt;/code&gt; on Windows, &lt;code&gt;:&lt;/code&gt; elsewhere). This can be changed by giving a separator after the values like &lt;code&gt;separator=value&lt;/code&gt;. No other configuration parameters are accepted.&lt;/p&gt;\n&lt;p&gt;Examples (assuming &lt;code&gt;NAME&lt;/code&gt; and &lt;code&gt;NAME2&lt;/code&gt; do not exist initially):&lt;/p&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;td&gt;Append To Environment Variable&lt;/td&gt;\n&lt;td&gt;NAME&lt;/td&gt;\n&lt;td&gt;first&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;%{NAME}&lt;/td&gt;\n&lt;td&gt;first&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Append To Environment Variable&lt;/td&gt;\n&lt;td&gt;NAME&lt;/td&gt;\n&lt;td&gt;second&lt;/td&gt;\n&lt;td&gt;third&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;%{NAME}&lt;/td&gt;\n&lt;td&gt;first${:}second${:}third&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Append To Environment Variable&lt;/td&gt;\n&lt;td&gt;NAME2&lt;/td&gt;\n&lt;td&gt;first&lt;/td&gt;\n&lt;... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20201129 08:08:44.872" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:08:38.331" endtime="20201129 08:08:44.872"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:08:44.873" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:08:44.872" endtime="20201129 08:08:44.873"></status>
</kw>
<msg timestamp="20201129 08:08:44.878" level="INFO">${response} = [{'name': 'Add Element', 'doc': 'Adds a child element to the specified element.\n\nThe element to whom to add the new element is specified using ``source``\nand ``xpath``. They have exactly the same s...</msg>
<status status="PASS" starttime="20201129 08:08:38.329" endtime="20201129 08:08:44.878"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:08:44.879" level="INFO">Length is 100</msg>
<status status="PASS" starttime="20201129 08:08:44.878" endtime="20201129 08:08:44.879"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:38.328" endtime="20201129 08:08:44.879"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:31.591" endtime="20201129 08:08:44.879"></status>
</kw>
<doc>Cli Should Populate App With Installed Keywords</doc>
<status status="PASS" starttime="20201129 08:08:20.352" endtime="20201129 08:08:44.880" critical="yes"></status>
</test>
<test id="s1-s2-t3" name="Cli Should Preserve All Keywords When Paths And Append Set">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--load-mode=append --no-installed-keywords</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:08:45.024" level="INFO">Running command ' rfhub2-cli --load-mode=append --no-installed-keywords 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:08:46.508" level="INFO">${output} = 
Successfully loaded 0 collections with 0 keywords.</msg>
<status status="PASS" starttime="20201129 08:08:44.883" endtime="20201129 08:08:46.508"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:08:46.508" level="INFO">${output} = 
Successfully loaded 0 collections with 0 keywords.</msg>
<status status="PASS" starttime="20201129 08:08:46.508" endtime="20201129 08:08:46.508"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:44.882" endtime="20201129 08:08:46.509"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Successfully loaded 0 collections with 0 keywords.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:08:46.510" level="INFO">${ns} = {'output': '\nSuccessfully loaded 0 collections with 0 keywords.'}</msg>
<status status="PASS" starttime="20201129 08:08:46.510" endtime="20201129 08:08:46.510"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:08:46.511" level="INFO">${clean_output} =  Successfully loaded 0 collections with 0 keywords.</msg>
<status status="PASS" starttime="20201129 08:08:46.511" endtime="20201129 08:08:46.511"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Successfully loaded 0 collections with 0 keywords." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:08:46.512" endtime="20201129 08:08:46.513"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:46.512" endtime="20201129 08:08:46.513"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:46.511" endtime="20201129 08:08:46.513"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:46.509" endtime="20201129 08:08:46.513"></status>
</kw>
<kw name="Api Should Have With 10 Collections And 100 Keywords">
<kw name="collections Endpoint Should Have ${n} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:08:46.515" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:08:46.515" endtime="20201129 08:08:46.516"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:08:47.904" level="INFO">GET Request : url=http://localhost:8000/api/v1/collections/ 
 path_url=/api/v1/collections/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:08:53.155" level="INFO">GET Response : url=http://localhost:8000/api/v1/collections/ 
 status=200, reason=OK 
 body=[{"name":"BuiltIn","type":"LIBRARY","version":"3.2.2","scope":"GLOBAL","named_args":null,"path":"c:\\program files (x86)\\python36-32\\lib\\site-packages\\robot\\libraries\\BuiltIn.py","doc":"An always available standard library with often needed keywords.\n\n``BuiltIn`` is Robot Framework's standard library that provides a set\nof generic keywords needed often. It is imported automatically and\nthus always available. The provided keywords can be used, for example,\nfor verifications (e.g. `Should Be Equal`, `Should Contain`),\nconversions (e.g. `Convert To Integer`) and for various other purposes\n(e.g. `Log`, `Sleep`, `Run Keyword If`, `Set Global Variable`).\n\n== Table of contents ==\n\n- `HTML error messages`\n- `Evaluating expressions`\n- `Boolean arguments`\n- `Pattern matching`\n- `Multiline string comparison`\n- `String representations`\n- `Shortcuts`\n- `Keywords`\n\n= HTML error messages =\n\nMany of the keywords accept an optional error message to use if the keyword\nfails, and it is possible to use HTML in these messages by prefixing them\nwith ``*HTML*``. See `Fail` keyword for a usage example. Notice that using\nHTML in messages is not limited to BuiltIn library but works with any\nerror message.\n\n= Evaluating expressions =\n\nMany keywords, such as `Evaluate`, `Run Keyword If` and `Should Be True`,\naccept an expression that is evaluated in Python.\n\n== Evaluation namespace ==\n\nExpressions are evaluated using Python's\n[http://docs.python.org/library/functions.html#eval|eval] function so\nthat all Python built-ins like ``len()`` and ``int()`` are available.\nIn addition to that, all unrecognized variables are considered to be\nmodules that are automatically imported. It is possible to use all\navailable Python modules, including the standard modules and the installed\nthird party modules.\n\nExamples:\n| `Should Be True`   | len('${result}') &gt; 3 |\n| `Run Keyword If`   | os.sep == '/'        | Non-Windows Keyword  |\n| ${robot version} = | `Evaluate`           | robot.__version__    |\n\n`Evaluate` also allows configuring the execution namespace with a custom\nnamespace and with custom modules to be imported. The latter functionality\nis useful when using nested modules like ``rootmod.submod`` that are\nimplemented so that the root module does not automatically import sub\nmodules. Otherwise the automatic module import mechanism described earlier\nis enough to get the needed modules imported.\n\n*NOTE:* Automatic module import is a new feature in Robot Framework 3.2.\nEarlier modules needed to be explicitly taken into use when using the\n`Evaluate` keyword and other keywords only had access to ``sys`` and\n``os`` modules.\n\n== Using variables ==\n\nWhen a variable is used in the expressing using the normal ``${variable}``\nsyntax, its value is replaced before the expression is evaluated. This\nmeans that the value used in the expression will be the string\nrepresentation of the variable value, not the variable value itself.\nThis is not a problem with numbers and other objects that have a string\nrepresentation that can be evaluated directly, but with other objects\nthe behavior depends on the string representation. Most importantly,\nstrings must always be quoted, and if they can contain newlines, they must\nbe triple quoted.\n\nExamples:\n| `Should Be True` | ${rc} &lt; 10                | Return code greater than 10 |\n| `Run Keyword If` | '${status}' == 'PASS'     | Log | Passed                |\n| `Run Keyword If` | 'FAIL' in '''${output}''' | Log | Output contains FAIL  |\n\nActual variables values are also available in the evaluation namespace.\nThey can be accessed using special variable syntax without the curly\nbraces like ``$variable``. These variables should never be quoted.\n\nExamples:\n| `Should Be True` | $rc &lt; 10          | Return code greater than 10  |\n| `Run Keyword If` | $status == 'PASS' | `Log` | Passed               |\n| `Run Keyword If` | 'FAIL' in $output | `Log` | Output contains FAIL |\n| `Should Be True` | len($result) &gt; 1 and $result[1] == 'OK' |\n| `Should Be True` | $result is not None                     |\n\nUsing the ``$variable`` syntax slows down expression evaluation a little.\nThis should not typically matter, but should be taken into account if\ncomplex expressions are evaluated often and there are strict time\nconstrains.\n\nNotice that instead of creating complicated expressions, it is often better\nto move the logic into a test library. That eases maintenance and can also\nenhance execution speed.\n\n= Boolean arguments =\n\nSome keywords accept arguments that are handled as Boolean values true or\nfalse. If such an argument is given as a string, it is considered false if\nit is an empty string or equal to ``FALSE``, ``NONE``, ``NO``, ``OFF`` or\n``0``, case-insensitively. Keywords verifying something that allow dropping\nactual and expected values from the possible error message also consider\nstring ``no values`` to be false. Other strings are considered true unless\nthe keyword documentation explicitly states otherwise, and other argument\ntypes are tested using the same\n[http://docs.python.org/library/stdtypes.html#truth|rules as in Python].\n\nTrue examples:\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=True    | # Strings are generally true.    |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=yes     | # Same as the above.             |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=${TRUE} | # Python ``True`` is true.       |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=${42}   | # Numbers other than 0 are true. |\n\nFalse examples:\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=False     | # String ``false`` is false.   |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=no        | # Also string ``no`` is false. |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=${EMPTY}  | # Empty string is false.       |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=${FALSE}  | # Python ``False`` is false.   |\n| `Should Be Equal` | ${x} | ${y}  | Custom error | values=no values | # ``no values`` works with ``values`` argument |\n\nConsidering string ``NONE`` false is new in Robot Framework 3.0.3 and\nconsidering also ``OFF`` and ``0`` false is new in Robot Framework 3.1.\n\n= Pattern matching =\n\nMany keywords accepts arguments as either glob or regular expression\npatterns.\n\n== Glob patterns ==\n\nSome keywords, for example `Should Match`, support so called\n[http://en.wikipedia.org/wiki/Glob_(programming)|glob patterns] where:\n\n| ``*``        | matches any string, even an empty string                |\n| ``?``        | matches any single character                            |\n| ``[chars]``  | matches one character in the bracket                    |\n| ``[!chars]`` | matches one character not in the bracket                |\n| ``[a-z]``    | matches one character from the range in the bracket     |\n| ``[!a-z]``   | matches one character not from the range in the bracket |\n\nUnlike with glob patterns normally, path separator characters ``/`` and\n``\\`` and the newline character ``\\n`` are matches by the above\nwildcards.\n\nSupport for brackets like ``[abc]`` and ``[!a-z]`` is new in\nRobot Framework 3.1.\n\n== Regular expressions ==\n\nSome keywords, for example `Should Match Regexp`, support\n[http://en.wikipedia.org/wiki/Regular_expression|regular expressions]\nthat are more powerful but also more complicated that glob patterns.\nThe regular expression support is implemented using Python's\n[http://docs.python.org/library/re.html|re module] and its documentation\nshould be consulted for more information about the syntax.\n\nBecause the backslash character (``\\``) is an escape character in\nRobot Framework test data, possible backslash characters in regular\nexpressions need to be escaped with another backslash like ``\\\\d\\\\w+``.\nStrings that may contain special characters but should be handled\nas literal strings, can be escaped with the `Regexp Escape` keyword.\n\n= Multiline string comparison =\n\n`Should Be Equal` and `Should Be Equal As Strings` report the failures using\n[http://en.wikipedia.org/wiki/Diff_utility#Unified_format|unified diff\nformat] if both strings have more than two lines.\n\nExample:\n| ${first} =  | `Catenate` | SEPARATOR=\\n | Not in second | Same | Differs | Same |\n| ${second} = | `Catenate` | SEPARATOR=\\n | Same | Differs2 | Same | Not in first |\n| `Should Be Equal` | ${first} | ${second} |\n\nResults in the following error message:\n\n| Multiline strings are different:\n| --- first\n| +++ second\n| @@ -1,4 +1,4 @@\n| -Not in second\n|  Same\n| -Differs\n| +Differs2\n|  Same\n| +Not in first\n\n= String representations =\n\nSeveral keywords log values explicitly (e.g. `Log`) or implicitly (e.g.\n`Should Be Equal` when there are failures). By default keywords log values\nusing \"human readable\" string representation, which means that strings\nlike ``Hello`` and numbers like ``42`` are logged as-is. Most of the time\nthis is the desired behavior, but there are some problems as well:\n\n- It is not possible to see difference between different objects that\n  have same string representation like string ``42`` and integer ``42``.\n  `Should Be Equal` and some other keywords add the type information to\n  the error message in these cases, though.\n\n- Non-printable characters such as the null byte are not visible.\n\n- Trailing whitespace is not visible.\n\n- Different newlines (``\\r\\n`` on Windows, ``\\n`` elsewhere) cannot\n  be separated from each others.\n\n- There are several Unicode characters that are different but look the\n  same. One example is the Latin ``a`` (``\\u0061``) and the Cyrillic\n  ``а`` (``\\u0430``). Error messages like ``a != а`` are\n  not very helpful.\n\n- Some Unicode characters can be represented using\n  [https://en.wikipedia.org/wiki/Unicode_equivalence|different forms].\n... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20201129 08:08:53.156" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:08:46.516" endtime="20201129 08:08:53.156"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:08:53.156" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:08:53.156" endtime="20201129 08:08:53.157"></status>
</kw>
<msg timestamp="20201129 08:08:53.207" level="INFO">${response} = [{'name': 'BuiltIn', 'type': 'LIBRARY', 'version': '3.2.2', 'scope': 'GLOBAL', 'named_args': None, 'path': 'c:\\program files (x86)\\python36-32\\lib\\site-packages\\robot\\libraries\\BuiltIn.py', 'do...</msg>
<status status="PASS" starttime="20201129 08:08:46.514" endtime="20201129 08:08:53.208"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:08:53.208" level="INFO">Length is 10</msg>
<status status="PASS" starttime="20201129 08:08:53.208" endtime="20201129 08:08:53.208"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:46.514" endtime="20201129 08:08:53.209"></status>
</kw>
<kw name="keywords Endpoint Should Have ${m} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:08:53.210" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:08:53.210" endtime="20201129 08:08:53.211"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:08:54.377" level="INFO">GET Request : url=http://localhost:8000/api/v1/keywords/ 
 path_url=/api/v1/keywords/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:08:59.745" level="INFO">GET Response : url=http://localhost:8000/api/v1/keywords/ 
 status=200, reason=OK 
 body=[{"name":"Add Element","doc":"Adds a child element to the specified element.\n\nThe element to whom to add the new element is specified using ``source``\nand ``xpath``. They have exactly the same semantics as with `Get Element`\nkeyword. The resulting XML structure is returned, and if the ``source``\nis an already parsed XML structure, it is also modified in place.\n\nThe ``element`` to add can be specified as a path to an XML file or\nas a string containing XML, or it can be an already parsed XML element.\nThe element is copied before adding so modifying either the original\nor the added element has no effect on the other\n.\nThe element is added as the last child by default, but a custom index\ncan be used to alter the position. Indices start from zero (0 = first\nposition, 1 = second position, etc.), and negative numbers refer to\npositions at the end (-1 = second last position, -2 = third last, etc.).\n\nExamples using ``${XML}`` structure from `Example`:\n| Add Element | ${XML} | &lt;new id=\"x\"&gt;&lt;c1/&gt;&lt;/new&gt; |\n| Add Element | ${XML} | &lt;c2/&gt; | xpath=new |\n| Add Element | ${XML} | &lt;c3/&gt; | index=1 | xpath=new |\n| ${new} = | Get Element | ${XML} | new |\n| Elements Should Be Equal | ${new} | &lt;new id=\"x\"&gt;&lt;c1/&gt;&lt;c3/&gt;&lt;c2/&gt;&lt;/new&gt; |\n\nUse `Remove Element` or `Remove Elements` to remove elements.","args":"[\"source\", \"element\", \"index=None\", \"xpath=.\"]","tags":[],"id":284,"synopsis":"Adds a child element to the specified element.","html_doc":"&lt;p&gt;Adds a child element to the specified element.&lt;/p&gt;\n&lt;p&gt;The element to whom to add the new element is specified using &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;xpath&lt;/code&gt;. They have exactly the same semantics as with `Get Element` keyword. The resulting XML structure is returned, and if the &lt;code&gt;source&lt;/code&gt; is an already parsed XML structure, it is also modified in place.&lt;/p&gt;\n&lt;p&gt;The &lt;code&gt;element&lt;/code&gt; to add can be specified as a path to an XML file or as a string containing XML, or it can be an already parsed XML element. The element is copied before adding so modifying either the original or the added element has no effect on the other . The element is added as the last child by default, but a custom index can be used to alter the position. Indices start from zero (0 = first position, 1 = second position, etc.), and negative numbers refer to positions at the end (-1 = second last position, -2 = third last, etc.).&lt;/p&gt;\n&lt;p&gt;Examples using &lt;code&gt;${XML}&lt;/code&gt; structure from `Example`:&lt;/p&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;td&gt;Add Element&lt;/td&gt;\n&lt;td&gt;${XML}&lt;/td&gt;\n&lt;td&gt;&amp;lt;new id=\"x\"&amp;gt;&amp;lt;c1/&amp;gt;&amp;lt;/new&amp;gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Add Element&lt;/td&gt;\n&lt;td&gt;${XML}&lt;/td&gt;\n&lt;td&gt;&amp;lt;c2/&amp;gt;&lt;/td&gt;\n&lt;td&gt;xpath=new&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Add Element&lt;/td&gt;\n&lt;td&gt;${XML}&lt;/td&gt;\n&lt;td&gt;&amp;lt;c3/&amp;gt;&lt;/td&gt;\n&lt;td&gt;index=1&lt;/td&gt;\n&lt;td&gt;xpath=new&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;${new} =&lt;/td&gt;\n&lt;td&gt;Get Element&lt;/td&gt;\n&lt;td&gt;${XML}&lt;/td&gt;\n&lt;td&gt;new&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Elements Should Be Equal&lt;/td&gt;\n&lt;td&gt;${new}&lt;/td&gt;\n&lt;td&gt;&amp;lt;new id=\"x\"&amp;gt;&amp;lt;c1/&amp;gt;&amp;lt;c3/&amp;gt;&amp;lt;c2/&amp;gt;&amp;lt;/new&amp;gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;p&gt;Use `Remove Element` or `Remove Elements` to remove elements.&lt;/p&gt;","arg_string":"source, element, index=None, xpath=.","collection":{"id":10,"name":"XML"}},{"name":"Add Time To Date","doc":"Adds time to date and returns the resulting date.\n\nArguments:\n- ``date:``           Date to add time to in one of the supported\n                      `date formats`.\n- ``time:``           Time that is added in one of the supported\n                      `time formats`.\n- ``result_format:``  Format of the returned date.\n- ``exclude_millis:`` When set to any true value, rounds and drops\n                      milliseconds as explained in `millisecond handling`.\n- ``date_format:``    Possible `custom timestamp` format of ``date``.\n\nExamples:\n| ${date} =       | Add Time To Date | 2014-05-28 12:05:03.111 | 7 days       |\n| Should Be Equal | ${date}          | 2014-06-04 12:05:03.111 |              |\n| ${date} =       | Add Time To Date | 2014-05-28 12:05:03.111 | 01:02:03:004 |\n| Should Be Equal | ${date}          | 2014-05-28 13:07:06.115 |","args":"[\"date\", \"time\", \"result_format=timestamp\", \"exclude_millis=False\", \"date_format=None\"]","tags":[],"id":149,"synopsis":"Adds time to date and returns the resulting date.","html_doc":"&lt;p&gt;Adds time to date and returns the resulting date.&lt;/p&gt;\n&lt;p&gt;Arguments:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;date:&lt;/code&gt;           Date to add time to in one of the supported `date formats`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;time:&lt;/code&gt;           Time that is added in one of the supported `time formats`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;result_format:&lt;/code&gt;  Format of the returned date.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;exclude_millis:&lt;/code&gt; When set to any true value, rounds and drops milliseconds as explained in `millisecond handling`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;date_format:&lt;/code&gt;    Possible `custom timestamp` format of &lt;code&gt;date&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Examples:&lt;/p&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;td&gt;${date} =&lt;/td&gt;\n&lt;td&gt;Add Time To Date&lt;/td&gt;\n&lt;td&gt;2014-05-28 12:05:03.111&lt;/td&gt;\n&lt;td&gt;7 days&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;${date}&lt;/td&gt;\n&lt;td&gt;2014-06-04 12:05:03.111&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;${date} =&lt;/td&gt;\n&lt;td&gt;Add Time To Date&lt;/td&gt;\n&lt;td&gt;2014-05-28 12:05:03.111&lt;/td&gt;\n&lt;td&gt;01:02:03:004&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;${date}&lt;/td&gt;\n&lt;td&gt;2014-05-28 13:07:06.115&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;","arg_string":"date, time, result_format=timestamp, exclude_millis=False, date_format=None","collection":{"id":3,"name":"DateTime"}},{"name":"Add Time To Time","doc":"Adds time to another time and returns the resulting time.\n\nArguments:\n- ``time1:``          First time in one of the supported `time formats`.\n- ``time2:``          Second time in one of the supported `time formats`.\n- ``result_format:``  Format of the returned time.\n- ``exclude_millis:`` When set to any true value, rounds and drops\n                      milliseconds as explained in `millisecond handling`.\n\nExamples:\n| ${time} =       | Add Time To Time | 1 minute          | 42       |\n| Should Be Equal | ${time}          | ${102}            |\n| ${time} =       | Add Time To Time | 3 hours 5 minutes | 01:02:03 | timer | exclude_millis=yes |\n| Should Be Equal | ${time}          | 04:07:03          |","args":"[\"time1\", \"time2\", \"result_format=number\", \"exclude_millis=False\"]","tags":[],"id":150,"synopsis":"Adds time to another time and returns the resulting time.","html_doc":"&lt;p&gt;Adds time to another time and returns the resulting time.&lt;/p&gt;\n&lt;p&gt;Arguments:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;time1:&lt;/code&gt;          First time in one of the supported `time formats`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;time2:&lt;/code&gt;          Second time in one of the supported `time formats`.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;result_format:&lt;/code&gt;  Format of the returned time.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;exclude_millis:&lt;/code&gt; When set to any true value, rounds and drops milliseconds as explained in `millisecond handling`.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;Examples:&lt;/p&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;td&gt;${time} =&lt;/td&gt;\n&lt;td&gt;Add Time To Time&lt;/td&gt;\n&lt;td&gt;1 minute&lt;/td&gt;\n&lt;td&gt;42&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;${time}&lt;/td&gt;\n&lt;td&gt;${102}&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;${time} =&lt;/td&gt;\n&lt;td&gt;Add Time To Time&lt;/td&gt;\n&lt;td&gt;3 hours 5 minutes&lt;/td&gt;\n&lt;td&gt;01:02:03&lt;/td&gt;\n&lt;td&gt;timer&lt;/td&gt;\n&lt;td&gt;exclude_millis=yes&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;${time}&lt;/td&gt;\n&lt;td&gt;04:07:03&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;","arg_string":"time1, time2, result_format=number, exclude_millis=False","collection":{"id":3,"name":"DateTime"}},{"name":"Append To Environment Variable","doc":"Appends given ``values`` to environment variable ``name``.\n\nIf the environment variable already exists, values are added after it,\nand otherwise a new environment variable is created.\n\nValues are, by default, joined together using the operating system\npath separator (``;`` on Windows, ``:`` elsewhere). This can be changed\nby giving a separator after the values like ``separator=value``. No\nother configuration parameters are accepted.\n\nExamples (assuming ``NAME`` and ``NAME2`` do not exist initially):\n| Append To Environment Variable | NAME     | first  |       |\n| Should Be Equal                | %{NAME}  | first  |       |\n| Append To Environment Variable | NAME     | second | third |\n| Should Be Equal                | %{NAME}  | first${:}second${:}third |\n| Append To Environment Variable | NAME2    | first  | separator=-     |\n| Should Be Equal                | %{NAME2} | first  |                 |\n| Append To Environment Variable | NAME2    | second | separator=-     |\n| Should Be Equal                | %{NAME2} | first-second             |","args":"[\"name\", \"*values\", \"**config\"]","tags":[],"id":158,"synopsis":"Appends given ``values`` to environment variable ``name``.","html_doc":"&lt;p&gt;Appends given &lt;code&gt;values&lt;/code&gt; to environment variable &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;\n&lt;p&gt;If the environment variable already exists, values are added after it, and otherwise a new environment variable is created.&lt;/p&gt;\n&lt;p&gt;Values are, by default, joined together using the operating system path separator (&lt;code&gt;;&lt;/code&gt; on Windows, &lt;code&gt;:&lt;/code&gt; elsewhere). This can be changed by giving a separator after the values like &lt;code&gt;separator=value&lt;/code&gt;. No other configuration parameters are accepted.&lt;/p&gt;\n&lt;p&gt;Examples (assuming &lt;code&gt;NAME&lt;/code&gt; and &lt;code&gt;NAME2&lt;/code&gt; do not exist initially):&lt;/p&gt;\n&lt;table border=\"1\"&gt;\n&lt;tr&gt;\n&lt;td&gt;Append To Environment Variable&lt;/td&gt;\n&lt;td&gt;NAME&lt;/td&gt;\n&lt;td&gt;first&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;%{NAME}&lt;/td&gt;\n&lt;td&gt;first&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Append To Environment Variable&lt;/td&gt;\n&lt;td&gt;NAME&lt;/td&gt;\n&lt;td&gt;second&lt;/td&gt;\n&lt;td&gt;third&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Should Be Equal&lt;/td&gt;\n&lt;td&gt;%{NAME}&lt;/td&gt;\n&lt;td&gt;first${:}second${:}third&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Append To Environment Variable&lt;/td&gt;\n&lt;td&gt;NAME2&lt;/td&gt;\n&lt;td&gt;first&lt;/td&gt;\n&lt;... (set the log level to DEBUG or TRACE to see the full content) 
 </msg>
<msg timestamp="20201129 08:08:59.746" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:08:53.211" endtime="20201129 08:08:59.746"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:08:59.747" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:08:59.746" endtime="20201129 08:08:59.747"></status>
</kw>
<msg timestamp="20201129 08:08:59.752" level="INFO">${response} = [{'name': 'Add Element', 'doc': 'Adds a child element to the specified element.\n\nThe element to whom to add the new element is specified using ``source``\nand ``xpath``. They have exactly the same s...</msg>
<status status="PASS" starttime="20201129 08:08:53.209" endtime="20201129 08:08:59.752"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:08:59.753" level="INFO">Length is 100</msg>
<status status="PASS" starttime="20201129 08:08:59.753" endtime="20201129 08:08:59.753"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:53.209" endtime="20201129 08:08:59.753"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:46.513" endtime="20201129 08:08:59.754"></status>
</kw>
<doc>Cli Should Preserve All Keywords When Paths And Append Set
This test is dependant on one above:
'Cli Should Populate App With Installed Keywords'</doc>
<status status="PASS" starttime="20201129 08:08:44.880" endtime="20201129 08:08:59.754" critical="yes"></status>
</test>
<test id="s1-s2-t4" name="Cli Should Delete All Keywords When Paths And No Installed Keywords Set">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--no-installed-keywords</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:08:59.899" level="INFO">Running command ' rfhub2-cli --no-installed-keywords 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:03.255" level="INFO">${output} = 
Successfully loaded 0 collections with 0 keywords.</msg>
<status status="PASS" starttime="20201129 08:08:59.756" endtime="20201129 08:09:03.256"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:03.256" level="INFO">${output} = 
Successfully loaded 0 collections with 0 keywords.</msg>
<status status="PASS" starttime="20201129 08:09:03.256" endtime="20201129 08:09:03.256"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:59.756" endtime="20201129 08:09:03.257"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Successfully loaded 0 collections with 0 keywords.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:09:03.258" level="INFO">${ns} = {'output': '\nSuccessfully loaded 0 collections with 0 keywords.'}</msg>
<status status="PASS" starttime="20201129 08:09:03.257" endtime="20201129 08:09:03.258"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:09:03.259" level="INFO">${clean_output} =  Successfully loaded 0 collections with 0 keywords.</msg>
<status status="PASS" starttime="20201129 08:09:03.258" endtime="20201129 08:09:03.259"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Successfully loaded 0 collections with 0 keywords." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:03.260" endtime="20201129 08:09:03.260"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:03.259" endtime="20201129 08:09:03.260"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:03.259" endtime="20201129 08:09:03.260"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:03.257" endtime="20201129 08:09:03.260"></status>
</kw>
<kw name="Api Should Have With 0 Collections And 0 Keywords">
<kw name="collections Endpoint Should Have ${n} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:09:03.262" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:09:03.262" endtime="20201129 08:09:03.263"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:09:04.293" level="INFO">GET Request : url=http://localhost:8000/api/v1/collections/ 
 path_url=/api/v1/collections/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:09:04.294" level="INFO">GET Response : url=http://localhost:8000/api/v1/collections/ 
 status=200, reason=OK 
 body=[] 
 </msg>
<msg timestamp="20201129 08:09:04.294" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:09:03.263" endtime="20201129 08:09:04.294"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:09:04.295" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:04.294" endtime="20201129 08:09:04.295"></status>
</kw>
<msg timestamp="20201129 08:09:04.295" level="INFO">${response} = []</msg>
<status status="PASS" starttime="20201129 08:09:03.261" endtime="20201129 08:09:04.295"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:09:04.296" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20201129 08:09:04.295" endtime="20201129 08:09:04.296"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:03.261" endtime="20201129 08:09:04.296"></status>
</kw>
<kw name="keywords Endpoint Should Have ${m} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:09:04.299" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:09:04.298" endtime="20201129 08:09:04.299"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:09:05.319" level="INFO">GET Request : url=http://localhost:8000/api/v1/keywords/ 
 path_url=/api/v1/keywords/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:09:05.320" level="INFO">GET Response : url=http://localhost:8000/api/v1/keywords/ 
 status=200, reason=OK 
 body=[] 
 </msg>
<msg timestamp="20201129 08:09:05.320" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:09:04.299" endtime="20201129 08:09:05.321"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:09:05.322" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:05.321" endtime="20201129 08:09:05.323"></status>
</kw>
<msg timestamp="20201129 08:09:05.324" level="INFO">${response} = []</msg>
<status status="PASS" starttime="20201129 08:09:04.297" endtime="20201129 08:09:05.324"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:09:05.326" level="INFO">Length is 0</msg>
<status status="PASS" starttime="20201129 08:09:05.325" endtime="20201129 08:09:05.326"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:04.297" endtime="20201129 08:09:05.326"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:03.260" endtime="20201129 08:09:05.327"></status>
</kw>
<doc>Cli Should Delete All Keywords When Paths And No Installed Keywords Set</doc>
<status status="PASS" starttime="20201129 08:08:59.755" endtime="20201129 08:09:05.328" critical="yes"></status>
</test>
<test id="s1-s2-t5" name="Cli Should Return Unauthorised When Wrong User Given">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>-u wrong_user</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:05.477" level="INFO">Running command ' rfhub2-cli -u wrong_user 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:08.737" level="INFO">${output} = Unauthorized to perform this action
Traceback (most recent call last):
  File "C:\Program Files (x86)\Python36-32\Scripts\rfhub2-cli-script.py", line 11, in &lt;module&gt;
    load_entry_point('rfhub2', 'co...</msg>
<status status="PASS" starttime="20201129 08:09:05.334" endtime="20201129 08:09:08.737"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:08.738" level="INFO">${output} = Unauthorized to perform this action
Traceback (most recent call last):
  File "C:\Program Files (x86)\Python36-32\Scripts\rfhub2-cli-script.py", line 11, in &lt;module&gt;
    load_entry_point('rfhub2', 'co...</msg>
<status status="PASS" starttime="20201129 08:09:08.737" endtime="20201129 08:09:08.738"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:05.332" endtime="20201129 08:09:08.738"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Unauthorized to perform this action</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:09:08.740" level="INFO">${ns} = {'output': 'Unauthorized to perform this action\nTraceback (most recent call last):\n  File "C:\\Program Files (x86)\\Python36-32\\Scripts\\rfhub2-cli-script.py", line 11, in &lt;module&gt;\n    load_entry_...</msg>
<status status="PASS" starttime="20201129 08:09:08.739" endtime="20201129 08:09:08.740"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:09:08.741" level="INFO">${clean_output} = Unauthorized to perform this action Traceback (most recent call last): File "C:\Program Files (x86)\Python36-32\Scripts\rfhub2-cli-script.py", line 11, in &lt;module&gt; load_entry_point('rfhub2', 'console_...</msg>
<status status="PASS" starttime="20201129 08:09:08.740" endtime="20201129 08:09:08.741"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Unauthorized to perform this action" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:08.741" endtime="20201129 08:09:08.742"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:08.741" endtime="20201129 08:09:08.742"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:08.741" endtime="20201129 08:09:08.742"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:08.738" endtime="20201129 08:09:08.742"></status>
</kw>
<doc>Cli Should Return Unauthorised When Wrong User Given</doc>
<status status="PASS" starttime="20201129 08:09:05.330" endtime="20201129 08:09:08.742" critical="yes"></status>
</test>
<test id="s1-s2-t6" name="Cli Should Return Unauthorised When Wrong Password Given">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>-p wrong_pass</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:08.886" level="INFO">Running command ' rfhub2-cli -p wrong_pass 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:12.156" level="INFO">${output} = Unauthorized to perform this action
Traceback (most recent call last):
  File "C:\Program Files (x86)\Python36-32\Scripts\rfhub2-cli-script.py", line 11, in &lt;module&gt;
    load_entry_point('rfhub2', 'co...</msg>
<status status="PASS" starttime="20201129 08:09:08.745" endtime="20201129 08:09:12.156"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:12.157" level="INFO">${output} = Unauthorized to perform this action
Traceback (most recent call last):
  File "C:\Program Files (x86)\Python36-32\Scripts\rfhub2-cli-script.py", line 11, in &lt;module&gt;
    load_entry_point('rfhub2', 'co...</msg>
<status status="PASS" starttime="20201129 08:09:12.157" endtime="20201129 08:09:12.157"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:08.744" endtime="20201129 08:09:12.158"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Unauthorized to perform this action</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:09:12.159" level="INFO">${ns} = {'output': 'Unauthorized to perform this action\nTraceback (most recent call last):\n  File "C:\\Program Files (x86)\\Python36-32\\Scripts\\rfhub2-cli-script.py", line 11, in &lt;module&gt;\n    load_entry_...</msg>
<status status="PASS" starttime="20201129 08:09:12.159" endtime="20201129 08:09:12.159"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:09:12.160" level="INFO">${clean_output} = Unauthorized to perform this action Traceback (most recent call last): File "C:\Program Files (x86)\Python36-32\Scripts\rfhub2-cli-script.py", line 11, in &lt;module&gt; load_entry_point('rfhub2', 'console_...</msg>
<status status="PASS" starttime="20201129 08:09:12.160" endtime="20201129 08:09:12.160"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Unauthorized to perform this action" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:12.161" endtime="20201129 08:09:12.161"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:12.161" endtime="20201129 08:09:12.161"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:12.160" endtime="20201129 08:09:12.161"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:12.158" endtime="20201129 08:09:12.162"></status>
</kw>
<doc>Cli Should Return Unauthorised When Wrong Password Given</doc>
<status status="PASS" starttime="20201129 08:09:08.743" endtime="20201129 08:09:12.162" critical="yes"></status>
</test>
<test id="s1-s2-t7" name="Cli Should Return Connection Error When Wrong Url Given">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>-a 123.456.789.123:666</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:12.304" level="INFO">Running command ' rfhub2-cli -a 123.456.789.123:666 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:14.531" level="INFO">${output} = Traceback (most recent call last):
  File "C:\Program Files (x86)\Python36-32\Scripts\rfhub2-cli-script.py", line 11, in &lt;module&gt;
    load_entry_point('rfhub2', 'console_scripts', 'rfhub2-cli')()
  Fi...</msg>
<status status="PASS" starttime="20201129 08:09:12.164" endtime="20201129 08:09:14.531"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:14.532" level="INFO">${output} = Traceback (most recent call last):
  File "C:\Program Files (x86)\Python36-32\Scripts\rfhub2-cli-script.py", line 11, in &lt;module&gt;
    load_entry_point('rfhub2', 'console_scripts', 'rfhub2-cli')()
  Fi...</msg>
<status status="PASS" starttime="20201129 08:09:14.531" endtime="20201129 08:09:14.532"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:12.164" endtime="20201129 08:09:14.532"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${output}</arg>
<arg>No connection adapters were found</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:14.533" endtime="20201129 08:09:14.533"></status>
</kw>
<doc>Cli Should Return Connection Error When Wrong Url Given</doc>
<status status="PASS" starttime="20201129 08:09:12.163" endtime="20201129 08:09:14.533" critical="yes"></status>
</test>
<test id="s1-s2-t8" name="Cli Should Update Existing Collections, Delete Obsolete And Add New">
<kw name="Run Keywords" library="BuiltIn" type="setup">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Run Cli Package Without Installed Keywords</arg>
<arg>Backup And Switch Initial With Updated Fixtures</arg>
</arguments>
<kw name="Run Cli Package Without Installed Keywords" library="keywords">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--no-installed-keywords ${INITIAL_FIXTURES}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:14.681" level="INFO">Running command ' rfhub2-cli --no-installed-keywords C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures/initial/ 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:18.000" level="INFO">${output} = usage: script_for_system_exit [-h] -c CONF
script_for_system_exit: error: the following arguments are required: -c/--conf
Failed to create collection from path C:\repo\rfhub2\tests\acceptance\resource...</msg>
<status status="PASS" starttime="20201129 08:09:14.537" endtime="20201129 08:09:18.000"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:18.001" level="INFO">${output} = usage: script_for_system_exit [-h] -c CONF
script_for_system_exit: error: the following arguments are required: -c/--conf
Failed to create collection from path C:\repo\rfhub2\tests\acceptance\resource...</msg>
<status status="PASS" starttime="20201129 08:09:18.000" endtime="20201129 08:09:18.001"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:14.536" endtime="20201129 08:09:18.001"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:14.536" endtime="20201129 08:09:18.002"></status>
</kw>
<kw name="Backup And Switch Initial With Updated Fixtures" library="keywords">
<kw name="Move Directory" library="OperatingSystem">
<doc>Moves the source directory into a destination.</doc>
<arguments>
<arg>${INITIAL_FIXTURES}</arg>
<arg>${BACKUP_FIXTURES}</arg>
</arguments>
<msg timestamp="20201129 08:09:18.005" level="INFO" html="yes">Moved directory from '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial"&gt;C:\repo\rfhub2\tests\fixtures\initial&lt;/a&gt;' to '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial_bkp"&gt;C:\repo\rfhub2\tests\fixtures\initial_bkp&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:09:18.002" endtime="20201129 08:09:18.006"></status>
</kw>
<kw name="Copy Directory" library="OperatingSystem">
<doc>Copies the source directory into the destination.</doc>
<arguments>
<arg>${UPDATED_FIXTURES}</arg>
<arg>${INITIAL_FIXTURES}</arg>
</arguments>
<msg timestamp="20201129 08:09:18.055" level="INFO" html="yes">Copied directory from '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\updated"&gt;C:\repo\rfhub2\tests\fixtures\updated&lt;/a&gt;' to '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial"&gt;C:\repo\rfhub2\tests\fixtures\initial&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:09:18.006" endtime="20201129 08:09:18.055"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:18.002" endtime="20201129 08:09:18.055"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:14.535" endtime="20201129 08:09:18.055"></status>
</kw>
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--load-mode=update --no-installed-keywords ${INITIAL_FIXTURES}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:18.199" level="INFO">Running command ' rfhub2-cli --load-mode=update --no-installed-keywords C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures/initial/ 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:21.162" level="INFO">${output} = SingleClassLib library with 4 keywords loaded.
Test Libdoc File library with 1 keywords loaded.
test_resource library with 2 keywords loaded.
Test Libdoc File Copy library with 1 keywords loaded.

Suc...</msg>
<status status="PASS" starttime="20201129 08:09:18.056" endtime="20201129 08:09:21.162"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:21.163" level="INFO">${output} = SingleClassLib library with 4 keywords loaded.
Test Libdoc File library with 1 keywords loaded.
test_resource library with 2 keywords loaded.
Test Libdoc File Copy library with 1 keywords loaded.

Suc...</msg>
<status status="PASS" starttime="20201129 08:09:21.162" endtime="20201129 08:09:21.163"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:18.055" endtime="20201129 08:09:21.163"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>SingleClassLib library with 4 keywords loaded.</arg>
<arg>test_resource library with 2 keywords loaded.</arg>
<arg>Test Libdoc File library with 1 keywords loaded.</arg>
<arg>Test Libdoc File Copy library with 1 keywords loaded.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:09:21.165" level="INFO">${ns} = {'output': 'SingleClassLib library with 4 keywords loaded.\nTest Libdoc File library with 1 keywords loaded.\ntest_resource library with 2 keywords loaded.\nTest Libdoc File Copy library with 1 keywor...</msg>
<status status="PASS" starttime="20201129 08:09:21.164" endtime="20201129 08:09:21.165"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:09:21.166" level="INFO">${clean_output} = SingleClassLib library with 4 keywords loaded. Test Libdoc File library with 1 keywords loaded. test_resource library with 2 keywords loaded. Test Libdoc File Copy library with 1 keywords loaded.  Suc...</msg>
<status status="PASS" starttime="20201129 08:09:21.165" endtime="20201129 08:09:21.166"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = SingleClassLib library with 4 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:21.166" endtime="20201129 08:09:21.167"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:21.166" endtime="20201129 08:09:21.167"></status>
</kw>
<kw name="${pattern} = test_resource library with 2 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:21.167" endtime="20201129 08:09:21.168"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:21.167" endtime="20201129 08:09:21.168"></status>
</kw>
<kw name="${pattern} = Test Libdoc File library with 1 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:21.168" endtime="20201129 08:09:21.168"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:21.168" endtime="20201129 08:09:21.168"></status>
</kw>
<kw name="${pattern} = Test Libdoc File Copy library with 1 keywords loaded." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:21.169" endtime="20201129 08:09:21.169"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:21.169" endtime="20201129 08:09:21.169"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:21.166" endtime="20201129 08:09:21.169"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:21.164" endtime="20201129 08:09:21.170"></status>
</kw>
<doc>Cli Should Update Existing Collections,
Delete Obsolete And Add New.</doc>
<tags>
<tag>rfhub2-64</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:14.534" endtime="20201129 08:09:21.170" critical="yes"></status>
</test>
<test id="s1-s2-t9" name="Cli Update Load Mode Should Leave Application With New Set Of Collections">
<kw name="Api Should Have With 7 Collections And 16 Keywords">
<kw name="collections Endpoint Should Have ${n} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:09:21.174" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:09:21.174" endtime="20201129 08:09:21.174"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:09:22.199" level="INFO">GET Request : url=http://localhost:8000/api/v1/collections/ 
 path_url=/api/v1/collections/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:09:22.199" level="INFO">GET Response : url=http://localhost:8000/api/v1/collections/ 
 status=200, reason=OK 
 body=[{"name":"LibWithEmptyInit1","type":"LIBRARY","version":"2.1.0","scope":"TEST","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\LibsWithEmptyInit\\LibWithEmptyInit1.py","doc":"Overview that should be imported for LibWithEmptyInit1.","doc_format":"ROBOT","id":1,"keywords":[{"name":"Lib With Empty Init 1 Method 1","doc":"Docstring for lib_with_empty_init_1_method_1","args":"","tags":[],"id":1,"synopsis":"Docstring for lib_with_empty_init_1_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_1_method_1&lt;/p&gt;","arg_string":""},{"name":"Lib With Empty Init 1 Method 2","doc":"Docstring for lib_with_empty_init_1_method_2","args":"","tags":[],"id":2,"synopsis":"Docstring for lib_with_empty_init_1_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_1_method_2&lt;/p&gt;","arg_string":""}],"synopsis":"Overview that should be imported for LibWithEmptyInit1.","html_doc":"&lt;p&gt;Overview that should be imported for LibWithEmptyInit1.&lt;/p&gt;"},{"name":"LibWithEmptyInit2","type":"LIBRARY","version":"1.0.0","scope":"TEST","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\LibsWithEmptyInit\\LibWithEmptyInit2.py","doc":"Overview that should be imported for LibWithEmptyInit2.","doc_format":"ROBOT","id":2,"keywords":[{"name":"Lib With Empty Init 2 Method 1","doc":"Docstring for lib_with_empty_init_2_method_1","args":"","tags":[],"id":3,"synopsis":"Docstring for lib_with_empty_init_2_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_2_method_1&lt;/p&gt;","arg_string":""},{"name":"Lib With Empty Init 2 Method 2","doc":"Docstring for lib_with_empty_init_2_method_2","args":"","tags":[],"id":4,"synopsis":"Docstring for lib_with_empty_init_2_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_2_method_2&lt;/p&gt;","arg_string":""}],"synopsis":"Overview that should be imported for LibWithEmptyInit2.","html_doc":"&lt;p&gt;Overview that should be imported for LibWithEmptyInit2.&lt;/p&gt;"},{"name":"LibWithInit","type":"LIBRARY","version":"6.6.6","scope":"GLOBAL","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\LibWithInit","doc":"This is a docstring that should be imported as overview\n\nHere goes some docs that should appear on rfhub2 if init is parametrised\n\nThe library import:\n\nExamples:\n| Library    LibWithInit   dummy=../one               # add one dummy\n| Library    LibWithInit   path=../one,/global        # add two dummies","doc_format":"ROBOT","id":3,"keywords":[{"name":"Lib With Init 1 Method 1","doc":"Docstring for lib_with_init_1_method_1","args":"","tags":[],"id":5,"synopsis":"Docstring for lib_with_init_1_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_init_1_method_1&lt;/p&gt;","arg_string":""},{"name":"Lib With Init 1 Method 2","doc":"Docstring for lib_with_init_1_method_2","args":"","tags":[],"id":6,"synopsis":"Docstring for lib_with_init_1_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_init_1_method_2&lt;/p&gt;","arg_string":""},{"name":"Lib With Init 2 Method 1","doc":"Docstring for lib_with_init_2_method_1","args":"","tags":[],"id":7,"synopsis":"Docstring for lib_with_init_2_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_init_2_method_1&lt;/p&gt;","arg_string":""},{"name":"Lib With Init 2 Method 2","doc":"Docstring for lib_with_init_2_method_2","args":"","tags":[],"id":8,"synopsis":"Docstring for lib_with_init_2_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_init_2_method_2&lt;/p&gt;","arg_string":""}],"synopsis":"This is a docstring that should be imported as overview","html_doc":"&lt;p&gt;This is a docstring that should be imported as overview&lt;/p&gt;\n&lt;p&gt;Here goes some docs that should appear on rfhub2 if init is parametrised&lt;/p&gt;\n&lt;p&gt;The library import:&lt;/p&gt;\n&lt;p&gt;Examples:&lt;/p&gt;\n&lt;pre&gt;\nLibrary    LibWithInit   dummy=../one               # add one dummy\nLibrary    LibWithInit   path=../one,/global        # add two dummies\n&lt;/pre&gt;"},{"name":"SingleClassLib","type":"LIBRARY","version":"1.2.8","scope":"TEST","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\SingleClassLib\\SingleClassLib.py","doc":"Overview that should be imported for SingleClassLib.","doc_format":"ROBOT","id":9,"keywords":[{"name":"Single Class Lib Method 1","doc":"Docstring for single_class_lib_method_1","args":"","tags":[],"id":21,"synopsis":"Docstring for single_class_lib_method_1","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_1&lt;/p&gt;","arg_string":""},{"name":"Single Class Lib Method 2","doc":"Docstring for single_class_lib_method_2","args":"","tags":[],"id":22,"synopsis":"Docstring for single_class_lib_method_2","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_2&lt;/p&gt;","arg_string":""},{"name":"Single Class Lib Method 4","doc":"Docstring for single_class_lib_method_4 with two params","args":"[\"param_1\", \"param_2\"]","tags":[],"id":23,"synopsis":"Docstring for single_class_lib_method_4 with two params","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_4 with two params&lt;/p&gt;","arg_string":"param_1, param_2"},{"name":"Single Class Lib Method 5","doc":"Docstring for single_class_lib_method_5 with two params","args":"[\"param_1\", \"param_2\"]","tags":[],"id":24,"synopsis":"Docstring for single_class_lib_method_5 with two params","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_5 with two params&lt;/p&gt;","arg_string":"param_1, param_2"}],"synopsis":"Overview that should be imported for SingleClassLib.","html_doc":"&lt;p&gt;Overview that should be imported for SingleClassLib.&lt;/p&gt;"},{"name":"Test Libdoc File","type":"LIBRARY","version":"3.2.1","scope":"GLOBAL","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\test_libdoc_file.xml","doc":"Documentation for library ``Test Libdoc File``.","doc_format":"ROBOT","id":10,"keywords":[{"name":"Someone Shall Pass","doc":"","args":"[\"who\"]","tags":[],"id":25,"synopsis":"","html_doc":"","arg_string":"who"}],"synopsis":"Documentation for library ``Test Libdoc File``.","html_doc":"&lt;p&gt;Documentation for library &lt;code&gt;Test Libdoc File&lt;/code&gt;.&lt;/p&gt;"},{"name":"Test Libdoc File Copy","type":"LIBRARY","version":"3.2.1","scope":"GLOBAL","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\test_libdoc_file_copy.xml","doc":"Documentation for library ``Test Libdoc File Copy``.","doc_format":"ROBOT","id":12,"keywords":[{"name":"Someone Shall Pass","doc":"","args":"[\"who\"]","tags":[],"id":28,"synopsis":"","html_doc":"","arg_string":"who"}],"synopsis":"Documentation for library ``Test Libdoc File Copy``.","html_doc":"&lt;p&gt;Documentation for library &lt;code&gt;Test Libdoc File Copy&lt;/code&gt;.&lt;/p&gt;"},{"name":"test_resource","type":"RESOURCE","version":"","scope":"GLOBAL","named_args":null,"path":"C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\test_resource.resource","doc":"File with .resource extension with two test keywords","doc_format":"ROBOT","id":11,"keywords":[{"name":"Keyword 1 Imported From Resource File Updated","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"","tags":[],"id":26,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":""},{"name":"Keyword 2 Imported From Resource File Updated","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"[\"arg_1\", \"arg_2\"]","tags":[],"id":27,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":"arg_1, arg_2"}],"synopsis":"File with .resource extension with two test keywords","html_doc":"&lt;p&gt;File with .resource extension with two test keywords&lt;/p&gt;"}] 
 </msg>
<msg timestamp="20201129 08:09:22.200" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:09:21.175" endtime="20201129 08:09:22.200"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:09:22.201" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:22.200" endtime="20201129 08:09:22.201"></status>
</kw>
<msg timestamp="20201129 08:09:22.202" level="INFO">${response} = [{'name': 'LibWithEmptyInit1', 'type': 'LIBRARY', 'version': '2.1.0', 'scope': 'TEST', 'named_args': None, 'path': 'C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\initial\\LibsWithE...</msg>
<status status="PASS" starttime="20201129 08:09:21.173" endtime="20201129 08:09:22.202"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:09:22.202" level="INFO">Length is 7</msg>
<status status="PASS" starttime="20201129 08:09:22.202" endtime="20201129 08:09:22.202"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:21.172" endtime="20201129 08:09:22.203"></status>
</kw>
<kw name="keywords Endpoint Should Have ${m} Items" library="keywords">
<kw name="Get Request For Endpoint" library="keywords">
<arguments>
<arg>endpoint=${endpoint}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
</arguments>
<msg timestamp="20201129 08:09:22.204" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:09:22.204" endtime="20201129 08:09:22.205"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>${endpoint}/</arg>
<arg>params=${params}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:09:23.257" level="INFO">GET Request : url=http://localhost:8000/api/v1/keywords/ 
 path_url=/api/v1/keywords/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
 body=None 
 </msg>
<msg timestamp="20201129 08:09:23.257" level="INFO">GET Response : url=http://localhost:8000/api/v1/keywords/ 
 status=200, reason=OK 
 body=[{"name":"Keyword 1 Imported From Resource File Updated","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"","tags":[],"id":26,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":"","collection":{"id":11,"name":"test_resource"}},{"name":"Keyword 2 Imported From Resource File Updated","doc":"This keyword was imported from file\nwith .resource extension, available since RFWK 3.1","args":"[\"arg_1\", \"arg_2\"]","tags":[],"id":27,"synopsis":"This keyword was imported from file","html_doc":"&lt;p&gt;This keyword was imported from file with .resource extension, available since RFWK 3.1&lt;/p&gt;","arg_string":"arg_1, arg_2","collection":{"id":11,"name":"test_resource"}},{"name":"Lib With Empty Init 1 Method 1","doc":"Docstring for lib_with_empty_init_1_method_1","args":"","tags":[],"id":1,"synopsis":"Docstring for lib_with_empty_init_1_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_1_method_1&lt;/p&gt;","arg_string":"","collection":{"id":1,"name":"LibWithEmptyInit1"}},{"name":"Lib With Empty Init 1 Method 2","doc":"Docstring for lib_with_empty_init_1_method_2","args":"","tags":[],"id":2,"synopsis":"Docstring for lib_with_empty_init_1_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_1_method_2&lt;/p&gt;","arg_string":"","collection":{"id":1,"name":"LibWithEmptyInit1"}},{"name":"Lib With Empty Init 2 Method 1","doc":"Docstring for lib_with_empty_init_2_method_1","args":"","tags":[],"id":3,"synopsis":"Docstring for lib_with_empty_init_2_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_2_method_1&lt;/p&gt;","arg_string":"","collection":{"id":2,"name":"LibWithEmptyInit2"}},{"name":"Lib With Empty Init 2 Method 2","doc":"Docstring for lib_with_empty_init_2_method_2","args":"","tags":[],"id":4,"synopsis":"Docstring for lib_with_empty_init_2_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_empty_init_2_method_2&lt;/p&gt;","arg_string":"","collection":{"id":2,"name":"LibWithEmptyInit2"}},{"name":"Lib With Init 1 Method 1","doc":"Docstring for lib_with_init_1_method_1","args":"","tags":[],"id":5,"synopsis":"Docstring for lib_with_init_1_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_init_1_method_1&lt;/p&gt;","arg_string":"","collection":{"id":3,"name":"LibWithInit"}},{"name":"Lib With Init 1 Method 2","doc":"Docstring for lib_with_init_1_method_2","args":"","tags":[],"id":6,"synopsis":"Docstring for lib_with_init_1_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_init_1_method_2&lt;/p&gt;","arg_string":"","collection":{"id":3,"name":"LibWithInit"}},{"name":"Lib With Init 2 Method 1","doc":"Docstring for lib_with_init_2_method_1","args":"","tags":[],"id":7,"synopsis":"Docstring for lib_with_init_2_method_1","html_doc":"&lt;p&gt;Docstring for lib_with_init_2_method_1&lt;/p&gt;","arg_string":"","collection":{"id":3,"name":"LibWithInit"}},{"name":"Lib With Init 2 Method 2","doc":"Docstring for lib_with_init_2_method_2","args":"","tags":[],"id":8,"synopsis":"Docstring for lib_with_init_2_method_2","html_doc":"&lt;p&gt;Docstring for lib_with_init_2_method_2&lt;/p&gt;","arg_string":"","collection":{"id":3,"name":"LibWithInit"}},{"name":"Single Class Lib Method 1","doc":"Docstring for single_class_lib_method_1","args":"","tags":[],"id":21,"synopsis":"Docstring for single_class_lib_method_1","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_1&lt;/p&gt;","arg_string":"","collection":{"id":9,"name":"SingleClassLib"}},{"name":"Single Class Lib Method 2","doc":"Docstring for single_class_lib_method_2","args":"","tags":[],"id":22,"synopsis":"Docstring for single_class_lib_method_2","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_2&lt;/p&gt;","arg_string":"","collection":{"id":9,"name":"SingleClassLib"}},{"name":"Single Class Lib Method 4","doc":"Docstring for single_class_lib_method_4 with two params","args":"[\"param_1\", \"param_2\"]","tags":[],"id":23,"synopsis":"Docstring for single_class_lib_method_4 with two params","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_4 with two params&lt;/p&gt;","arg_string":"param_1, param_2","collection":{"id":9,"name":"SingleClassLib"}},{"name":"Single Class Lib Method 5","doc":"Docstring for single_class_lib_method_5 with two params","args":"[\"param_1\", \"param_2\"]","tags":[],"id":24,"synopsis":"Docstring for single_class_lib_method_5 with two params","html_doc":"&lt;p&gt;Docstring for single_class_lib_method_5 with two params&lt;/p&gt;","arg_string":"param_1, param_2","collection":{"id":9,"name":"SingleClassLib"}},{"name":"Someone Shall Pass","doc":"","args":"[\"who\"]","tags":[],"id":25,"synopsis":"","html_doc":"","arg_string":"who","collection":{"id":10,"name":"Test Libdoc File"}},{"name":"Someone Shall Pass","doc":"","args":"[\"who\"]","tags":[],"id":28,"synopsis":"","html_doc":"","arg_string":"who","collection":{"id":12,"name":"Test Libdoc File Copy"}}] 
 </msg>
<msg timestamp="20201129 08:09:23.258" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20201129 08:09:22.205" endtime="20201129 08:09:23.258"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20201129 08:09:23.259" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:23.258" endtime="20201129 08:09:23.259"></status>
</kw>
<msg timestamp="20201129 08:09:23.260" level="INFO">${response} = [{'name': 'Keyword 1 Imported From Resource File Updated', 'doc': 'This keyword was imported from file\nwith .resource extension, available since RFWK 3.1', 'args': '', 'tags': [], 'id': 26, 'synopsis...</msg>
<status status="PASS" starttime="20201129 08:09:22.203" endtime="20201129 08:09:23.260"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${response}</arg>
<arg>${n}</arg>
</arguments>
<msg timestamp="20201129 08:09:23.260" level="INFO">Length is 16</msg>
<status status="PASS" starttime="20201129 08:09:23.260" endtime="20201129 08:09:23.261"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:22.203" endtime="20201129 08:09:23.261"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:21.172" endtime="20201129 08:09:23.261"></status>
</kw>
<doc>Cli Update Load Mode Should Leave Application
With New Set Of Collections. This test bases on
'Cli Should Update Existing Collections, Delete Obsolete And Add New'
to speed up execution</doc>
<tags>
<tag>rfhub2-64</tag>
<tag>update</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:21.171" endtime="20201129 08:09:23.261" critical="yes"></status>
</test>
<test id="s1-s2-t10" name="Running Cli Update Load Mode Second Time Should Leave Collections Untouched">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--load-mode=update --no-installed-keywords ${INITIAL_FIXTURES}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:23.412" level="INFO">Running command ' rfhub2-cli --load-mode=update --no-installed-keywords C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures/initial/ 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:26.015" level="INFO">${output} = 
Successfully loaded 0 collections with 0 keywords.</msg>
<status status="PASS" starttime="20201129 08:09:23.265" endtime="20201129 08:09:26.015"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:26.016" level="INFO">${output} = 
Successfully loaded 0 collections with 0 keywords.</msg>
<status status="PASS" starttime="20201129 08:09:26.016" endtime="20201129 08:09:26.016"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:23.264" endtime="20201129 08:09:26.017"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Successfully loaded 0 collections with 0 keywords.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:09:26.018" level="INFO">${ns} = {'output': '\nSuccessfully loaded 0 collections with 0 keywords.'}</msg>
<status status="PASS" starttime="20201129 08:09:26.018" endtime="20201129 08:09:26.018"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:09:26.019" level="INFO">${clean_output} =  Successfully loaded 0 collections with 0 keywords.</msg>
<status status="PASS" starttime="20201129 08:09:26.018" endtime="20201129 08:09:26.019"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Successfully loaded 0 collections with 0 keywords." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:26.020" endtime="20201129 08:09:26.020"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:26.019" endtime="20201129 08:09:26.020"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:26.019" endtime="20201129 08:09:26.020"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:26.017" endtime="20201129 08:09:26.020"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn" type="teardown">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Restore Initial Fixtures</arg>
<arg>AND</arg>
<arg>Run Cli Package With Options</arg>
<arg>--mode=insert --no-installed-keywords</arg>
</arguments>
<kw name="Restore Initial Fixtures" library="keywords">
<kw name="Remove Directory" library="OperatingSystem">
<doc>Removes the directory pointed to by the given ``path``.</doc>
<arguments>
<arg>${INITIAL_FIXTURES}</arg>
<arg>recursive=True</arg>
</arguments>
<msg timestamp="20201129 08:09:26.036" level="INFO" html="yes">Removed directory '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial"&gt;C:\repo\rfhub2\tests\fixtures\initial&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:09:26.022" endtime="20201129 08:09:26.036"></status>
</kw>
<kw name="Copy Directory" library="OperatingSystem">
<doc>Copies the source directory into the destination.</doc>
<arguments>
<arg>${BACKUP_FIXTURES}</arg>
<arg>${INITIAL_FIXTURES}</arg>
</arguments>
<msg timestamp="20201129 08:09:26.103" level="INFO" html="yes">Copied directory from '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial_bkp"&gt;C:\repo\rfhub2\tests\fixtures\initial_bkp&lt;/a&gt;' to '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial"&gt;C:\repo\rfhub2\tests\fixtures\initial&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:09:26.036" endtime="20201129 08:09:26.104"></status>
</kw>
<kw name="Remove Directory" library="OperatingSystem">
<doc>Removes the directory pointed to by the given ``path``.</doc>
<arguments>
<arg>${BACKUP_FIXTURES}</arg>
<arg>recursive=True</arg>
</arguments>
<msg timestamp="20201129 08:09:26.145" level="INFO" html="yes">Removed directory '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial_bkp"&gt;C:\repo\rfhub2\tests\fixtures\initial_bkp&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:09:26.104" endtime="20201129 08:09:26.146"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:26.021" endtime="20201129 08:09:26.146"></status>
</kw>
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--mode=insert --no-installed-keywords</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:26.289" level="INFO">Running command ' rfhub2-cli --mode=insert --no-installed-keywords 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:27.776" level="INFO">${output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...
Try 'rfhub2-cli --help' for help.

Error: Invalid value for '--mode' / '-m': invalid choice: insert. (choose from keywords, statistics)</msg>
<status status="PASS" starttime="20201129 08:09:26.147" endtime="20201129 08:09:27.777"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:27.777" level="INFO">${output} = Usage: rfhub2-cli [OPTIONS] [PATHS]...
Try 'rfhub2-cli --help' for help.

Error: Invalid value for '--mode' / '-m': invalid choice: insert. (choose from keywords, statistics)</msg>
<status status="PASS" starttime="20201129 08:09:27.777" endtime="20201129 08:09:27.777"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:26.146" endtime="20201129 08:09:27.778"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:26.021" endtime="20201129 08:09:27.778"></status>
</kw>
<doc>Running Cli Update Load Mode Second Time
Should Leave Collections Untouched. This test bases on
'Cli Should Update Existing Collections, Delete Obsolete And Add New'
to speed up execution</doc>
<tags>
<tag>rfhub2-64</tag>
<tag>update</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:23.263" endtime="20201129 08:09:27.778" critical="yes"></status>
</test>
<test id="s1-s2-t11" name="Running Cli In Statistics Mode Should Populate App With Execution Data">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--mode=statistics ${SUBDIR_PATH}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:27.920" level="INFO">Running command ' rfhub2-cli --mode=statistics C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures\statistics\subdir 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:30.464" level="INFO">${output} = 
Successfully loaded 1 files with 3 statistics.</msg>
<status status="PASS" starttime="20201129 08:09:27.780" endtime="20201129 08:09:30.464"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:30.465" level="INFO">${output} = 
Successfully loaded 1 files with 3 statistics.</msg>
<status status="PASS" starttime="20201129 08:09:30.464" endtime="20201129 08:09:30.465"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:27.780" endtime="20201129 08:09:30.465"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Successfully loaded 1 files with 3 statistics.</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:09:30.467" level="INFO">${ns} = {'output': '\nSuccessfully loaded 1 files with 3 statistics.'}</msg>
<status status="PASS" starttime="20201129 08:09:30.466" endtime="20201129 08:09:30.467"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:09:30.467" level="INFO">${clean_output} =  Successfully loaded 1 files with 3 statistics.</msg>
<status status="PASS" starttime="20201129 08:09:30.467" endtime="20201129 08:09:30.468"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Successfully loaded 1 files with 3 statistics." type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:30.468" endtime="20201129 08:09:30.469"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:30.468" endtime="20201129 08:09:30.469"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:30.468" endtime="20201129 08:09:30.469"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:30.465" endtime="20201129 08:09:30.469"></status>
</kw>
<doc>Running Cli In Statistics Mode
Should Populate App With Execution Data</doc>
<tags>
<tag>rfhub2-67</tag>
<tag>statistics</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:27.779" endtime="20201129 08:09:30.469" critical="yes"></status>
</test>
<test id="s1-s2-t12" name="Running Cli In Statistics Mode Should Populate App With New Execution Data">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--mode=statistics ${STATISTICS_PATH}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:30.615" level="INFO">Running command ' rfhub2-cli --mode=statistics C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures\statistics 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:33.238" level="INFO">${output} = Records already exist for file from C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures\statistics\subdir\output.xml

Successfully loaded 1 files with 42 statistics.</msg>
<status status="PASS" starttime="20201129 08:09:30.472" endtime="20201129 08:09:33.238"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:33.239" level="INFO">${output} = Records already exist for file from C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures\statistics\subdir\output.xml

Successfully loaded 1 files with 42 statistics.</msg>
<status status="PASS" starttime="20201129 08:09:33.238" endtime="20201129 08:09:33.239"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:30.471" endtime="20201129 08:09:33.239"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Successfully loaded 1 files with 42 statistics</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:09:33.241" level="INFO">${ns} = {'output': 'Records already exist for file from C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\statistics\\subdir\\output.xml\n\nSuccessfully loaded 1 files with 42 statistics.'}</msg>
<status status="PASS" starttime="20201129 08:09:33.240" endtime="20201129 08:09:33.241"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:09:33.242" level="INFO">${clean_output} = Records already exist for file from C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures\statistics\subdir\output.xml  Successfully loaded 1 files with 42 statistics.</msg>
<status status="PASS" starttime="20201129 08:09:33.241" endtime="20201129 08:09:33.242"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Successfully loaded 1 files with 42 statistics" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:33.242" endtime="20201129 08:09:33.243"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:33.242" endtime="20201129 08:09:33.243"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:33.242" endtime="20201129 08:09:33.243"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:33.239" endtime="20201129 08:09:33.243"></status>
</kw>
<kw name="Output Should Contain" library="keywords">
<doc>Fail if the output from the previous command doesn't contain the given string
This keyword assumes the output of the command is in
a test suite variable named ${output}</doc>
<arguments>
<arg>Records already exist for file from ${SUBDIR_PATH}${/}output.xml</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>output=${output}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20201129 08:09:33.244" level="INFO">${ns} = {'output': 'Records already exist for file from C:\\repo\\rfhub2\\tests\\acceptance\\resources\\..\\..\\fixtures\\statistics\\subdir\\output.xml\n\nSuccessfully loaded 1 files with 42 statistics.'}</msg>
<status status="PASS" starttime="20201129 08:09:33.244" endtime="20201129 08:09:33.244"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the result.</doc>
<arguments>
<arg>" ".join(l.strip() for l in output.splitlines())</arg>
<arg>namespace=${ns}</arg>
</arguments>
<assign>
<var>${clean_output}</var>
</assign>
<msg timestamp="20201129 08:09:33.245" level="INFO">${clean_output} = Records already exist for file from C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures\statistics\subdir\output.xml  Successfully loaded 1 files with 42 statistics.</msg>
<status status="PASS" starttime="20201129 08:09:33.245" endtime="20201129 08:09:33.245"></status>
</kw>
<kw name="${pattern} IN [ @{patterns} ]" type="for">
<kw name="${pattern} = Records already exist for file from C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures\statistics\subdir\output.xml" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'''${pattern}''' not in '''${clean_output}'''</arg>
<arg>Fail</arg>
<arg>Output did not contain '${pattern}'</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:33.246" endtime="20201129 08:09:33.246"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:33.246" endtime="20201129 08:09:33.246"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:33.245" endtime="20201129 08:09:33.246"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:33.243" endtime="20201129 08:09:33.247"></status>
</kw>
<kw name="Delete All Statistics" library="keywords" type="teardown">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>rfhub</arg>
<arg>rfhub</arg>
</arguments>
<assign>
<var>${auth}</var>
</assign>
<msg timestamp="20201129 08:09:33.248" level="INFO">${auth} = ['rfhub', 'rfhub']</msg>
<status status="PASS" starttime="20201129 08:09:33.247" endtime="20201129 08:09:33.248"></status>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>tmp</arg>
<arg>http://localhost:8000/api/v1</arg>
<arg>auth=${auth}</arg>
</arguments>
<msg timestamp="20201129 08:09:33.249" level="INFO">Creating Session using : alias=tmp, url=http://localhost:8000/api/v1, headers={},                     cookies={}, auth=&lt;requests.auth.HTTPBasicAuth object at 0x03E03E30&gt;, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20201129 08:09:33.248" endtime="20201129 08:09:33.249"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary">
<doc>Send a DELETE request on the session object found using the
given `alias`</doc>
<arguments>
<arg>tmp</arg>
<arg>statistics/keywords/all/</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20201129 08:09:34.262" level="INFO">DELETE Request : url=http://localhost:8000/api/v1/statistics/keywords/all/ 
 path_url=/api/v1/statistics/keywords/all/ 
 headers={'User-Agent': 'python-requests/2.25.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Length': '0', 'Authorization': 'Basic cmZodWI6cmZodWI='} 
 body=None 
 </msg>
<msg timestamp="20201129 08:09:34.262" level="INFO">DELETE Response : url=http://localhost:8000/api/v1/statistics/keywords/all/ 
 status=204, reason=No Content 
 body=None 
 </msg>
<msg timestamp="20201129 08:09:34.262" level="INFO">${response} = &lt;Response [204]&gt;</msg>
<status status="PASS" starttime="20201129 08:09:33.249" endtime="20201129 08:09:34.262"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>204</arg>
</arguments>
<msg timestamp="20201129 08:09:34.263" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:34.263" endtime="20201129 08:09:34.263"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:33.247" endtime="20201129 08:09:34.264"></status>
</kw>
<doc>Running Cli In Statistics Mode
Should Populate App With New Execution Data</doc>
<tags>
<tag>rfhub2-67</tag>
<tag>statistics</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:30.470" endtime="20201129 08:09:34.264" critical="yes"></status>
</test>
<status status="PASS" starttime="20201129 08:08:14.597" endtime="20201129 08:09:34.266"></status>
</suite>
<suite id="s1-s3" name="E2E" source="C:\repo\rfhub2\tests\acceptance\e2e.robot">
<kw name="Open Browser With App On Mainpage" library="e2e_keywords" type="setup">
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>url=localhost:8000</arg>
<arg>browser=gc</arg>
</arguments>
<msg timestamp="20201129 08:09:34.329" level="INFO">Opening browser 'gc' to base url 'localhost:8000'.</msg>
<status status="PASS" starttime="20201129 08:09:34.329" endtime="20201129 08:09:37.826"></status>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20201129 08:09:37.827" endtime="20201129 08:09:38.957"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:34.328" endtime="20201129 08:09:38.958"></status>
</kw>
<test id="s1-s3-t1" name="Populated App Should Show Number Of Collections">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:38.962" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:38.962" endtime="20201129 08:09:39.102"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:38.960" endtime="20201129 08:09:39.103"></status>
</kw>
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--no-installed-keywords C:\\repo\\rfhub2\\tests\\acceptance/../fixtures/initial</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:09:39.278" level="INFO">Running command ' rfhub2-cli --no-installed-keywords C:\repo\rfhub2\tests\acceptance/../fixtures/initial 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:09:42.810" level="INFO">${output} = usage: script_for_system_exit [-h] -c CONF
script_for_system_exit: error: the following arguments are required: -c/--conf
Failed to create collection from path C:\repo\rfhub2\tests\acceptance\..\fixtu...</msg>
<status status="PASS" starttime="20201129 08:09:39.104" endtime="20201129 08:09:42.810"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:09:42.811" level="INFO">${output} = usage: script_for_system_exit [-h] -c CONF
script_for_system_exit: error: the following arguments are required: -c/--conf
Failed to create collection from path C:\repo\rfhub2\tests\acceptance\..\fixtu...</msg>
<status status="PASS" starttime="20201129 08:09:42.811" endtime="20201129 08:09:42.811"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:39.103" endtime="20201129 08:09:42.812"></status>
</kw>
<kw name="Collections Count On Main Page Should Be 8" library="e2e_keywords">
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:09:42.812" endtime="20201129 08:09:42.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${n}'!='0'</arg>
<arg>Wait Until Element Is Visible</arg>
<arg>${main_page_table}</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:42.937" endtime="20201129 08:09:43.006"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:42.936" endtime="20201129 08:09:43.006"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${main_page_collection_number}</arg>
<arg>Collections (${n})</arg>
</arguments>
<msg timestamp="20201129 08:09:43.006" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/h2' contains exact text 'Collections (8)'.</msg>
<status status="PASS" starttime="20201129 08:09:43.006" endtime="20201129 08:09:43.038"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:42.812" endtime="20201129 08:09:43.039"></status>
</kw>
<tags>
<tag>e2e</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:38.958" endtime="20201129 08:09:43.039" critical="yes"></status>
</test>
<test id="s1-s3-t2" name="First Page Table Should Contain Proper Libraries Data">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:43.043" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:43.043" endtime="20201129 08:09:43.155"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.042" endtime="20201129 08:09:43.156"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>LibWithEmptyInit1</arg>
<arg>LIBRARY</arg>
<arg>2.1.0</arg>
<arg>2</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.158" endtime="20201129 08:09:43.404"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:43.405" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:43.406" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:43.405" endtime="20201129 08:09:43.406"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.407" endtime="20201129 08:09:43.494"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.407" endtime="20201129 08:09:43.494"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.494" endtime="20201129 08:09:43.573"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.494" endtime="20201129 08:09:43.573"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.574" endtime="20201129 08:09:43.662"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.574" endtime="20201129 08:09:43.662"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.406" endtime="20201129 08:09:43.662"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.156" endtime="20201129 08:09:43.662"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>LibWithEmptyInit2</arg>
<arg>LIBRARY</arg>
<arg>1.0.0</arg>
<arg>2</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.663" endtime="20201129 08:09:43.683"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:43.684" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:43.684" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:43.684" endtime="20201129 08:09:43.684"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.685" endtime="20201129 08:09:43.772"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.685" endtime="20201129 08:09:43.772"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.772" endtime="20201129 08:09:43.841"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.772" endtime="20201129 08:09:43.841"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.842" endtime="20201129 08:09:43.921"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.842" endtime="20201129 08:09:43.921"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.685" endtime="20201129 08:09:43.921"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.662" endtime="20201129 08:09:43.921"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>LibWithInit</arg>
<arg>LIBRARY</arg>
<arg>6.6.6</arg>
<arg>4</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.922" endtime="20201129 08:09:43.942"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:43.943" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:43.943" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:43.942" endtime="20201129 08:09:43.943"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:43.943" endtime="20201129 08:09:44.049"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.943" endtime="20201129 08:09:44.049"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.050" endtime="20201129 08:09:44.100"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.049" endtime="20201129 08:09:44.100"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.101" endtime="20201129 08:09:44.193"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.100" endtime="20201129 08:09:44.193"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.943" endtime="20201129 08:09:44.193"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:43.922" endtime="20201129 08:09:44.194"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>SingleClassLib</arg>
<arg>LIBRARY</arg>
<arg>1.2.3</arg>
<arg>3</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.195" endtime="20201129 08:09:44.214"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:44.215" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:44.215" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:44.214" endtime="20201129 08:09:44.215"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.216" endtime="20201129 08:09:44.331"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.215" endtime="20201129 08:09:44.332"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.332" endtime="20201129 08:09:44.390"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.332" endtime="20201129 08:09:44.390"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.391" endtime="20201129 08:09:44.497"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.390" endtime="20201129 08:09:44.497"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.215" endtime="20201129 08:09:44.497"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.194" endtime="20201129 08:09:44.497"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>Test Libdoc File</arg>
<arg>LIBRARY</arg>
<arg>3.2.0</arg>
<arg>1</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.498" endtime="20201129 08:09:44.518"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:44.519" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:44.519" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:44.519" endtime="20201129 08:09:44.519"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.520" endtime="20201129 08:09:44.650"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.520" endtime="20201129 08:09:44.651"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.651" endtime="20201129 08:09:44.699"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.651" endtime="20201129 08:09:44.700"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.700" endtime="20201129 08:09:44.822"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.700" endtime="20201129 08:09:44.822"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.519" endtime="20201129 08:09:44.822"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.498" endtime="20201129 08:09:44.822"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>test_res_lib_dir</arg>
<arg>RESOURCE</arg>
<arg>${EMPTY}</arg>
<arg>2</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.823" endtime="20201129 08:09:44.843"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:44.843" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:44.843" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:44.843" endtime="20201129 08:09:44.843"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.844" endtime="20201129 08:09:44.996"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.844" endtime="20201129 08:09:44.996"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:44.996" endtime="20201129 08:09:45.155"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.996" endtime="20201129 08:09:45.155"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:45.156" endtime="20201129 08:09:45.189"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.156" endtime="20201129 08:09:45.189"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.844" endtime="20201129 08:09:45.189"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:44.823" endtime="20201129 08:09:45.189"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>test_resource</arg>
<arg>RESOURCE</arg>
<arg>${EMPTY}</arg>
<arg>2</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:45.190" endtime="20201129 08:09:45.208"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:45.209" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:45.209" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:45.209" endtime="20201129 08:09:45.209"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:45.210" endtime="20201129 08:09:45.380"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.210" endtime="20201129 08:09:45.380"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:45.381" endtime="20201129 08:09:45.513"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.380" endtime="20201129 08:09:45.513"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:45.513" endtime="20201129 08:09:45.548"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.513" endtime="20201129 08:09:45.548"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.209" endtime="20201129 08:09:45.548"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.189" endtime="20201129 08:09:45.548"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>test_robot</arg>
<arg>RESOURCE</arg>
<arg>${EMPTY}</arg>
<arg>4</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:45.549" endtime="20201129 08:09:45.568"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:45.568" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:45.569" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:45.568" endtime="20201129 08:09:45.569"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:45.569" endtime="20201129 08:09:45.759"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.569" endtime="20201129 08:09:45.760"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:45.760" endtime="20201129 08:09:45.891"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.760" endtime="20201129 08:09:45.891"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:45.892" endtime="20201129 08:09:45.924"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.892" endtime="20201129 08:09:45.924"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.569" endtime="20201129 08:09:45.925"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.548" endtime="20201129 08:09:45.925"></status>
</kw>
<doc>This test bases on
'Populated App Should Show Number Of Collections'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:43.041" endtime="20201129 08:09:45.925" critical="yes"></status>
</test>
<test id="s1-s3-t3" name="Left Panel Should Contain Expected Libraries">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:45.928" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:45.928" endtime="20201129 08:09:46.052"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:45.927" endtime="20201129 08:09:46.052"></status>
</kw>
<kw name="Left Panel Should Contain Every Library" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:46.053" endtime="20201129 08:09:46.287"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${expected_libraries}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:46.288" level="INFO">Length is 8</msg>
<msg timestamp="20201129 08:09:46.288" level="INFO">${list_len} = 8</msg>
<status status="PASS" starttime="20201129 08:09:46.287" endtime="20201129 08:09:46.288"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${left_panel_list}/li[${i}]/div/span</arg>
<arg>${expected_libraries}[${i-1}]</arg>
</arguments>
<msg timestamp="20201129 08:09:46.289" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/li[1]/div/span' contains exact text 'LibWithEmptyInit1'.</msg>
<status status="PASS" starttime="20201129 08:09:46.288" endtime="20201129 08:09:46.317"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.288" endtime="20201129 08:09:46.317"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${left_panel_list}/li[${i}]/div/span</arg>
<arg>${expected_libraries}[${i-1}]</arg>
</arguments>
<msg timestamp="20201129 08:09:46.319" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/li[2]/div/span' contains exact text 'LibWithEmptyInit2'.</msg>
<status status="PASS" starttime="20201129 08:09:46.318" endtime="20201129 08:09:46.345"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.318" endtime="20201129 08:09:46.345"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${left_panel_list}/li[${i}]/div/span</arg>
<arg>${expected_libraries}[${i-1}]</arg>
</arguments>
<msg timestamp="20201129 08:09:46.346" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/li[3]/div/span' contains exact text 'LibWithInit'.</msg>
<status status="PASS" starttime="20201129 08:09:46.345" endtime="20201129 08:09:46.372"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.345" endtime="20201129 08:09:46.372"></status>
</kw>
<kw name="${i} = 4" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${left_panel_list}/li[${i}]/div/span</arg>
<arg>${expected_libraries}[${i-1}]</arg>
</arguments>
<msg timestamp="20201129 08:09:46.373" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/li[4]/div/span' contains exact text 'SingleClassLib'.</msg>
<status status="PASS" starttime="20201129 08:09:46.372" endtime="20201129 08:09:46.399"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.372" endtime="20201129 08:09:46.399"></status>
</kw>
<kw name="${i} = 5" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${left_panel_list}/li[${i}]/div/span</arg>
<arg>${expected_libraries}[${i-1}]</arg>
</arguments>
<msg timestamp="20201129 08:09:46.400" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/li[5]/div/span' contains exact text 'Test Libdoc File'.</msg>
<status status="PASS" starttime="20201129 08:09:46.400" endtime="20201129 08:09:46.426"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.399" endtime="20201129 08:09:46.426"></status>
</kw>
<kw name="${i} = 6" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${left_panel_list}/li[${i}]/div/span</arg>
<arg>${expected_libraries}[${i-1}]</arg>
</arguments>
<msg timestamp="20201129 08:09:46.428" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/li[6]/div/span' contains exact text 'test_res_lib_dir'.</msg>
<status status="PASS" starttime="20201129 08:09:46.427" endtime="20201129 08:09:46.458"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.427" endtime="20201129 08:09:46.458"></status>
</kw>
<kw name="${i} = 7" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${left_panel_list}/li[${i}]/div/span</arg>
<arg>${expected_libraries}[${i-1}]</arg>
</arguments>
<msg timestamp="20201129 08:09:46.459" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/li[7]/div/span' contains exact text 'test_resource'.</msg>
<status status="PASS" starttime="20201129 08:09:46.458" endtime="20201129 08:09:46.498"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.458" endtime="20201129 08:09:46.498"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.288" endtime="20201129 08:09:46.498"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.053" endtime="20201129 08:09:46.498"></status>
</kw>
<doc>This test bases on
'Populated App Should Show Number Of Collections'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:45.926" endtime="20201129 08:09:46.498" critical="yes"></status>
</test>
<test id="s1-s3-t4" name="Left Panel Should Contain Library Keywords In Alphabetical Order After Click">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:46.501" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:46.501" endtime="20201129 08:09:46.607"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.501" endtime="20201129 08:09:46.607"></status>
</kw>
<kw name="Open ${single_class_lib} In Left Panel" library="e2e_keywords">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Element Should Not Be Visible</arg>
<arg>${hamburger}</arg>
</arguments>
<assign>
<var>${is_visible}</var>
</assign>
<kw name="Element Should Not Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is NOT visible.</doc>
<arguments>
<arg>${hamburger}</arg>
</arguments>
<msg timestamp="20201129 08:09:46.656" level="INFO">Element '//*[@id="root"]/div/header/div/button/span[1]/svg/path' did not exist.</msg>
<status status="PASS" starttime="20201129 08:09:46.609" endtime="20201129 08:09:46.656"></status>
</kw>
<msg timestamp="20201129 08:09:46.656" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20201129 08:09:46.609" endtime="20201129 08:09:46.656"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${is_visible}</arg>
<arg>Click Element</arg>
<arg>${hamburger}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:46.656" endtime="20201129 08:09:46.657"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:46.657" endtime="20201129 08:09:46.688"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<msg timestamp="20201129 08:09:46.688" level="INFO">Clicking element '//*[contains(text(),"SingleClassLib")]'.</msg>
<status status="PASS" starttime="20201129 08:09:46.688" endtime="20201129 08:09:46.750"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>//*[contains(text(),'Overview')]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:46.750" endtime="20201129 08:09:47.020"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:46.608" endtime="20201129 08:09:47.020"></status>
</kw>
<kw name="Left Panel For Single Library Should Contain Expected Keywords" library="e2e_keywords">
<arguments>
<arg>@{expected_keywords}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${keywords}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:47.022" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:47.022" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:47.021" endtime="20201129 08:09:47.022"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Text Should Be</arg>
<arg>${single_class_lib_items}/a[${i+1}]/div/div</arg>
<arg>${keywords}[${i}]</arg>
</arguments>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${single_class_lib_items}/a[${i+1}]/div/div</arg>
<arg>${keywords}[${i}]</arg>
</arguments>
<msg timestamp="20201129 08:09:47.024" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/div/div/div/div/a[2]/div/div' contains exact text 'Single Class Lib Method 1'.</msg>
<status status="PASS" starttime="20201129 08:09:47.023" endtime="20201129 08:09:47.059"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:47.023" endtime="20201129 08:09:47.059"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:47.022" endtime="20201129 08:09:47.059"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Text Should Be</arg>
<arg>${single_class_lib_items}/a[${i+1}]/div/div</arg>
<arg>${keywords}[${i}]</arg>
</arguments>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${single_class_lib_items}/a[${i+1}]/div/div</arg>
<arg>${keywords}[${i}]</arg>
</arguments>
<msg timestamp="20201129 08:09:47.061" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/div/div/div/div/a[3]/div/div' contains exact text 'Single Class Lib Method 2'.</msg>
<status status="PASS" starttime="20201129 08:09:47.060" endtime="20201129 08:09:47.090"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:47.060" endtime="20201129 08:09:47.091"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:47.059" endtime="20201129 08:09:47.091"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Element Text Should Be</arg>
<arg>${single_class_lib_items}/a[${i+1}]/div/div</arg>
<arg>${keywords}[${i}]</arg>
</arguments>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${single_class_lib_items}/a[${i+1}]/div/div</arg>
<arg>${keywords}[${i}]</arg>
</arguments>
<msg timestamp="20201129 08:09:47.092" level="INFO">Verifying element '//*[@id="root"]/div/div/div/ul/div/div/div/div/a[4]/div/div' contains exact text 'Single Class Lib Method 3'.</msg>
<status status="PASS" starttime="20201129 08:09:47.091" endtime="20201129 08:09:47.120"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:47.091" endtime="20201129 08:09:47.120"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:47.091" endtime="20201129 08:09:47.120"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:47.022" endtime="20201129 08:09:47.120"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:47.020" endtime="20201129 08:09:47.120"></status>
</kw>
<doc>This test bases on
'Populated App Should Show Number Of Collections'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
<tag>regression</tag>
<tag>rfhub2-46</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:46.499" endtime="20201129 08:09:47.121" critical="yes"></status>
</test>
<test id="s1-s3-t5" name="Left Panel Keywords Should Navigate To Library Details And Show Correct Data">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:47.123" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:47.123" endtime="20201129 08:09:47.228"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:47.123" endtime="20201129 08:09:47.228"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20201129 08:09:49.229" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20201129 08:09:47.229" endtime="20201129 08:09:49.229"></status>
</kw>
<kw name="Open ${lib_with_init} In Left Panel" library="e2e_keywords">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Element Should Not Be Visible</arg>
<arg>${hamburger}</arg>
</arguments>
<assign>
<var>${is_visible}</var>
</assign>
<kw name="Element Should Not Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is NOT visible.</doc>
<arguments>
<arg>${hamburger}</arg>
</arguments>
<msg timestamp="20201129 08:09:49.255" level="INFO">Element '//*[@id="root"]/div/header/div/button/span[1]/svg/path' did not exist.</msg>
<status status="PASS" starttime="20201129 08:09:49.233" endtime="20201129 08:09:49.255"></status>
</kw>
<msg timestamp="20201129 08:09:49.255" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20201129 08:09:49.232" endtime="20201129 08:09:49.255"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${is_visible}</arg>
<arg>Click Element</arg>
<arg>${hamburger}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:49.256" endtime="20201129 08:09:49.257"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:49.258" endtime="20201129 08:09:49.290"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<msg timestamp="20201129 08:09:49.291" level="INFO">Clicking element '//*[contains(text(),"LibWithInit")]'.</msg>
<status status="PASS" starttime="20201129 08:09:49.291" endtime="20201129 08:09:49.364"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>//*[contains(text(),'Overview')]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:49.365" endtime="20201129 08:09:49.391"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:49.230" endtime="20201129 08:09:49.392"></status>
</kw>
<kw name="Click ${lib_with_init_2_method_1} In Left Panel" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${keyword}</arg>
<arg>1s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:49.393" endtime="20201129 08:09:49.664"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${keyword}</arg>
</arguments>
<msg timestamp="20201129 08:09:49.665" level="INFO">Clicking element '//*[contains(text(),"Lib With Init 2 Method 1")]'.</msg>
<status status="PASS" starttime="20201129 08:09:49.664" endtime="20201129 08:09:49.765"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_version}</arg>
</arguments>
<msg timestamp="20201129 08:09:49.843" level="INFO">Suppressing StaleElementReferenceException from Selenium.</msg>
<status status="PASS" starttime="20201129 08:09:49.765" endtime="20201129 08:09:50.064"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:49.392" endtime="20201129 08:09:50.064"></status>
</kw>
<kw name="Library title Should Be LibWithInit" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:50.065" endtime="20201129 08:09:50.093"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:50.094" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/h2[1]' contains exact text 'LibWithInit'.</msg>
<status status="PASS" starttime="20201129 08:09:50.094" endtime="20201129 08:09:50.117"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:50.064" endtime="20201129 08:09:50.118"></status>
</kw>
<kw name="Library version Should Be version: 6.6.6" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:50.119" endtime="20201129 08:09:50.138"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:50.139" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[1]' contains exact text 'version: 6.6.6'.</msg>
<status status="PASS" starttime="20201129 08:09:50.139" endtime="20201129 08:09:50.161"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:50.118" endtime="20201129 08:09:50.161"></status>
</kw>
<kw name="Library scope Should Be scope: GLOBAL" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:50.162" endtime="20201129 08:09:50.188"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:50.189" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[2]' contains exact text 'scope: GLOBAL'.</msg>
<status status="PASS" starttime="20201129 08:09:50.188" endtime="20201129 08:09:50.210"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:50.162" endtime="20201129 08:09:50.211"></status>
</kw>
<kw name="Library overview Should Be This is a docstring that should be imported as overview" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:50.212" endtime="20201129 08:09:50.237"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:50.238" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[4]/p' contains exact text 'This is a docstring that should be imported as overview'.</msg>
<status status="PASS" starttime="20201129 08:09:50.237" endtime="20201129 08:09:50.260"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:50.211" endtime="20201129 08:09:50.261"></status>
</kw>
<kw name="Library ext_docs Should Be Here goes some docs that should appear on rfhub2 if init is parametrised" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:50.262" endtime="20201129 08:09:50.287"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:50.288" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[4]/p[2]' contains exact text 'Here goes some docs that should appear on rfhub2 if init is parametrised'.</msg>
<status status="PASS" starttime="20201129 08:09:50.288" endtime="20201129 08:09:50.312"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:50.261" endtime="20201129 08:09:50.312"></status>
</kw>
<kw name="Library keywords Should Be Keywords (4)" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:50.313" endtime="20201129 08:09:50.340"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:50.340" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/h2[2]' contains exact text 'Keywords (4)'.</msg>
<status status="PASS" starttime="20201129 08:09:50.340" endtime="20201129 08:09:50.363"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:50.313" endtime="20201129 08:09:50.363"></status>
</kw>
<doc>This test bases on
'Populated App Should Show Number Of Collections'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
<tag>rfhub2-155</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:47.122" endtime="20201129 08:09:50.363" critical="yes"></status>
</test>
<test id="s1-s3-t6" name="Main Page Libraries Should Navigate To Library Details">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:50.366" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:50.366" endtime="20201129 08:09:50.473"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:50.365" endtime="20201129 08:09:50.474"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${test_libdoc_file}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:50.474" endtime="20201129 08:09:50.718"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${test_libdoc_file}</arg>
</arguments>
<msg timestamp="20201129 08:09:50.719" level="INFO">Clicking element '//a[contains(text(), "Test Libdoc File")]'.</msg>
<status status="PASS" starttime="20201129 08:09:50.719" endtime="20201129 08:09:50.777"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_version}</arg>
</arguments>
<msg timestamp="20201129 08:09:50.806" level="INFO">Suppressing StaleElementReferenceException from Selenium.</msg>
<status status="PASS" starttime="20201129 08:09:50.778" endtime="20201129 08:09:51.041"></status>
</kw>
<kw name="Library title Should Be Test Libdoc File" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:51.042" endtime="20201129 08:09:51.063"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:51.064" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/h2[1]' contains exact text 'Test Libdoc File'.</msg>
<status status="PASS" starttime="20201129 08:09:51.064" endtime="20201129 08:09:51.087"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:51.041" endtime="20201129 08:09:51.087"></status>
</kw>
<kw name="Library version Should Be version: 3.2.0" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:51.088" endtime="20201129 08:09:51.107"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:51.108" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[1]' contains exact text 'version: 3.2.0'.</msg>
<status status="PASS" starttime="20201129 08:09:51.108" endtime="20201129 08:09:51.130"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:51.088" endtime="20201129 08:09:51.131"></status>
</kw>
<kw name="Library scope Should Be scope: GLOBAL" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:51.132" endtime="20201129 08:09:51.152"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:51.153" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[2]' contains exact text 'scope: GLOBAL'.</msg>
<status status="PASS" starttime="20201129 08:09:51.152" endtime="20201129 08:09:51.175"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:51.131" endtime="20201129 08:09:51.175"></status>
</kw>
<kw name="Library overview Should Be Documentation for library Test Libdoc File." library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:51.176" endtime="20201129 08:09:51.196"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:51.197" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[4]/p' contains exact text 'Documentation for library Test Libdoc File.'.</msg>
<status status="PASS" starttime="20201129 08:09:51.196" endtime="20201129 08:09:51.219"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:51.175" endtime="20201129 08:09:51.219"></status>
</kw>
<kw name="Library keywords Should Be Keywords (1)" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:51.220" endtime="20201129 08:09:51.241"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:09:51.242" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/h2[2]' contains exact text 'Keywords (1)'.</msg>
<status status="PASS" starttime="20201129 08:09:51.241" endtime="20201129 08:09:51.263"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:51.220" endtime="20201129 08:09:51.263"></status>
</kw>
<doc>This test bases on
'Populated App Should Show Number Of Collections'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:50.364" endtime="20201129 08:09:51.263" critical="yes"></status>
</test>
<test id="s1-s3-t7" name="Search Should Return Expected Results">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:51.266" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:51.266" endtime="20201129 08:09:51.364"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:51.265" endtime="20201129 08:09:51.364"></status>
</kw>
<kw name="Search For Method Should Return Expected Values" library="e2e_keywords">
<arguments>
<arg>Method 3</arg>
<arg>1</arg>
<arg>Single Class Lib Method 3</arg>
<arg>${EMPTY}</arg>
<arg>SingleClassLib</arg>
<arg>Docstring for single_class_lib_method_3 with two params</arg>
</arguments>
<kw name="Search For" library="e2e_keywords">
<arguments>
<arg>${method}</arg>
</arguments>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:51.367" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:51.367" endtime="20201129 08:09:51.527"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:51.366" endtime="20201129 08:09:51.527"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${search_field}</arg>
<arg>${text}</arg>
</arguments>
<msg timestamp="20201129 08:09:51.528" level="INFO">Typing text 'Method 3' into text field '//*[@id="root"]/div/header/div/div/div[2]/input'.</msg>
<status status="PASS" starttime="20201129 08:09:51.528" endtime="20201129 08:09:51.802"></status>
</kw>
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:09:51.803" endtime="20201129 08:09:52.011"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20201129 08:09:52.511" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20201129 08:09:52.011" endtime="20201129 08:09:52.511"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:51.365" endtime="20201129 08:09:52.512"></status>
</kw>
<kw name="Search Results Count Should Be ${results_count}" library="e2e_keywords">
<kw name="Element ${search_result_table} Count Should Be ${n}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:09:52.548" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20201129 08:09:52.520" endtime="20201129 08:09:52.548"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<msg timestamp="20201129 08:09:52.549" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:52.549" endtime="20201129 08:09:52.549"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.514" endtime="20201129 08:09:52.550"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.512" endtime="20201129 08:09:52.550"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>@{results_data}</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:52.551" endtime="20201129 08:09:52.577"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:52.578" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:52.578" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:52.577" endtime="20201129 08:09:52.578"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:52.578" endtime="20201129 08:09:52.649"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.578" endtime="20201129 08:09:52.649"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:52.649" endtime="20201129 08:09:52.692"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.649" endtime="20201129 08:09:52.692"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:52.692" endtime="20201129 08:09:52.756"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.692" endtime="20201129 08:09:52.756"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.578" endtime="20201129 08:09:52.756"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.550" endtime="20201129 08:09:52.756"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:51.364" endtime="20201129 08:09:52.757"></status>
</kw>
<kw name="Search For Method Should Return Expected Values" library="e2e_keywords">
<arguments>
<arg>Keyword*Doub</arg>
<arg>1</arg>
<arg>Keyword With Args With Double Quotation Mark</arg>
<arg>${EMPTY}</arg>
<arg>test_robot</arg>
<arg>Keyword With Args With Double Quotation Mark</arg>
</arguments>
<kw name="Search For" library="e2e_keywords">
<arguments>
<arg>${method}</arg>
</arguments>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:52.759" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:52.759" endtime="20201129 08:09:52.859"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.758" endtime="20201129 08:09:52.860"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${search_field}</arg>
<arg>${text}</arg>
</arguments>
<msg timestamp="20201129 08:09:52.860" level="INFO">Typing text 'Keyword*Doub' into text field '//*[@id="root"]/div/header/div/div/div[2]/input'.</msg>
<status status="PASS" starttime="20201129 08:09:52.860" endtime="20201129 08:09:53.169"></status>
</kw>
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:09:53.170" endtime="20201129 08:09:53.381"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20201129 08:09:53.882" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20201129 08:09:53.381" endtime="20201129 08:09:53.882"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.758" endtime="20201129 08:09:53.882"></status>
</kw>
<kw name="Search Results Count Should Be ${results_count}" library="e2e_keywords">
<kw name="Element ${search_result_table} Count Should Be ${n}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:09:53.894" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20201129 08:09:53.884" endtime="20201129 08:09:53.894"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<msg timestamp="20201129 08:09:53.894" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:53.894" endtime="20201129 08:09:53.895"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:53.883" endtime="20201129 08:09:53.895"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:53.882" endtime="20201129 08:09:53.895"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>@{results_data}</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:53.896" endtime="20201129 08:09:53.917"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:53.917" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:53.918" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:53.917" endtime="20201129 08:09:53.918"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:53.918" endtime="20201129 08:09:53.988"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:53.918" endtime="20201129 08:09:53.988"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:53.989" endtime="20201129 08:09:54.032"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:53.989" endtime="20201129 08:09:54.032"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:54.032" endtime="20201129 08:09:54.097"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:54.032" endtime="20201129 08:09:54.097"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:53.918" endtime="20201129 08:09:54.097"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:53.895" endtime="20201129 08:09:54.097"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:52.757" endtime="20201129 08:09:54.097"></status>
</kw>
<kw name="Search For Method Should Return Expected Values" library="e2e_keywords">
<arguments>
<arg>name:Some</arg>
<arg>1</arg>
<arg>Someone Shall Pass</arg>
<arg>${EMPTY}</arg>
<arg>${EMPTY}</arg>
<arg>Test Libdoc File</arg>
</arguments>
<kw name="Search For" library="e2e_keywords">
<arguments>
<arg>${method}</arg>
</arguments>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:54.100" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:54.100" endtime="20201129 08:09:54.196"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:54.099" endtime="20201129 08:09:54.196"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${search_field}</arg>
<arg>${text}</arg>
</arguments>
<msg timestamp="20201129 08:09:54.197" level="INFO">Typing text 'name:Some' into text field '//*[@id="root"]/div/header/div/div/div[2]/input'.</msg>
<status status="PASS" starttime="20201129 08:09:54.196" endtime="20201129 08:09:54.497"></status>
</kw>
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:09:54.498" endtime="20201129 08:09:54.734"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20201129 08:09:55.235" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20201129 08:09:54.734" endtime="20201129 08:09:55.235"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:54.099" endtime="20201129 08:09:55.236"></status>
</kw>
<kw name="Search Results Count Should Be ${results_count}" library="e2e_keywords">
<kw name="Element ${search_result_table} Count Should Be ${n}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:09:55.263" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20201129 08:09:55.240" endtime="20201129 08:09:55.263"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<msg timestamp="20201129 08:09:55.265" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:55.264" endtime="20201129 08:09:55.265"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.238" endtime="20201129 08:09:55.266"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.236" endtime="20201129 08:09:55.266"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>@{results_data}</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:55.268" endtime="20201129 08:09:55.312"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:55.313" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:55.313" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:55.312" endtime="20201129 08:09:55.314"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:55.315" endtime="20201129 08:09:55.423"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.314" endtime="20201129 08:09:55.423"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:55.423" endtime="20201129 08:09:55.475"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.423" endtime="20201129 08:09:55.475"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:55.476" endtime="20201129 08:09:55.523"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.476" endtime="20201129 08:09:55.523"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.314" endtime="20201129 08:09:55.523"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.267" endtime="20201129 08:09:55.523"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:54.098" endtime="20201129 08:09:55.523"></status>
</kw>
<kw name="Search For Method Should Return Expected Values" library="e2e_keywords">
<arguments>
<arg>Some in:Te</arg>
<arg>1</arg>
<arg>Someone Shall Pass</arg>
<arg>${EMPTY}</arg>
<arg>${EMPTY}</arg>
<arg>Test Libdoc File</arg>
</arguments>
<kw name="Search For" library="e2e_keywords">
<arguments>
<arg>${method}</arg>
</arguments>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:55.526" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:55.526" endtime="20201129 08:09:55.625"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.525" endtime="20201129 08:09:55.625"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${search_field}</arg>
<arg>${text}</arg>
</arguments>
<msg timestamp="20201129 08:09:55.625" level="INFO">Typing text 'Some in:Te' into text field '//*[@id="root"]/div/header/div/div/div[2]/input'.</msg>
<status status="PASS" starttime="20201129 08:09:55.625" endtime="20201129 08:09:55.908"></status>
</kw>
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:09:55.909" endtime="20201129 08:09:56.237"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20201129 08:09:56.738" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20201129 08:09:56.238" endtime="20201129 08:09:56.738"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.525" endtime="20201129 08:09:56.739"></status>
</kw>
<kw name="Search Results Count Should Be ${results_count}" library="e2e_keywords">
<kw name="Element ${search_result_table} Count Should Be ${n}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:09:56.766" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20201129 08:09:56.743" endtime="20201129 08:09:56.767"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<msg timestamp="20201129 08:09:56.769" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:56.767" endtime="20201129 08:09:56.769"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:56.741" endtime="20201129 08:09:56.770"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:56.739" endtime="20201129 08:09:56.770"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>@{results_data}</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:56.772" endtime="20201129 08:09:56.824"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:56.826" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:56.826" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:56.825" endtime="20201129 08:09:56.826"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:56.828" endtime="20201129 08:09:56.951"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:56.827" endtime="20201129 08:09:56.951"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:56.951" endtime="20201129 08:09:56.994"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:56.951" endtime="20201129 08:09:56.994"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:56.995" endtime="20201129 08:09:57.038"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:56.994" endtime="20201129 08:09:57.038"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:56.826" endtime="20201129 08:09:57.038"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:56.771" endtime="20201129 08:09:57.038"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:55.524" endtime="20201129 08:09:57.038"></status>
</kw>
<kw name="Search For Method Should Return Expected Values" library="e2e_keywords">
<arguments>
<arg>name:Sh in:Te</arg>
<arg>1</arg>
<arg>Someone Shall Pass</arg>
<arg>${EMPTY}</arg>
<arg>${EMPTY}</arg>
<arg>Test Libdoc File</arg>
</arguments>
<kw name="Search For" library="e2e_keywords">
<arguments>
<arg>${method}</arg>
</arguments>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:57.041" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:57.041" endtime="20201129 08:09:57.147"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:57.040" endtime="20201129 08:09:57.147"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${search_field}</arg>
<arg>${text}</arg>
</arguments>
<msg timestamp="20201129 08:09:57.148" level="INFO">Typing text 'name:Sh in:Te' into text field '//*[@id="root"]/div/header/div/div/div[2]/input'.</msg>
<status status="PASS" starttime="20201129 08:09:57.148" endtime="20201129 08:09:57.474"></status>
</kw>
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:09:57.474" endtime="20201129 08:09:57.791"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20201129 08:09:58.291" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20201129 08:09:57.791" endtime="20201129 08:09:58.291"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:57.040" endtime="20201129 08:09:58.291"></status>
</kw>
<kw name="Search Results Count Should Be ${results_count}" library="e2e_keywords">
<kw name="Element ${search_result_table} Count Should Be ${n}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:09:58.306" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20201129 08:09:58.293" endtime="20201129 08:09:58.306"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<msg timestamp="20201129 08:09:58.307" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:58.306" endtime="20201129 08:09:58.307"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.292" endtime="20201129 08:09:58.307"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.291" endtime="20201129 08:09:58.307"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>@{results_data}</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:58.308" endtime="20201129 08:09:58.330"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:58.331" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:58.331" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:58.330" endtime="20201129 08:09:58.331"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:58.332" endtime="20201129 08:09:58.407"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.331" endtime="20201129 08:09:58.407"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:58.408" endtime="20201129 08:09:58.482"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.407" endtime="20201129 08:09:58.482"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:58.483" endtime="20201129 08:09:58.530"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.482" endtime="20201129 08:09:58.530"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.331" endtime="20201129 08:09:58.530"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.308" endtime="20201129 08:09:58.530"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:57.039" endtime="20201129 08:09:58.530"></status>
</kw>
<kw name="Search For Method Should Return Expected Values" library="e2e_keywords">
<arguments>
<arg>tags:tag_1</arg>
<arg>1</arg>
<arg>Single Class Lib Method 1</arg>
<arg>${EMPTY}</arg>
<arg>SingleClassLib</arg>
<arg>Docstring for single_class_lib_method_1</arg>
</arguments>
<kw name="Search For" library="e2e_keywords">
<arguments>
<arg>${method}</arg>
</arguments>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:58.533" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:58.533" endtime="20201129 08:09:58.637"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.532" endtime="20201129 08:09:58.638"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${search_field}</arg>
<arg>${text}</arg>
</arguments>
<msg timestamp="20201129 08:09:58.638" level="INFO">Typing text 'tags:tag_1' into text field '//*[@id="root"]/div/header/div/div/div[2]/input'.</msg>
<status status="PASS" starttime="20201129 08:09:58.638" endtime="20201129 08:09:59.010"></status>
</kw>
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:09:59.011" endtime="20201129 08:09:59.250"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20201129 08:09:59.751" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20201129 08:09:59.251" endtime="20201129 08:09:59.751"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.531" endtime="20201129 08:09:59.751"></status>
</kw>
<kw name="Search Results Count Should Be ${results_count}" library="e2e_keywords">
<kw name="Element ${search_result_table} Count Should Be ${n}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:09:59.763" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20201129 08:09:59.753" endtime="20201129 08:09:59.763"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<msg timestamp="20201129 08:09:59.763" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:09:59.763" endtime="20201129 08:09:59.764"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.752" endtime="20201129 08:09:59.764"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.752" endtime="20201129 08:09:59.764"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>@{results_data}</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:59.765" endtime="20201129 08:09:59.786"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:09:59.787" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:09:59.787" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:09:59.787" endtime="20201129 08:09:59.787"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:59.788" endtime="20201129 08:09:59.856"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.788" endtime="20201129 08:09:59.856"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:59.856" endtime="20201129 08:09:59.901"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.856" endtime="20201129 08:09:59.901"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:09:59.901" endtime="20201129 08:09:59.968"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.901" endtime="20201129 08:09:59.968"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.787" endtime="20201129 08:09:59.968"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.764" endtime="20201129 08:09:59.968"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:58.530" endtime="20201129 08:09:59.968"></status>
</kw>
<kw name="Search For Method Should Return Expected Values" library="e2e_keywords">
<arguments>
<arg>tags:tag in:Single</arg>
<arg>1</arg>
<arg>Single Class Lib Method 1</arg>
<arg>${EMPTY}</arg>
<arg>SingleClassLib</arg>
<arg>Docstring for single_class_lib_method_1</arg>
</arguments>
<kw name="Search For" library="e2e_keywords">
<arguments>
<arg>${method}</arg>
</arguments>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:09:59.971" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:09:59.971" endtime="20201129 08:10:00.079"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.970" endtime="20201129 08:10:00.079"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${search_field}</arg>
<arg>${text}</arg>
</arguments>
<msg timestamp="20201129 08:10:00.080" level="INFO">Typing text 'tags:tag in:Single' into text field '//*[@id="root"]/div/header/div/div/div[2]/input'.</msg>
<status status="PASS" starttime="20201129 08:10:00.080" endtime="20201129 08:10:00.526"></status>
</kw>
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:10:00.526" endtime="20201129 08:10:00.831"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20201129 08:10:01.332" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20201129 08:10:00.831" endtime="20201129 08:10:01.332"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.969" endtime="20201129 08:10:01.333"></status>
</kw>
<kw name="Search Results Count Should Be ${results_count}" library="e2e_keywords">
<kw name="Element ${search_result_table} Count Should Be ${n}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:10:01.358" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20201129 08:10:01.337" endtime="20201129 08:10:01.358"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<msg timestamp="20201129 08:10:01.360" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20201129 08:10:01.358" endtime="20201129 08:10:01.360"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.335" endtime="20201129 08:10:01.360"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.333" endtime="20201129 08:10:01.361"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>@{results_data}</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:01.363" endtime="20201129 08:10:01.406"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:10:01.407" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:10:01.407" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:10:01.406" endtime="20201129 08:10:01.407"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:01.409" endtime="20201129 08:10:01.517"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.408" endtime="20201129 08:10:01.517"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:01.518" endtime="20201129 08:10:01.568"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.517" endtime="20201129 08:10:01.569"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:01.569" endtime="20201129 08:10:01.633"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.569" endtime="20201129 08:10:01.633"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.408" endtime="20201129 08:10:01.633"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.361" endtime="20201129 08:10:01.633"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:59.969" endtime="20201129 08:10:01.633"></status>
</kw>
<doc>This test bases on
'Populated App Should Show Number Of Collections'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
<tag>rfhub2-161</tag>
<tag>tags</tag>
</tags>
<status status="PASS" starttime="20201129 08:09:51.264" endtime="20201129 08:10:01.633" critical="yes"></status>
</test>
<test id="s1-s3-t8" name="Tags Should Be Displayed On Collection Details">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:10:01.636" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:10:01.636" endtime="20201129 08:10:01.746"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.636" endtime="20201129 08:10:01.746"></status>
</kw>
<kw name="Tags Should Be Displayed For Collection" library="e2e_keywords">
<arguments>
<arg>test_robot</arg>
<arg>first_tag</arg>
<arg>second_tag</arg>
</arguments>
<kw name="Open ${${collection}} In Left Panel" library="e2e_keywords">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Element Should Not Be Visible</arg>
<arg>${hamburger}</arg>
</arguments>
<assign>
<var>${is_visible}</var>
</assign>
<kw name="Element Should Not Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is NOT visible.</doc>
<arguments>
<arg>${hamburger}</arg>
</arguments>
<msg timestamp="20201129 08:10:01.793" level="INFO">Element '//*[@id="root"]/div/header/div/button/span[1]/svg/path' did not exist.</msg>
<status status="PASS" starttime="20201129 08:10:01.749" endtime="20201129 08:10:01.794"></status>
</kw>
<msg timestamp="20201129 08:10:01.794" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20201129 08:10:01.748" endtime="20201129 08:10:01.794"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${is_visible}</arg>
<arg>Click Element</arg>
<arg>${hamburger}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:01.795" endtime="20201129 08:10:01.795"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:01.795" endtime="20201129 08:10:01.849"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<msg timestamp="20201129 08:10:01.850" level="INFO">Clicking element '//*[contains(text(),"test_robot")]'.</msg>
<status status="PASS" starttime="20201129 08:10:01.850" endtime="20201129 08:10:01.917"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>//*[contains(text(),'Overview')]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:01.918" endtime="20201129 08:10:02.181"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.747" endtime="20201129 08:10:02.182"></status>
</kw>
<kw name="Click ${${collection}_keyword_1} In Left Panel" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${keyword}</arg>
<arg>1s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:02.183" endtime="20201129 08:10:02.210"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${keyword}</arg>
</arguments>
<msg timestamp="20201129 08:10:02.211" level="INFO">Clicking element '//*[contains(text(),"Keyword 1 Imported From Robot")]'.</msg>
<status status="PASS" starttime="20201129 08:10:02.210" endtime="20201129 08:10:02.279"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_version}</arg>
</arguments>
<msg timestamp="20201129 08:10:02.341" level="INFO">Suppressing StaleElementReferenceException from Selenium.</msg>
<status status="PASS" starttime="20201129 08:10:02.279" endtime="20201129 08:10:02.567"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:02.182" endtime="20201129 08:10:02.568"></status>
</kw>
<kw name="Check If Tags Are Displayed Correctly" library="e2e_keywords">
<arguments>
<arg>main</arg>
<arg>@{tags}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${tags}</arg>
</arguments>
<assign>
<var>${tags_count}</var>
</assign>
<msg timestamp="20201129 08:10:02.569" level="INFO">Length is 2</msg>
<msg timestamp="20201129 08:10:02.569" level="INFO">${tags_count} = 2</msg>
<status status="PASS" starttime="20201129 08:10:02.569" endtime="20201129 08:10:02.569"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div</arg>
<arg>5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:02.569" endtime="20201129 08:10:02.597"></status>
</kw>
<kw name="Element ${${table}_page_table_tag_column}/div Count Should Be ${tags_count}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:10:02.607" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20201129 08:10:02.598" endtime="20201129 08:10:02.607"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:02.608" endtime="20201129 08:10:02.608"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:02.598" endtime="20201129 08:10:02.608"></status>
</kw>
<kw name="${i} | ${tag} IN ENUMERATE [ @{tags} ]" type="for">
<kw name="${i} = 0, ${tag} = first_tag" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div[${i+1}]/span</arg>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20201129 08:10:02.610" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/table/tbody/tr[1]/td[3]/div[1]/span' contains exact text 'first_tag'.</msg>
<status status="PASS" starttime="20201129 08:10:02.609" endtime="20201129 08:10:02.637"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:02.609" endtime="20201129 08:10:02.637"></status>
</kw>
<kw name="${i} = 1, ${tag} = second_tag" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div[${i+1}]/span</arg>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20201129 08:10:02.638" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/table/tbody/tr[1]/td[3]/div[2]/span' contains exact text 'second_tag'.</msg>
<status status="PASS" starttime="20201129 08:10:02.638" endtime="20201129 08:10:02.666"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:02.637" endtime="20201129 08:10:02.666"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:02.608" endtime="20201129 08:10:02.666"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:02.568" endtime="20201129 08:10:02.666"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:01.747" endtime="20201129 08:10:02.666"></status>
</kw>
<kw name="Tags Should Be Displayed For Collection" library="e2e_keywords">
<arguments>
<arg>SingleClassLib</arg>
<arg>tag_1</arg>
<arg>tag_2</arg>
</arguments>
<kw name="Open ${${collection}} In Left Panel" library="e2e_keywords">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Element Should Not Be Visible</arg>
<arg>${hamburger}</arg>
</arguments>
<assign>
<var>${is_visible}</var>
</assign>
<kw name="Element Should Not Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is NOT visible.</doc>
<arguments>
<arg>${hamburger}</arg>
</arguments>
<msg timestamp="20201129 08:10:02.677" level="INFO">Element '//*[@id="root"]/div/header/div/button/span[1]/svg/path' did not exist.</msg>
<status status="PASS" starttime="20201129 08:10:02.668" endtime="20201129 08:10:02.677"></status>
</kw>
<msg timestamp="20201129 08:10:02.677" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20201129 08:10:02.668" endtime="20201129 08:10:02.677"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${is_visible}</arg>
<arg>Click Element</arg>
<arg>${hamburger}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:02.677" endtime="20201129 08:10:02.678"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:02.678" endtime="20201129 08:10:02.704"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<msg timestamp="20201129 08:10:02.705" level="INFO">Clicking element '//*[contains(text(),"SingleClassLib")]'.</msg>
<status status="PASS" starttime="20201129 08:10:02.704" endtime="20201129 08:10:02.767"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>//*[contains(text(),'Overview')]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:02.767" endtime="20201129 08:10:03.029"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:02.667" endtime="20201129 08:10:03.030"></status>
</kw>
<kw name="Click ${${collection}_keyword_1} In Left Panel" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${keyword}</arg>
<arg>1s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:03.031" endtime="20201129 08:10:03.063"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${keyword}</arg>
</arguments>
<msg timestamp="20201129 08:10:03.064" level="INFO">Clicking element '//*[contains(text(),"Single Class Lib Method 1")]'.</msg>
<status status="PASS" starttime="20201129 08:10:03.064" endtime="20201129 08:10:03.138"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_version}</arg>
</arguments>
<msg timestamp="20201129 08:10:03.183" level="INFO">Suppressing StaleElementReferenceException from Selenium.</msg>
<status status="PASS" starttime="20201129 08:10:03.138" endtime="20201129 08:10:03.433"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.030" endtime="20201129 08:10:03.434"></status>
</kw>
<kw name="Check If Tags Are Displayed Correctly" library="e2e_keywords">
<arguments>
<arg>main</arg>
<arg>@{tags}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${tags}</arg>
</arguments>
<assign>
<var>${tags_count}</var>
</assign>
<msg timestamp="20201129 08:10:03.437" level="INFO">Length is 2</msg>
<msg timestamp="20201129 08:10:03.438" level="INFO">${tags_count} = 2</msg>
<status status="PASS" starttime="20201129 08:10:03.436" endtime="20201129 08:10:03.438"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div</arg>
<arg>5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:03.438" endtime="20201129 08:10:03.490"></status>
</kw>
<kw name="Element ${${table}_page_table_tag_column}/div Count Should Be ${tags_count}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:10:03.514" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20201129 08:10:03.493" endtime="20201129 08:10:03.514"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:03.516" endtime="20201129 08:10:03.518"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.491" endtime="20201129 08:10:03.519"></status>
</kw>
<kw name="${i} | ${tag} IN ENUMERATE [ @{tags} ]" type="for">
<kw name="${i} = 0, ${tag} = tag_1" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div[${i+1}]/span</arg>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20201129 08:10:03.522" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/table/tbody/tr[1]/td[3]/div[1]/span' contains exact text 'tag_1'.</msg>
<status status="PASS" starttime="20201129 08:10:03.520" endtime="20201129 08:10:03.559"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.520" endtime="20201129 08:10:03.560"></status>
</kw>
<kw name="${i} = 1, ${tag} = tag_2" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div[${i+1}]/span</arg>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20201129 08:10:03.561" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/table/tbody/tr[1]/td[3]/div[2]/span' contains exact text 'tag_2'.</msg>
<status status="PASS" starttime="20201129 08:10:03.560" endtime="20201129 08:10:03.593"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.560" endtime="20201129 08:10:03.593"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.519" endtime="20201129 08:10:03.594"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.434" endtime="20201129 08:10:03.594"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:02.666" endtime="20201129 08:10:03.594"></status>
</kw>
<doc>This test bases on
'Populated App Should Show Number Of Collections'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
<tag>rfhub2-161</tag>
<tag>tags</tag>
</tags>
<status status="PASS" starttime="20201129 08:10:01.634" endtime="20201129 08:10:03.594" critical="yes"></status>
</test>
<test id="s1-s3-t9" name="Tags Should Be Displayed On Search Results">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:10:03.598" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:10:03.598" endtime="20201129 08:10:03.707"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.597" endtime="20201129 08:10:03.707"></status>
</kw>
<kw name="Tags Should Be Displayed For Search Results" library="e2e_keywords">
<arguments>
<arg>tags:first_tag</arg>
<arg>first_tag</arg>
</arguments>
<kw name="Search For" library="e2e_keywords">
<arguments>
<arg>${search_string}</arg>
</arguments>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:10:03.709" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:10:03.709" endtime="20201129 08:10:03.807"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.708" endtime="20201129 08:10:03.808"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${search_field}</arg>
<arg>${text}</arg>
</arguments>
<msg timestamp="20201129 08:10:03.808" level="INFO">Typing text 'tags:first_tag' into text field '//*[@id="root"]/div/header/div/div/div[2]/input'.</msg>
<status status="PASS" starttime="20201129 08:10:03.808" endtime="20201129 08:10:04.192"></status>
</kw>
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:10:04.193" endtime="20201129 08:10:04.534"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20201129 08:10:05.035" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20201129 08:10:04.534" endtime="20201129 08:10:05.035"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.708" endtime="20201129 08:10:05.036"></status>
</kw>
<kw name="Check If Tags Are Displayed Correctly" library="e2e_keywords">
<arguments>
<arg>search</arg>
<arg>@{tags}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${tags}</arg>
</arguments>
<assign>
<var>${tags_count}</var>
</assign>
<msg timestamp="20201129 08:10:05.037" level="INFO">Length is 1</msg>
<msg timestamp="20201129 08:10:05.038" level="INFO">${tags_count} = 1</msg>
<status status="PASS" starttime="20201129 08:10:05.037" endtime="20201129 08:10:05.038"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div</arg>
<arg>5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:05.038" endtime="20201129 08:10:05.073"></status>
</kw>
<kw name="Element ${${table}_page_table_tag_column}/div Count Should Be ${tags_count}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:10:05.083" level="INFO">${count} = 1</msg>
<status status="PASS" starttime="20201129 08:10:05.075" endtime="20201129 08:10:05.083"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:05.084" endtime="20201129 08:10:05.084"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:05.073" endtime="20201129 08:10:05.084"></status>
</kw>
<kw name="${i} | ${tag} IN ENUMERATE [ @{tags} ]" type="for">
<kw name="${i} = 0, ${tag} = first_tag" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div[${i+1}]/span</arg>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20201129 08:10:05.086" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/table/tbody/tr[1]/td[2]/div[1]/span' contains exact text 'first_tag'.</msg>
<status status="PASS" starttime="20201129 08:10:05.085" endtime="20201129 08:10:05.113"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:05.085" endtime="20201129 08:10:05.113"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:05.085" endtime="20201129 08:10:05.113"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:05.036" endtime="20201129 08:10:05.113"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:03.707" endtime="20201129 08:10:05.113"></status>
</kw>
<kw name="Tags Should Be Displayed For Search Results" library="e2e_keywords">
<arguments>
<arg>tags:tag in:Single</arg>
<arg>tag_1</arg>
<arg>tag_2</arg>
</arguments>
<kw name="Search For" library="e2e_keywords">
<arguments>
<arg>${search_string}</arg>
</arguments>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:10:05.115" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:10:05.115" endtime="20201129 08:10:05.206"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:05.115" endtime="20201129 08:10:05.207"></status>
</kw>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${search_field}</arg>
<arg>${text}</arg>
</arguments>
<msg timestamp="20201129 08:10:05.207" level="INFO">Typing text 'tags:tag in:Single' into text field '//*[@id="root"]/div/header/div/div/div[2]/input'.</msg>
<status status="PASS" starttime="20201129 08:10:05.207" endtime="20201129 08:10:05.557"></status>
</kw>
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:10:05.557" endtime="20201129 08:10:05.972"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20201129 08:10:06.475" level="INFO">Slept 500 milliseconds</msg>
<status status="PASS" starttime="20201129 08:10:05.973" endtime="20201129 08:10:06.476"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:05.114" endtime="20201129 08:10:06.476"></status>
</kw>
<kw name="Check If Tags Are Displayed Correctly" library="e2e_keywords">
<arguments>
<arg>search</arg>
<arg>@{tags}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${tags}</arg>
</arguments>
<assign>
<var>${tags_count}</var>
</assign>
<msg timestamp="20201129 08:10:06.477" level="INFO">Length is 2</msg>
<msg timestamp="20201129 08:10:06.477" level="INFO">${tags_count} = 2</msg>
<status status="PASS" starttime="20201129 08:10:06.477" endtime="20201129 08:10:06.478"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div</arg>
<arg>5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:06.478" endtime="20201129 08:10:06.503"></status>
</kw>
<kw name="Element ${${table}_page_table_tag_column}/div Count Should Be ${tags_count}" library="e2e_keywords">
<kw name="Get Element Count" library="SeleniumLibrary">
<doc>Returns the number of elements matching ``locator``.</doc>
<arguments>
<arg>${element}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20201129 08:10:06.512" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20201129 08:10:06.504" endtime="20201129 08:10:06.512"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${count}</arg>
<arg>${n}</arg>
<arg>Element count should be ${n} but is ${count}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:06.513" endtime="20201129 08:10:06.513"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:06.503" endtime="20201129 08:10:06.513"></status>
</kw>
<kw name="${i} | ${tag} IN ENUMERATE [ @{tags} ]" type="for">
<kw name="${i} = 0, ${tag} = tag_1" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div[${i+1}]/span</arg>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20201129 08:10:06.515" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/table/tbody/tr[1]/td[2]/div[1]/span' contains exact text 'tag_1'.</msg>
<status status="PASS" starttime="20201129 08:10:06.514" endtime="20201129 08:10:06.539"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:06.514" endtime="20201129 08:10:06.539"></status>
</kw>
<kw name="${i} = 1, ${tag} = tag_2" type="foritem">
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${${table}_page_table_tag_column}/div[${i+1}]/span</arg>
<arg>${tag}</arg>
</arguments>
<msg timestamp="20201129 08:10:06.540" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/table/tbody/tr[1]/td[2]/div[2]/span' contains exact text 'tag_2'.</msg>
<status status="PASS" starttime="20201129 08:10:06.539" endtime="20201129 08:10:06.567"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:06.539" endtime="20201129 08:10:06.567"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:06.514" endtime="20201129 08:10:06.567"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:06.476" endtime="20201129 08:10:06.567"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:05.114" endtime="20201129 08:10:06.567"></status>
</kw>
<doc>This test bases on
'Populated App Should Show Number Of Collections'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
<tag>rfhub2-161</tag>
<tag>tags</tag>
</tags>
<status status="PASS" starttime="20201129 08:10:03.596" endtime="20201129 08:10:06.567" critical="yes"></status>
</test>
<test id="s1-s3-t10" name="First Page Table After Update Should Contain Proper Libraries Data">
<kw name="Test Setup For Collections Update" type="setup">
<kw name="Run Cli Package Without Installed Keywords" library="keywords">
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--no-installed-keywords ${INITIAL_FIXTURES}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:10:06.717" level="INFO">Running command ' rfhub2-cli --no-installed-keywords C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures/initial/ 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:10:10.428" level="INFO">${output} = usage: script_for_system_exit [-h] -c CONF
script_for_system_exit: error: the following arguments are required: -c/--conf
Failed to create collection from path C:\repo\rfhub2\tests\acceptance\resource...</msg>
<status status="PASS" starttime="20201129 08:10:06.571" endtime="20201129 08:10:10.428"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:10:10.429" level="INFO">${output} = usage: script_for_system_exit [-h] -c CONF
script_for_system_exit: error: the following arguments are required: -c/--conf
Failed to create collection from path C:\repo\rfhub2\tests\acceptance\resource...</msg>
<status status="PASS" starttime="20201129 08:10:10.428" endtime="20201129 08:10:10.429"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:06.571" endtime="20201129 08:10:10.429"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:06.570" endtime="20201129 08:10:10.429"></status>
</kw>
<kw name="Backup And Switch Initial With Updated Fixtures" library="keywords">
<kw name="Move Directory" library="OperatingSystem">
<doc>Moves the source directory into a destination.</doc>
<arguments>
<arg>${INITIAL_FIXTURES}</arg>
<arg>${BACKUP_FIXTURES}</arg>
</arguments>
<msg timestamp="20201129 08:10:10.433" level="INFO" html="yes">Moved directory from '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial"&gt;C:\repo\rfhub2\tests\fixtures\initial&lt;/a&gt;' to '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial_bkp"&gt;C:\repo\rfhub2\tests\fixtures\initial_bkp&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:10:10.430" endtime="20201129 08:10:10.434"></status>
</kw>
<kw name="Copy Directory" library="OperatingSystem">
<doc>Copies the source directory into the destination.</doc>
<arguments>
<arg>${UPDATED_FIXTURES}</arg>
<arg>${INITIAL_FIXTURES}</arg>
</arguments>
<msg timestamp="20201129 08:10:10.478" level="INFO" html="yes">Copied directory from '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\updated"&gt;C:\repo\rfhub2\tests\fixtures\updated&lt;/a&gt;' to '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial"&gt;C:\repo\rfhub2\tests\fixtures\initial&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:10:10.434" endtime="20201129 08:10:10.479"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:10.430" endtime="20201129 08:10:10.479"></status>
</kw>
<kw name="Run Cli Package With Options" library="keywords">
<doc>Attempt to run the rfhub2-cli package with the given options
The stdout of the process will be in a test suite
variable named ${output}</doc>
<arguments>
<arg>--load-mode=update --no-installed-keywords ${INITIAL_FIXTURES}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>${ACTIVATE_VENV} rfhub2-cli ${options}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20201129 08:10:10.620" level="INFO">Running command ' rfhub2-cli --load-mode=update --no-installed-keywords C:\repo\rfhub2\tests\acceptance\resources\..\..\fixtures/initial/ 2&gt;&amp;1'.</msg>
<msg timestamp="20201129 08:10:13.502" level="INFO">${output} = SingleClassLib library with 4 keywords loaded.
Test Libdoc File library with 1 keywords loaded.
test_resource library with 2 keywords loaded.
Test Libdoc File Copy library with 1 keywords loaded.

Suc...</msg>
<status status="PASS" starttime="20201129 08:10:10.480" endtime="20201129 08:10:13.502"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20201129 08:10:13.503" level="INFO">${output} = SingleClassLib library with 4 keywords loaded.
Test Libdoc File library with 1 keywords loaded.
test_resource library with 2 keywords loaded.
Test Libdoc File Copy library with 1 keywords loaded.

Suc...</msg>
<status status="PASS" starttime="20201129 08:10:13.502" endtime="20201129 08:10:13.503"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:10.479" endtime="20201129 08:10:13.503"></status>
</kw>
<kw name="Navigate To Main Page" library="e2e_keywords">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:10:13.504" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:10:13.504" endtime="20201129 08:10:13.621"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:13.503" endtime="20201129 08:10:13.622"></status>
</kw>
<kw name="Collections Count On Main Page Should Be 7" library="e2e_keywords">
<kw name="Reload Page" library="SeleniumLibrary">
<doc>Simulates user reloading page.</doc>
<status status="PASS" starttime="20201129 08:10:13.623" endtime="20201129 08:10:13.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${n}'!='0'</arg>
<arg>Wait Until Element Is Visible</arg>
<arg>${main_page_table}</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:13.906" endtime="20201129 08:10:14.165"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:13.905" endtime="20201129 08:10:14.166"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${main_page_collection_number}</arg>
<arg>Collections (${n})</arg>
</arguments>
<msg timestamp="20201129 08:10:14.166" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/h2' contains exact text 'Collections (7)'.</msg>
<status status="PASS" starttime="20201129 08:10:14.166" endtime="20201129 08:10:14.193"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:13.622" endtime="20201129 08:10:14.194"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:06.570" endtime="20201129 08:10:14.194"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>LibWithEmptyInit1</arg>
<arg>LIBRARY</arg>
<arg>2.1.0</arg>
<arg>2</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.195" endtime="20201129 08:10:14.219"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:10:14.220" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:10:14.220" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:10:14.219" endtime="20201129 08:10:14.220"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.221" endtime="20201129 08:10:14.290"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.220" endtime="20201129 08:10:14.290"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.290" endtime="20201129 08:10:14.358"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.290" endtime="20201129 08:10:14.358"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.359" endtime="20201129 08:10:14.426"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.358" endtime="20201129 08:10:14.426"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.220" endtime="20201129 08:10:14.426"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.194" endtime="20201129 08:10:14.426"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>LibWithEmptyInit2</arg>
<arg>LIBRARY</arg>
<arg>1.0.0</arg>
<arg>2</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.427" endtime="20201129 08:10:14.447"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:10:14.448" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:10:14.448" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:10:14.447" endtime="20201129 08:10:14.448"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.449" endtime="20201129 08:10:14.557"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.448" endtime="20201129 08:10:14.557"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.558" endtime="20201129 08:10:14.609"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.557" endtime="20201129 08:10:14.609"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.610" endtime="20201129 08:10:14.683"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.610" endtime="20201129 08:10:14.683"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.448" endtime="20201129 08:10:14.683"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.427" endtime="20201129 08:10:14.683"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>LibWithInit</arg>
<arg>LIBRARY</arg>
<arg>6.6.6</arg>
<arg>4</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.684" endtime="20201129 08:10:14.703"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:10:14.704" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:10:14.704" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:10:14.704" endtime="20201129 08:10:14.704"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.705" endtime="20201129 08:10:14.799"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.705" endtime="20201129 08:10:14.799"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.800" endtime="20201129 08:10:14.850"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.799" endtime="20201129 08:10:14.850"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.850" endtime="20201129 08:10:14.939"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.850" endtime="20201129 08:10:14.939"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.704" endtime="20201129 08:10:14.939"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.684" endtime="20201129 08:10:14.939"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>SingleClassLib</arg>
<arg>LIBRARY</arg>
<arg>1.2.8</arg>
<arg>4</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.940" endtime="20201129 08:10:14.960"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:10:14.961" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:10:14.961" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:10:14.961" endtime="20201129 08:10:14.961"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:14.962" endtime="20201129 08:10:15.093"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.962" endtime="20201129 08:10:15.093"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.094" endtime="20201129 08:10:15.143"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.093" endtime="20201129 08:10:15.143"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.144" endtime="20201129 08:10:15.248"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.144" endtime="20201129 08:10:15.248"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.961" endtime="20201129 08:10:15.248"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:14.939" endtime="20201129 08:10:15.248"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>Test Libdoc File</arg>
<arg>LIBRARY</arg>
<arg>3.2.1</arg>
<arg>1</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.249" endtime="20201129 08:10:15.270"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:10:15.273" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:10:15.273" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:10:15.271" endtime="20201129 08:10:15.273"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.275" endtime="20201129 08:10:15.421"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.274" endtime="20201129 08:10:15.421"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.421" endtime="20201129 08:10:15.472"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.421" endtime="20201129 08:10:15.472"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.472" endtime="20201129 08:10:15.603"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.472" endtime="20201129 08:10:15.603"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.273" endtime="20201129 08:10:15.603"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.248" endtime="20201129 08:10:15.604"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>Test Libdoc File Copy</arg>
<arg>LIBRARY</arg>
<arg>3.2.1</arg>
<arg>1</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.605" endtime="20201129 08:10:15.624"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:10:15.624" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:10:15.625" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:10:15.624" endtime="20201129 08:10:15.625"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.625" endtime="20201129 08:10:15.779"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.625" endtime="20201129 08:10:15.779"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.780" endtime="20201129 08:10:15.830"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.779" endtime="20201129 08:10:15.830"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.831" endtime="20201129 08:10:15.975"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.830" endtime="20201129 08:10:15.975"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.625" endtime="20201129 08:10:15.975"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.604" endtime="20201129 08:10:15.975"></status>
</kw>
<kw name="Table Should Contain Library Data" library="e2e_keywords">
<arguments>
<arg>test_resource</arg>
<arg>RESOURCE</arg>
<arg>${EMPTY}</arg>
<arg>2</arg>
</arguments>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${main_page_table}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.976" endtime="20201129 08:10:15.997"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${Library_data}</arg>
</arguments>
<assign>
<var>${list_len}</var>
</assign>
<msg timestamp="20201129 08:10:15.998" level="INFO">Length is 4</msg>
<msg timestamp="20201129 08:10:15.998" level="INFO">${list_len} = 4</msg>
<status status="PASS" starttime="20201129 08:10:15.997" endtime="20201129 08:10:15.998"></status>
</kw>
<kw name="${i} IN RANGE [ 1 | ${list_len} ]" type="for">
<kw name="${i} = 1" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:15.999" endtime="20201129 08:10:16.171"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.998" endtime="20201129 08:10:16.171"></status>
</kw>
<kw name="${i} = 2" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:16.172" endtime="20201129 08:10:16.358"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:16.171" endtime="20201129 08:10:16.358"></status>
</kw>
<kw name="${i} = 3" type="foritem">
<kw name="Table Column Should Contain" library="SeleniumLibrary">
<doc>Verifies table column contains text ``expected``.</doc>
<arguments>
<arg>${main_page_table}</arg>
<arg>${i}</arg>
<arg>${Library_data}[${i-1}]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:16.358" endtime="20201129 08:10:16.391"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:16.358" endtime="20201129 08:10:16.391"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.998" endtime="20201129 08:10:16.391"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:15.975" endtime="20201129 08:10:16.392"></status>
</kw>
<kw name="Restore Initial Fixtures" library="keywords" type="teardown">
<kw name="Remove Directory" library="OperatingSystem">
<doc>Removes the directory pointed to by the given ``path``.</doc>
<arguments>
<arg>${INITIAL_FIXTURES}</arg>
<arg>recursive=True</arg>
</arguments>
<msg timestamp="20201129 08:10:16.408" level="INFO" html="yes">Removed directory '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial"&gt;C:\repo\rfhub2\tests\fixtures\initial&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:10:16.393" endtime="20201129 08:10:16.408"></status>
</kw>
<kw name="Copy Directory" library="OperatingSystem">
<doc>Copies the source directory into the destination.</doc>
<arguments>
<arg>${BACKUP_FIXTURES}</arg>
<arg>${INITIAL_FIXTURES}</arg>
</arguments>
<msg timestamp="20201129 08:10:16.474" level="INFO" html="yes">Copied directory from '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial_bkp"&gt;C:\repo\rfhub2\tests\fixtures\initial_bkp&lt;/a&gt;' to '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial"&gt;C:\repo\rfhub2\tests\fixtures\initial&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:10:16.408" endtime="20201129 08:10:16.475"></status>
</kw>
<kw name="Remove Directory" library="OperatingSystem">
<doc>Removes the directory pointed to by the given ``path``.</doc>
<arguments>
<arg>${BACKUP_FIXTURES}</arg>
<arg>recursive=True</arg>
</arguments>
<msg timestamp="20201129 08:10:16.511" level="INFO" html="yes">Removed directory '&lt;a href="file://C:\repo\rfhub2\tests\fixtures\initial_bkp"&gt;C:\repo\rfhub2\tests\fixtures\initial_bkp&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20201129 08:10:16.475" endtime="20201129 08:10:16.511"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:16.392" endtime="20201129 08:10:16.511"></status>
</kw>
<doc>This test bases on
'Populated App Should Show Number Of Collections'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
<tag>rfhub2-64</tag>
<tag>update</tag>
</tags>
<status status="PASS" starttime="20201129 08:10:06.568" endtime="20201129 08:10:16.511" critical="yes"></status>
</test>
<test id="s1-s3-t11" name="Single Class Library Details Should Be Updated On Frontend">
<kw name="Navigate To Main Page" library="e2e_keywords" type="setup">
<kw name="Go To" library="SeleniumLibrary">
<doc>Navigates the current browser window to the provided ``url``.</doc>
<arguments>
<arg>localhost:8000</arg>
</arguments>
<msg timestamp="20201129 08:10:16.514" level="INFO">Opening url 'localhost:8000'</msg>
<status status="PASS" starttime="20201129 08:10:16.514" endtime="20201129 08:10:16.627"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:16.514" endtime="20201129 08:10:16.628"></status>
</kw>
<kw name="Open ${single_class_lib} In Left Panel" library="e2e_keywords">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Element Should Not Be Visible</arg>
<arg>${hamburger}</arg>
</arguments>
<assign>
<var>${is_visible}</var>
</assign>
<kw name="Element Should Not Be Visible" library="SeleniumLibrary">
<doc>Verifies that the element identified by ``locator`` is NOT visible.</doc>
<arguments>
<arg>${hamburger}</arg>
</arguments>
<msg timestamp="20201129 08:10:16.695" level="INFO">Element '//*[@id="root"]/div/header/div/button/span[1]/svg/path' did not exist.</msg>
<status status="PASS" starttime="20201129 08:10:16.630" endtime="20201129 08:10:16.696"></status>
</kw>
<msg timestamp="20201129 08:10:16.696" level="INFO">${is_visible} = True</msg>
<status status="PASS" starttime="20201129 08:10:16.629" endtime="20201129 08:10:16.696"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${is_visible}</arg>
<arg>Click Element</arg>
<arg>${hamburger}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:16.696" endtime="20201129 08:10:16.697"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:16.697" endtime="20201129 08:10:16.724"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${library}</arg>
</arguments>
<msg timestamp="20201129 08:10:16.725" level="INFO">Clicking element '//*[contains(text(),"SingleClassLib")]'.</msg>
<status status="PASS" starttime="20201129 08:10:16.725" endtime="20201129 08:10:16.788"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>//*[contains(text(),'Overview')]</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:16.788" endtime="20201129 08:10:17.042"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:16.628" endtime="20201129 08:10:17.042"></status>
</kw>
<kw name="Click ${overview} In Left Panel" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${keyword}</arg>
<arg>1s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:17.043" endtime="20201129 08:10:17.068"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${keyword}</arg>
</arguments>
<msg timestamp="20201129 08:10:17.068" level="INFO">Clicking element '//*[contains(text(),"Overview")]'.</msg>
<status status="PASS" starttime="20201129 08:10:17.068" endtime="20201129 08:10:17.131"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_version}</arg>
</arguments>
<msg timestamp="20201129 08:10:17.166" level="INFO">Suppressing StaleElementReferenceException from Selenium.</msg>
<status status="PASS" starttime="20201129 08:10:17.132" endtime="20201129 08:10:17.397"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:17.042" endtime="20201129 08:10:17.398"></status>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<doc>Click the element identified by ``locator``.</doc>
<arguments>
<arg>${single_class_lib}</arg>
</arguments>
<msg timestamp="20201129 08:10:17.399" level="INFO">Clicking element '//*[contains(text(),"SingleClassLib")]'.</msg>
<status status="PASS" starttime="20201129 08:10:17.398" endtime="20201129 08:10:17.448"></status>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_version}</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:17.448" endtime="20201129 08:10:17.470"></status>
</kw>
<kw name="Library title Should Be SingleClassLib" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:17.471" endtime="20201129 08:10:17.496"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:10:17.497" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/h2[1]' contains exact text 'SingleClassLib'.</msg>
<status status="PASS" starttime="20201129 08:10:17.497" endtime="20201129 08:10:17.521"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:17.471" endtime="20201129 08:10:17.521"></status>
</kw>
<kw name="Library version Should Be version: 1.2.8" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:17.522" endtime="20201129 08:10:17.543"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:10:17.544" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[1]' contains exact text 'version: 1.2.8'.</msg>
<status status="PASS" starttime="20201129 08:10:17.543" endtime="20201129 08:10:17.569"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:17.522" endtime="20201129 08:10:17.570"></status>
</kw>
<kw name="Library scope Should Be scope: TEST" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:17.571" endtime="20201129 08:10:17.596"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:10:17.597" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[2]' contains exact text 'scope: TEST'.</msg>
<status status="PASS" starttime="20201129 08:10:17.596" endtime="20201129 08:10:17.621"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:17.570" endtime="20201129 08:10:17.621"></status>
</kw>
<kw name="Library overview Should Be Overview that should be imported for SingleClassLib." library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:17.622" endtime="20201129 08:10:17.649"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:10:17.650" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/div[4]/p' contains exact text 'Overview that should be imported for SingleClassLib.'.</msg>
<status status="PASS" starttime="20201129 08:10:17.650" endtime="20201129 08:10:17.675"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:17.621" endtime="20201129 08:10:17.675"></status>
</kw>
<kw name="Library keywords Should Be Keywords (4)" library="e2e_keywords">
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<doc>Waits until the element ``locator`` is visible.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>0.5s</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:17.676" endtime="20201129 08:10:17.703"></status>
</kw>
<kw name="Element Text Should Be" library="SeleniumLibrary">
<doc>Verifies that element ``locator`` contains exact the text ``expected``.</doc>
<arguments>
<arg>${detail_view_library_${field}}</arg>
<arg>${value}</arg>
</arguments>
<msg timestamp="20201129 08:10:17.704" level="INFO">Verifying element '//*[@id="root"]/div/main/div[2]/div/div/div/h2[2]' contains exact text 'Keywords (4)'.</msg>
<status status="PASS" starttime="20201129 08:10:17.703" endtime="20201129 08:10:17.728"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:17.675" endtime="20201129 08:10:17.728"></status>
</kw>
<doc>This test bases on
'First Page Table After Update Should Contain Proper Libraries Data'
to shorten execution time.</doc>
<tags>
<tag>e2e</tag>
<tag>rfhub2-64</tag>
<tag>update</tag>
</tags>
<status status="PASS" starttime="20201129 08:10:16.512" endtime="20201129 08:10:17.728" critical="yes"></status>
</test>
<kw name="Close Browser" library="SeleniumLibrary" type="teardown">
<doc>Closes the current browser.</doc>
<status status="PASS" starttime="20201129 08:10:17.731" endtime="20201129 08:10:19.978"></status>
</kw>
<status status="PASS" starttime="20201129 08:09:34.277" endtime="20201129 08:10:19.978"></status>
</suite>
<kw name="Stop Rfhub2" library="keywords" type="teardown">
<doc>Stops the rfhub2 process created by "Start Rfhub2"</doc>
<kw name="Terminate Process" library="Process">
<doc>Stops the process gracefully or forcefully.</doc>
<arguments>
<arg>${rfhub2_process}</arg>
</arguments>
<msg timestamp="20201129 08:10:20.011" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20201129 08:10:20.012" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20201129 08:10:20.011" endtime="20201129 08:10:20.012"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20201129 08:10:20.018" level="INFO">${result} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" starttime="20201129 08:10:20.012" endtime="20201129 08:10:20.018"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>rfhub2 stderr: ${result.stderr} \nstdout: ${result.stdout}</arg>
<arg>DEBUG</arg>
</arguments>
<status status="PASS" starttime="20201129 08:10:20.018" endtime="20201129 08:10:20.023"></status>
</kw>
<status status="PASS" starttime="20201129 08:10:20.010" endtime="20201129 08:10:20.023"></status>
</kw>
<status status="PASS" starttime="20201129 08:08:11.102" endtime="20201129 08:10:20.023"></status>
</suite>
<statistics>
<total>
<stat pass="31" fail="0">Critical Tests</stat>
<stat pass="31" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="11" fail="0">e2e</stat>
<stat pass="1" fail="0">regression</stat>
<stat pass="1" fail="0">rfhub2-153</stat>
<stat pass="1" fail="0">rfhub2-155</stat>
<stat pass="3" fail="0">rfhub2-161</stat>
<stat pass="1" fail="0">rfhub2-46</stat>
<stat pass="6" fail="0">rfhub2-64</stat>
<stat pass="3" fail="0">rfhub2-67</stat>
<stat pass="3" fail="0">statistics</stat>
<stat pass="3" fail="0">tags</stat>
<stat pass="5" fail="0">update</stat>
</tag>
<suite>
<stat pass="31" fail="0" id="s1" name="Acceptance">Acceptance</stat>
<stat pass="8" fail="0" id="s1-s1" name="Cli Options">Acceptance.Cli Options</stat>
<stat pass="12" fail="0" id="s1-s2" name="Cli Population">Acceptance.Cli Population</stat>
<stat pass="11" fail="0" id="s1-s3" name="E2E">Acceptance.E2E</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
