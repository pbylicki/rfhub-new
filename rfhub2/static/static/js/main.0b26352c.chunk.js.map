{"version":3,"sources":["components/DrawerCollectionList.tsx","components/Title.tsx","components/CollectionList.tsx","stores/CollectionStore.ts","components/SearchKeywordList.tsx","components/CollectionDetails.tsx","components/SearchBar.tsx","components/Copyright.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","nested","paddingLeft","spacing","fontStyle","DrawerCollectionListItem","observer","store","collection","classes","handleListItemClick","event","index","toggleDrawerSelectedCollection","isSelected","collectionId","drawerSelectedCollection","Fragment","name","length","content","direction","distance","ListItem","selected","id","onClick","ListItemText","disableTypography","text","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","to","button","className","primary","keywords","map","keyword","key","DrawerCollectionList","collections","collectionHasMore","isVisible","getCollections","Title","props","Typography","variant","color","gutterBottom","children","CollectionTableRow","TableRow","TableCell","type","version","align","CollectionList","resultCountLabel","toString","Table","size","TableHead","TableBody","collectionStore","action","bound","this","getVersionInfo","colIndex","axios","get","then","resp","versionInfo","data","selectedKeywordId","detailCollection","keywordId","getCollection","skip","limit","entries","Map","collectionsMap","Array","from","searchResults","searchHasMore","pattern","searchTerm","updateSearchResults","clearSearchResults","Promise","resolve","hasMore","values","observable","computed","SearchKeywordTableRow","synopsis","SearchKeywordList","table","title","searchKeywords","CollectionDetails","element","document","getElementById","scrollIntoView","behavior","block","view","scope","path","dangerouslySetInnerHTML","__html","html_doc","arg_string","React","Component","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","breakpoints","up","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","padding","transition","transitions","create","SearchBar","history","triggerSearch","trim","push","encoded","queryString","stringify","clearIconAdornment","InputAdornment","IconButton","InputBase","placeholder","root","input","value","inputProps","onChange","target","onKeyPress","endAdornment","Copyright","href","toolbar","paddingRight","toolbarIcon","mixins","appBar","zIndex","drawer","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","menuButton","marginRight","menuButtonHidden","flexGrow","flexShrink","drawerPaper","drawerPaperClose","overflowX","appBarSpacer","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","AppTitle","noWrap","withRouter","useState","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","edge","aria-label","Drawer","anchor","Divider","Container","maxWidth","Grid","item","xs","Paper","exact","render","queryParams","parse","location","parseInt","match","params","getCollectionWithKeywordSelected","Boolean","window","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b26352c.chunk.js","sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Link } from 'react-router-dom';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport { StoreProps } from '../types/PropsTypes'\nimport { List } from '@material-ui/core';\nimport { Collection } from '../types/ModelTypes';\nimport { CollectionStore } from '../stores/CollectionStore';\nimport Tooltip from 'react-tooltip-lite'\nimport EllipsisText from \"react-ellipsis-text\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n      fontStyle: 'italic'\n    },\n  }),\n);\n\ninterface DrawerCollectionListItemProps {\n  store: CollectionStore\n  collection: Collection\n}\n\nconst DrawerCollectionListItem: React.FC<DrawerCollectionListItemProps> = observer(({ store, collection }) => {\n  const classes = useStyles();\n\n  function handleListItemClick(\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    index: number,\n  ): void {\n    store.toggleDrawerSelectedCollection(index);\n  }\n\n  function isSelected(collectionId: number): boolean {\n    return store.drawerSelectedCollection === collectionId\n  }\n\n  return (\n    <React.Fragment>\n      {(collection.name.length > 32) ? (\n        <Tooltip content={collection.name} direction=\"right\" distance={26}>\n          <ListItem\n            selected={isSelected(collection.id)}\n            onClick={event => handleListItemClick(event, collection.id)}\n          >\n            <ListItemText disableTypography>\n              <EllipsisText\n                text={collection.name}\n                length='32'\n              />\n            </ListItemText>\n            {isSelected(collection.id) ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n        </Tooltip>\n        ) : (\n        <ListItem\n          selected={isSelected(collection.id)}\n          onClick={event => handleListItemClick(event, collection.id)}\n        >\n          <ListItemText disableTypography>\n            <EllipsisText\n              text={collection.name}\n              length='32'\n            />\n          </ListItemText>\n          {isSelected(collection.id) ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        )\n      }\n      <Collapse in={isSelected(collection.id)} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          <Link to={`/keywords/${collection.id}`}>\n            <ListItem button className={classes.nested}>\n              <ListItemText primary=\"Overview\" disableTypography />\n            </ListItem>\n          </Link>\n          {collection.keywords.map(keyword => {\n            if (keyword.name.length > 32) {\n              return (\n                <Tooltip content={keyword.name} direction=\"right\" distance={26}>\n                  <Link to={`/keywords/${collection.id}/${keyword.id}/`}>\n                    <ListItem button key={keyword.id} className={classes.nested}>\n                      <ListItemText disableTypography>\n                        <EllipsisText\n                          text={keyword.name}\n                          length='32'\n                        />\n                      </ListItemText>\n                    </ListItem>\n                  </Link>\n                </Tooltip>\n              )\n            } else {\n              return (\n                <Link to={`/keywords/${collection.id}/${keyword.id}/`}>\n                  <ListItem button key={keyword.id} className={classes.nested}>\n                    <ListItemText primary={keyword.name} disableTypography />\n                  </ListItem>\n                </Link>\n              )\n            }\n          })}\n        </List>\n      </Collapse>\n    </React.Fragment>\n  )\n})\n\nexport const DrawerCollectionList: React.FC<StoreProps> = observer(({ store }) => {\n  const loadMore = () => store.getCollections(store.collections.length)\n\n  return (\n    <List>\n      {store.collections.map((collection, index) => {\n        if (store.collectionHasMore && index === store.collections.length - 3) {\n          return (\n            <VisibilitySensor key={collection.id}>\n              {({ isVisible }) => {\n                if (isVisible) {\n                  loadMore()\n                }\n                return (<DrawerCollectionListItem store={store} collection={collection} />)\n              }}\n            </VisibilitySensor>)\n        } else {\n          return (<DrawerCollectionListItem key={collection.id} store={store} collection={collection} />)\n        }\n      }\n      )}\n    </List>\n  )\n})\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport const Title: React.SFC = (props) => (\n  <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n    {props.children}\n  </Typography>\n);\n\nexport default Title;\n","/* eslint-disable no-script-url */\n\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { Link } from 'react-router-dom';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport Title from './Title';\nimport { Collection } from '../types/ModelTypes';\nimport { StoreProps } from '../types/PropsTypes';\n\ninterface CollectionTableRowProps {\n  collection: Collection\n}\n\nconst CollectionTableRow: React.FC<CollectionTableRowProps> = ({ collection }) => (\n  <TableRow key={collection.id}>\n    <TableCell><Link to={`/keywords/${collection.id}`}>{collection.name}</Link></TableCell>\n    <TableCell>{collection.type}</TableCell>\n    <TableCell>{collection.version}</TableCell>\n    <TableCell align=\"right\">{collection.keywords.length}</TableCell>\n  </TableRow>\n)\n\nexport const CollectionList: React.FC<StoreProps> = observer(({ store }) => {\n  const loadMore = () => store.getCollections(store.collections.length)\n  const resultCountLabel = store.collectionHasMore ? `${store.collections.length}+` : store.collections.length.toString()\n  return (\n  <React.Fragment>\n    <Title>Collections ({resultCountLabel})</Title>\n    <Table size=\"small\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell>Type</TableCell>\n          <TableCell>Version</TableCell>\n          <TableCell align=\"right\">Keywords</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {store.collections.map((collection, index) => {\n          if (store.collectionHasMore && index === store.collections.length - 3) {\n            return (\n              <VisibilitySensor key={collection.id}>\n                {({ isVisible }) => {\n                  if (isVisible) {\n                    loadMore()\n                  }\n                  return (<CollectionTableRow collection={collection} />)\n                }}\n              </VisibilitySensor>)\n          } else {\n            return (<CollectionTableRow key={collection.id} collection={collection} />)\n          }\n        })}\n      </TableBody>\n    </Table>\n  </React.Fragment>\n)});\nexport default CollectionList","import axios, { AxiosResponse } from 'axios';\nimport { observable, action, computed } from 'mobx';\nimport { Collection, Keyword, VersionInfo } from '../types/ModelTypes';\n\nexport class CollectionStore {\n  @observable collectionsMap: Map<number, Collection> = new Map()\n  @observable collectionHasMore: boolean = false\n  @observable searchTerm: string = \"\"\n  @observable searchHasMore: boolean = false\n  @observable searchResults: Map<number, Keyword> = new Map()\n  @observable drawerSelectedCollection: number = 0\n  @observable detailCollection: Collection | null = null\n  @observable selectedKeywordId: number | null = null\n  @observable versionInfo: VersionInfo | null = null\n\n  constructor() {\n    this.getVersionInfo()\n    this.getCollections()\n  }\n\n  @computed\n  get collections(): Collection[] {\n    return Array.from(this.collectionsMap.values())\n  }\n\n  @action.bound\n  toggleDrawerSelectedCollection(colIndex: number) {\n    if (this.drawerSelectedCollection === colIndex) {\n      this.drawerSelectedCollection = 0;\n    } else {\n      this.drawerSelectedCollection = colIndex;\n    }\n  }\n\n  @action.bound\n  getVersionInfo(): Promise<void> {\n    return axios.get(`/api/v1/version/`)\n      .then(resp => {\n        this.versionInfo = resp.data;\n      })\n  }\n\n  @action.bound\n  getCollection(id: number): Promise<void> {\n    this.selectedKeywordId = null;\n    this.detailCollection = null;\n    return axios.get(`/api/v1/collections/${id}/`)\n      .then(resp => {\n        this.detailCollection = resp.data;\n      })\n  }\n\n  @action.bound\n  getCollectionWithKeywordSelected(collectionId: number, keywordId: number): void {\n    this.getCollection(collectionId)\n    this.selectedKeywordId = keywordId\n  }\n\n  @action.bound\n  getCollections(skip: number = 0, limit: number = 100): Promise<void> {\n    this.collectionHasMore = false\n    return axios.get<any, AxiosResponse<Collection[]>>(`/api/v1/collections/?skip=${skip}&limit=${limit}`)\n      .then(resp => {\n        const entries = new Map(resp.data.map((collection: Collection, index: number) => [skip + index, collection]));\n        this.collectionsMap = new Map([...Array.from(this.collectionsMap), ...Array.from(entries)]);\n        this.collectionHasMore = resp.data.length === limit;\n      })\n  }\n\n  @action.bound\n  clearSearchResults(): void {\n    this.searchResults = new Map();\n    this.searchHasMore = false;\n  }\n\n  @action.bound\n  searchKeywords(pattern: string, skip: number = 0, limit: number = 100): Promise<void> {\n    this.searchTerm = pattern;\n    if (pattern.length > 2) {\n      this.searchHasMore = false\n      return axios.get<any, AxiosResponse<Keyword[]>>(`/api/v1/keywords/search/?pattern=${pattern}&skip=${skip}&limit=${limit}`)\n        .then(resp => {\n          const entries = new Map(resp.data.map((keyword: Keyword, index: number) => [skip + index, keyword]));\n          const searchHasMore = resp.data.length === limit;\n          this.updateSearchResults(entries, searchHasMore);\n        })\n    } else {\n      this.clearSearchResults();\n      return Promise.resolve()\n    }\n  }\n\n  @action.bound\n  updateSearchResults(searchResults: Map<number, Keyword>, hasMore: boolean): void {\n    this.searchResults = new Map([...Array.from(this.searchResults), ...Array.from(searchResults)]);;\n    this.searchHasMore = hasMore;\n  }\n}\n\nexport const collectionStore: CollectionStore = new CollectionStore()\n","/* eslint-disable no-script-url */\n\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { Link } from 'react-router-dom';\nimport { TableRow, TableCell, Table, TableHead, TableBody } from '@material-ui/core';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport Title from './Title';\nimport { Keyword } from '../types/ModelTypes';\nimport { StoreProps } from '../types/PropsTypes';\n\ninterface SearchKeywordTableRowProps {\n  keyword: Keyword;\n}\n\nconst SearchKeywordTableRow: React.FC<SearchKeywordTableRowProps> = ({ keyword }) => (\n  <TableRow key={keyword.id}>\n    <TableCell><Link to={`/keywords/${keyword.collection.id}/${keyword.id}/`}>{keyword.name}</Link></TableCell>\n    <TableCell>{keyword.collection.name}</TableCell>\n    <TableCell>{keyword.synopsis}</TableCell>\n  </TableRow>\n)\n\nexport const SearchKeywordList: React.FC<StoreProps> = observer(({ store }) => {\n  const loadMore = () => store.searchKeywords(store.searchTerm, store.searchResults.size)\n\n  let table, title\n  if (store.searchResults.size > 0) {\n    const resultCountLabel = store.searchHasMore ? `${store.searchResults.size}+` : store.searchResults.size.toString()\n    title = `Found ${resultCountLabel} keywords matching \"${store.searchTerm}\"`\n    table = (\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Collection</TableCell>\n            <TableCell>Description</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {Array.from(store.searchResults.values()).map((keyword, index) => {\n            if (store.searchHasMore && index === store.searchResults.size - 3) {\n              return (\n                <VisibilitySensor key={keyword.id}>\n                  {({ isVisible }) => {\n                    if (isVisible) {\n                      loadMore()\n                    }\n                    return (<SearchKeywordTableRow keyword={keyword} />)\n                  }}\n                </VisibilitySensor>)\n            } else {\n              return (<SearchKeywordTableRow key={keyword.id} keyword={keyword} />)\n            }\n          }\n          )}\n        </TableBody>\n      </Table>\n    )\n  } else {\n    title = \"No keywords found\"\n  }\n  return (\n    <React.Fragment>\n      <Title>{title}</Title>\n      {table}\n    </React.Fragment>\n  )\n});\nexport default SearchKeywordList\n","/* eslint-disable no-script-url */\n\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport { StoreProps } from '../types/PropsTypes';\n\n@observer\nexport default class CollectionDetails extends React.Component<StoreProps> {\n\n  componentDidUpdate() {\n    if (this.props.store.selectedKeywordId) {\n      const element = document.getElementById(this.props.store.selectedKeywordId.toString());\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    }\n  }\n\n  render() {\n    const store = this.props.store;\n    let view\n    if (store && store.detailCollection) {\n      view = (\n        <React.Fragment>\n          <Title>{store.detailCollection.name}</Title>\n          <div>version: {store.detailCollection.version}</div>\n          <div>scope: {store.detailCollection.scope}</div>\n          <div>path: {store.detailCollection.path}</div>\n          <div dangerouslySetInnerHTML={{ __html: store.detailCollection.html_doc }}></div>\n          <Title>Keywords ({store.detailCollection.keywords.length})</Title>\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Keyword</TableCell>\n                <TableCell>Arguments</TableCell>\n                <TableCell>Documentation</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {store.detailCollection.keywords.map(keyword => (\n                <TableRow id={keyword.id.toString()} key={keyword.id}>\n                  <TableCell>{keyword.name}</TableCell>\n                  <TableCell>{keyword.arg_string}</TableCell>\n                  <TableCell dangerouslySetInnerHTML={{ __html: keyword.html_doc }}></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </React.Fragment>\n      )\n    } else {\n      view = (\n        <React.Fragment>\n          <Title>Collection not found</Title>\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        {view}\n      </React.Fragment>\n    )\n  }\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport queryString from 'query-string';\nimport { History } from 'history';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { IconButton } from '@material-ui/core';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport InputBase from '@material-ui/core/InputBase';\nimport { CollectionStore } from '../stores/CollectionStore';\n\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 180,\n      '&:focus': {\n        width: 240,\n      },\n    },\n  },\n}))\n\ninterface SearchBarProps {\n  store: CollectionStore\n  history: History<any>\n}\n\nexport const SearchBar: React.FC<SearchBarProps> = observer(({ store, history }) => {\n  const classes = useStyles();\n\n  const triggerSearch = (pattern: string) => {\n    if (pattern.trim() === '') {\n      store.searchKeywords(pattern);\n      history.push('/')\n    } else {\n      const encoded: string = queryString.stringify({ \"q\": pattern });\n      history.push(`/search/?${encoded}`)\n    }\n  }\n\n  const handleClear = (event: React.MouseEvent<HTMLButtonElement>) =>\n    triggerSearch('')\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n    triggerSearch(event.target.value)\n\n  const handleSubmit = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      triggerSearch(store.searchTerm)\n    }\n  }\n\n  const clearIconAdornment: JSX.Element | null = store.searchTerm ?\n    (<InputAdornment position=\"end\">\n      <IconButton onClick={handleClear}>\n        <ClearIcon />\n      </IconButton>\n    </InputAdornment>) :\n    null\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon />\n      </div>\n      <InputBase\n        placeholder=\"Search…\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        value={store.searchTerm}\n        inputProps={{ 'aria-label': 'search' }}\n        onChange={handleSearchChange}\n        onKeyPress={handleSubmit}\n        endAdornment={clearIconAdornment}\n      />\n    </div>\n  )\n})\n\nexport default SearchBar","import React from 'react';\nimport { observer } from 'mobx-react';\nimport ExternalLink from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { StoreProps } from '../types/PropsTypes';\n\nexport const Copyright: React.FC<StoreProps> = observer(({ store }) => {\n    const version = store.versionInfo ? `version ${store.versionInfo.version}` : \"\"\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            <ExternalLink color=\"inherit\" href=\"https://github.com/pbylicki/rfhub2\">\n                rfhub2\n          </ExternalLink>\n            {` ${version}`}\n        </Typography>\n    );\n})\n\nexport default Copyright","import React from 'react';\nimport { Link, Route, RouteComponentProps, withRouter } from 'react-router-dom';\nimport clsx from 'clsx';\nimport queryString, { ParsedQuery } from 'query-string';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport { DrawerCollectionList } from './components/DrawerCollectionList';\nimport CollectionList from './components/CollectionList';\nimport { collectionStore } from './stores/CollectionStore';\nimport SearchKeywordList from './components/SearchKeywordList';\nimport CollectionDetails from './components/CollectionDetails';\nimport SearchBar from './components/SearchBar';\nimport './App.css';\nimport Copyright from './components/Copyright';\nimport { StoreProps } from './types/PropsTypes';\nimport { observer } from 'mobx-react';\n\ninterface CollectionDetailsMatchParams {\n  id: string\n}\ninterface KeywordDetailsMatchParams {\n  id: string\n  keywordId: string\n}\n\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  }\n}));\n\nconst AppTitle: React.FC<StoreProps> = observer(({ store }) => {\n  const classes = useStyles();\n  const title = store.versionInfo ? store.versionInfo.title : \"rfhub2\"\n  return (\n    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n      <Link to=\"/\">\n        {title}\n      </Link>\n    </Typography>\n  )\n})\n\nexport const App: React.FC<RouteComponentProps<any>> = ({ history }) => {\n  const store = collectionStore;\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleSearchRoute = (props: RouteComponentProps) => {\n    const queryParams: ParsedQuery<string> = queryString.parse(props.location.search)\n    if (queryParams[\"q\"]) {\n      store.clearSearchResults()\n      store.searchKeywords(queryParams[\"q\"] as string)\n    } else {\n      store.searchKeywords(\"\")\n    }\n    return <SearchKeywordList {...props} store={store} />\n  }\n\n  const handleCollectionRoute = (props: RouteComponentProps<CollectionDetailsMatchParams>) => {\n    const collectionId = parseInt(props.match.params.id)\n    store.getCollection(collectionId)\n    return <CollectionDetails store={store} />\n  }\n\n  const handleKeywordRoute = (props: RouteComponentProps<KeywordDetailsMatchParams>) => {\n    const collectionId = parseInt(props.match.params.id)\n    const keywordId = parseInt(props.match.params.keywordId)\n    store.getCollectionWithKeywordSelected(collectionId, keywordId)\n    return <CollectionDetails store={store} />\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <AppTitle store={store} />\n          <SearchBar store={store} history={history} />\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <DrawerCollectionList store={store} />\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <Route path=\"/\" exact render={(props) => <CollectionList {...props} store={store} />} />\n                <Route path=\"/search/\" render={handleSearchRoute} />\n                <Route path=\"/keywords/:id/\" exact render={handleCollectionRoute} />\n                <Route path=\"/keywords/:id/:keywordId\" exact render={handleKeywordRoute} />\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n        <Copyright store={store} />\n      </main>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}