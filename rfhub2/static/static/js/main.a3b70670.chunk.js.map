{"version":3,"sources":["components/DrawerCollectionList.tsx","components/Title.tsx","components/CollectionList.tsx","stores/CollectionStore.ts","components/SearchKeywordList.tsx","components/CollectionDetails.tsx","components/SearchBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","nested","paddingLeft","spacing","fontStyle","DrawerCollectionList","observer","store","classes","isSelected","collectionId","drawerSelectedCollection","List","collections","map","collection","Fragment","key","id","ListItem","selected","onClick","event","index","toggleDrawerSelectedCollection","ListItemText","primary","name","Collapse","in","timeout","unmountOnExit","component","disablePadding","button","className","to","keywords","keyword","Title","props","Typography","variant","color","gutterBottom","children","CollectionList","length","Table","size","TableHead","TableRow","TableCell","align","TableBody","type","version","collectionStore","action","bound","this","getCollections","colIndex","selectedKeywordId","detailCollection","axios","get","then","resp","data","keywordId","getCollection","skip","limit","pattern","searchResults","searchTerm","observable","SearchKeywordList","table","title","resultCountLabel","toString","synopsis","CollectionDetails","element","document","getElementById","scrollIntoView","behavior","block","view","dangerouslySetInnerHTML","__html","html_doc","arg_string","React","Component","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","breakpoints","up","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","inputInput","padding","transition","transitions","create","SearchBar","history","InputBase","placeholder","root","input","value","inputProps","onChange","target","trim","searchKeywords","push","encoded","queryString","stringify","Copyright","href","Date","getFullYear","toolbar","paddingRight","toolbarIcon","mixins","appBar","zIndex","drawer","easing","sharp","duration","leavingScreen","appBarShift","enteringScreen","menuButton","marginRight","menuButtonHidden","flexGrow","flexShrink","drawerPaper","drawerPaperClose","overflowX","appBarSpacer","content","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","withRouter","useState","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","aria-label","noWrap","Drawer","anchor","Divider","Container","maxWidth","Grid","item","xs","Paper","path","exact","render","queryParams","parse","location","parseInt","match","params","getCollectionWithKeywordSelected","Boolean","window","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3b70670.chunk.js","sourcesContent":["import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Link } from 'react-router-dom';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { StoreProps } from '../types/PropsTypes'\nimport { List } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    nested: {\n      paddingLeft: theme.spacing(4),\n      fontStyle: 'italic'\n    },\n  }),\n);\n\nexport const DrawerCollectionList: React.FC<StoreProps> = observer(({ store }) => {\n  const classes = useStyles();\n\n  function handleListItemClick(\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    index: number,\n  ): void {\n    store.toggleDrawerSelectedCollection(index);\n  }\n\n  function isSelected(collectionId: number): boolean {\n    return store.drawerSelectedCollection === collectionId\n  }\n\n  return (\n    <List>\n      {store.collections.map(collection => (\n        <React.Fragment key={collection.id}>\n          <ListItem\n            selected={isSelected(collection.id)}\n            onClick={event => handleListItemClick(event, collection.id)}\n          >\n            <ListItemText primary={collection.name} />\n            {isSelected(collection.id) ? <ExpandLess /> : <ExpandMore />}\n          </ListItem>\n          <Collapse in={isSelected(collection.id)} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n              <ListItem button className={classes.nested}>\n                <Link to={`/keywords/${collection.id}`}><ListItemText primary=\"Overview\" /></Link>\n              </ListItem>\n              {collection.keywords.map(keyword => (\n                <ListItem button key={keyword.id} className={classes.nested}>\n                  <Link to={`/keywords/${collection.id}/${keyword.id}/`}>\n                    <ListItemText primary={keyword.name} />\n                  </Link>\n                </ListItem>\n              ))}\n            </List>\n          </Collapse>\n        </React.Fragment>\n      )\n      )}\n    </List>\n  )\n})\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport const Title: React.SFC = (props) => (\n  <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n    {props.children}\n  </Typography>\n);\n\nexport default Title;\n","/* eslint-disable no-script-url */\n\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { Link } from 'react-router-dom';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport { StoreProps } from '../types/PropsTypes'\n\nexport const CollectionList: React.FC<StoreProps> = observer(({ store }) => (\n  <React.Fragment>\n    <Title>Collections ({store.collections.length})</Title>\n    <Table size=\"small\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell>Type</TableCell>\n          <TableCell>Version</TableCell>\n          <TableCell align=\"right\">Keywords</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {store.collections.map(collection => (\n\n          <TableRow key={collection.id}>\n            <TableCell><Link to={`/keywords/${collection.id}`}>{collection.name}</Link></TableCell>\n            <TableCell>{collection.type}</TableCell>\n            <TableCell>{collection.version}</TableCell>\n            <TableCell align=\"right\">{collection.keywords.length}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  </React.Fragment>\n));\nexport default CollectionList","import axios from 'axios';\nimport { observable, action } from 'mobx';\n\ninterface Keyword {\n  id: number\n  name: string\n  doc: string\n  args: string | null\n  arg_string: string\n  synopsis: string\n  html_doc: string\n  collection: NestedCollection\n}\n\ninterface NestedKeyword {\n  id: number\n  name: string\n  doc: string\n  args: string | null\n  arg_string: string\n  synopsis: string\n  html_doc: string\n}\n\ninterface Collection {\n  id: number\n  name: string\n  doc: string\n  type: string\n  version: string | null\n  synopsis: string\n  html_doc: string\n  keywords: NestedKeyword[]\n}\n\ninterface NestedCollection {\n  id: number\n  name: string\n}\n\nexport class CollectionStore {\n  @observable collections: Collection[] = []\n  @observable searchTerm: String = \"\"\n  @observable searchResults: Keyword[] = []\n  @observable drawerSelectedCollection: number = 0\n  @observable detailCollection: Collection | null = null\n  @observable selectedKeywordId: number | null = null\n\n  constructor() {\n    this.getCollections()\n  }\n\n  @action.bound\n  toggleDrawerSelectedCollection(colIndex: number) {\n    if (this.drawerSelectedCollection === colIndex) {\n      this.drawerSelectedCollection = 0;\n    } else {\n      this.drawerSelectedCollection = colIndex;\n    }\n  }\n\n  @action.bound\n  getCollection(id: number): Promise<void> {\n    this.selectedKeywordId = null;\n    this.detailCollection = null;\n    return axios.get(`/api/v1/collections/${id}/`)\n      .then(resp => {\n        this.detailCollection = resp.data;\n      })\n  }\n\n  @action.bound\n  getCollectionWithKeywordSelected(collectionId: number, keywordId: number): void {\n    this.getCollection(collectionId)\n    this.selectedKeywordId = keywordId\n  }\n\n  @action.bound\n  getCollections(skip: number = 0, limit: number = 100): void {\n    axios.get(`/api/v1/collections/?skip=${skip}&limit=${limit}`)\n      .then(resp => {\n        this.collections = resp.data;\n      })\n  }\n\n  @action.bound\n  searchKeywords(pattern: string, skip: number = 0, limit: number = 100): void {\n    if (pattern.length > 2) {\n      axios.get(`/api/v1/keywords/search/?pattern=${pattern}&skip=${skip}&limit=${limit}`)\n        .then(resp => {\n          this.searchResults = resp.data;\n        })\n    } else {\n      this.searchResults = [];\n    }\n    this.searchTerm = pattern;\n  }\n}\n\nexport const collectionStore: CollectionStore = new CollectionStore()\n","/* eslint-disable no-script-url */\n\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport { Link } from 'react-router-dom';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport { StoreProps } from '../types/PropsTypes';\n\nexport const SearchKeywordList: React.FC<StoreProps> = observer(({ store }) => {\n\n  let table, title\n  if (store.searchResults.length > 0) {\n    const resultCountLabel = store.searchResults.length === 100 ? \"100+\" : store.searchResults.length.toString()\n    title = `Found ${resultCountLabel} keywords matching \"${store.searchTerm}\"`\n    table = (\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            <TableCell>Collection</TableCell>\n            <TableCell>Description</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {store.searchResults.map(keyword => (\n            <TableRow key={keyword.id}>\n              <TableCell><Link to={`/keywords/${keyword.collection.id}/${keyword.id}/`}>{keyword.name}</Link></TableCell>\n              <TableCell>{keyword.collection.name}</TableCell>\n              <TableCell>{keyword.synopsis}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    )\n  } else {\n    title = \"No keywords found\"\n  }\n  return (\n    <React.Fragment>\n      <Title>{title}</Title>\n      {table}\n    </React.Fragment>\n  )\n});\nexport default SearchKeywordList","/* eslint-disable no-script-url */\n\nimport React from 'react';\nimport { observer } from 'mobx-react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Title from './Title';\nimport { StoreProps } from '../types/PropsTypes';\n\n@observer\nexport default class CollectionDetails extends React.Component<StoreProps> {\n\n  componentDidUpdate() {\n    if (this.props.store.selectedKeywordId) {\n      const element = document.getElementById(this.props.store.selectedKeywordId.toString());\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    }\n  }\n\n  render() {\n    const store = this.props.store;\n    let view\n    if (store && store.detailCollection) {\n      view = (\n        <React.Fragment>\n          <Title>{store.detailCollection.name}</Title>\n          <div>version: {store.detailCollection.version}</div>\n          <div>scope: {store.detailCollection.scope}</div>\n          <div dangerouslySetInnerHTML={{ __html: store.detailCollection.html_doc }}></div>\n          <Title>Keywords ({store.detailCollection.keywords.length})</Title>\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Keyword</TableCell>\n                <TableCell>Arguments</TableCell>\n                <TableCell>Documentation</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {store.detailCollection.keywords.map(keyword => (\n                <TableRow id={keyword.id.toString()} key={keyword.id}>\n                  <TableCell>{keyword.name}</TableCell>\n                  <TableCell>{keyword.arg_string}</TableCell>\n                  <TableCell dangerouslySetInnerHTML={{ __html: keyword.html_doc }}></TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </React.Fragment>\n      )\n    } else {\n      view = (\n        <React.Fragment>\n          <Title>Collection not found</Title>\n        </React.Fragment>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        {view}\n      </React.Fragment>\n    )\n  }\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport queryString from 'query-string';\nimport { History } from 'history';\nimport { makeStyles, fade } from '@material-ui/core/styles';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputBase from '@material-ui/core/InputBase';\nimport { CollectionStore } from '../stores/CollectionStore';\n\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 180,\n      '&:focus': {\n        width: 240,\n      },\n    },\n  },\n}))\n\ninterface SearchBarProps {\n  store: CollectionStore\n  history: History<any>\n}\n\nexport const SearchBar: React.FC<SearchBarProps> = observer(({ store, history }) => {\n  const classes = useStyles();\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const pattern: string = event.target.value\n    if (pattern.trim() === '') {\n      store.searchKeywords(pattern);\n      history.push('/')\n    } else {\n      const encoded: string = queryString.stringify({ \"q\": pattern });\n      history.push(`/search/?${encoded}`)\n    }\n  }\n\n  return (\n    <div className={classes.search}>\n      <div className={classes.searchIcon}>\n        <SearchIcon />\n      </div>\n      <InputBase\n        placeholder=\"Search…\"\n        classes={{\n          root: classes.inputRoot,\n          input: classes.inputInput,\n        }}\n        value={store.searchTerm}\n        inputProps={{ 'aria-label': 'search' }}\n        onChange={handleSearchChange}\n      />\n    </div>\n  )\n})\n\nexport default SearchBar","import React from 'react';\nimport { Link, Route, RouteComponentProps, withRouter } from 'react-router-dom';\nimport clsx from 'clsx';\nimport queryString, { ParsedQuery } from 'query-string';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport ExternalLink from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport { DrawerCollectionList } from './components/DrawerCollectionList';\nimport CollectionList from './components/CollectionList';\nimport { collectionStore } from './stores/CollectionStore';\nimport SearchKeywordList from './components/SearchKeywordList';\nimport CollectionDetails from './components/CollectionDetails';\nimport SearchBar from './components/SearchBar';\nimport './App.css';\n\ninterface CollectionDetailsMatchParams {\n  id: string\n}\ninterface KeywordDetailsMatchParams {\n  id: string\n  keywordId: string\n}\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <ExternalLink color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </ExternalLink>{' '}\n      {new Date().getFullYear()}\n      {'. Built with '}\n      <ExternalLink color=\"inherit\" href=\"https://material-ui.com/\">\n        Material-UI.\n      </ExternalLink>\n    </Typography>\n  );\n}\n\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  }\n}));\n\nexport const App: React.FC<RouteComponentProps<any>> = ({ history }) => {\n  const store = collectionStore;\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleSearchRoute = (props: RouteComponentProps) => {\n    const queryParams: ParsedQuery<string> = queryString.parse(props.location.search)\n    if (queryParams[\"q\"]) {\n      store.searchKeywords(queryParams[\"q\"] as string)\n    } else {\n      store.searchKeywords(\"\")\n    }\n    return <SearchKeywordList {...props} store={store} />\n  }\n\n  const handleCollectionRoute = (props: RouteComponentProps<CollectionDetailsMatchParams>) => {\n    const collectionId = parseInt(props.match.params.id)\n    store.getCollection(collectionId)\n    return <CollectionDetails store={store} />\n  }\n\n  const handleKeywordRoute = (props: RouteComponentProps<KeywordDetailsMatchParams>) => {\n    const collectionId = parseInt(props.match.params.id)\n    const keywordId = parseInt(props.match.params.keywordId)\n    store.getCollectionWithKeywordSelected(collectionId, keywordId)\n    return <CollectionDetails store={store} />\n  }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n          <Link to=\"/\">\n            rfhub2\n            </Link>\n          </Typography>\n          <SearchBar store={store} history={history} />\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <DrawerCollectionList store={store} />\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <Paper className={classes.paper}>\n                <Route path=\"/\" exact render={(props) => <CollectionList {...props} store={store} />} />\n                <Route path=\"/search/\" render={handleSearchRoute} />\n                <Route path=\"/keywords/:id/\" exact render={handleCollectionRoute} />\n                <Route path=\"/keywords/:id/:keywordId\" exact render={handleKeywordRoute} />\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n        <Copyright />\n      </main>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}